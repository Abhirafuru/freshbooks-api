// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region RecurringIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringIdentity : global::NClassify.Library.IMessage
    {
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringIdentity : IRecurringIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringIdentity _defaultInstance = new RecurringIdentity(false);
        public static RecurringIdentity DefaultInstance { get { return _defaultInstance; } }
        static RecurringIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringIdentity() : this(true)
        {
        }
        public RecurringIdentity(IRecurringIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            RecurringId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        #endregion
        #region Instance Members
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
                __has_recurringId = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_recurringId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.RecurringId));
                errorCount++;
            }
            return errorCount;
        }
        public IRecurringIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringIdentity value = (RecurringIdentity)base.MemberwiseClone();
            return value;
        }
        public RecurringIdentity Clone()
        {
            return (RecurringIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringIdentity) MergeFrom((IRecurringIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringIdentity other)
        {
            if (other.HasRecurringId) RecurringId = other.RecurringId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "recurring_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_recurringId)
            {
                writer.WriteElementString("recurring_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_recurringId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Recurring
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurring : global::NClassify.Library.IMessage
    {
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
        bool HasDate { get; }
        global::System.DateTime Date { get; }
        bool HasOccurrences { get; }
        int Occurrences { get; }
        bool HasStopped { get; }
        bool Stopped { get; }
        bool HasFrequency { get; }
        global::Freshbooks.Library.Model.RecurringFrequency Frequency { get; }
        bool HasAutobill { get; }
        global::Freshbooks.Library.Model.AutoBilling Autobill { get; }
        bool HasSendEmail { get; }
        bool SendEmail { get; }
        bool HasSendSnailMail { get; }
        bool SendSnailMail { get; }
        bool HasReturnUri { get; }
        string ReturnUri { get; }
        bool HasUpdated { get; }
        global::System.DateTime Updated { get; }
    }
    [global::System.Xml.Serialization.XmlType("Recurring")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Recurring : global::Freshbooks.Library.Model.ClientBill, IRecurring, global::NClassify.Library.IBuilder
    {
        private static readonly Recurring _defaultInstance = new Recurring(false);
        public static new Recurring DefaultInstance { get { return _defaultInstance; } }
        static Recurring()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Recurring(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Recurring() : this(true)
        {
        }
        public Recurring(IRecurring copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            RecurringId = 1,
            Date = 21,
            Occurrences = 100,
            Stopped = 101,
            Frequency = 102,
            Autobill = 110,
            SendEmail = 111,
            SendSnailMail = 112,
            ReturnUri = 121,
            Updated = 122,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidOccurrences(int value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(0) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Occurrences, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Occurrences, 0));
                return false;
            }
            return true;
        }
        public static bool IsValidFrequency(global::Freshbooks.Library.Model.RecurringFrequency value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Frequency, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidAutobill(global::Freshbooks.Library.Model.AutoBilling value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Autobill, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Autobill));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Autobill, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidReturnUri(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ReturnUri, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ReturnUri));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        private bool __has_date;
        private global::System.DateTime __fld_date;
        private bool __has_occurrences;
        private int __fld_occurrences;
        private bool __has_stopped;
        private bool __fld_stopped;
        private bool __has_frequency;
        private global::Freshbooks.Library.Model.RecurringFrequency __fld_frequency;
        private bool __has_autobill;
        private global::Freshbooks.Library.Model.AutoBilling __fld_autobill;
        private bool __has_sendEmail;
        private bool __fld_sendEmail;
        private bool __has_sendSnailMail;
        private bool __fld_sendSnailMail;
        private bool __has_returnUri;
        private string __fld_returnUri;
        private bool __has_updated;
        private global::System.DateTime __fld_updated;
        #endregion
        #region Instance Members
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
                __has_recurringId = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public bool HasDate
        {
            get { return __has_date; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = global::System.DateTime.MinValue;
                __has_date = false;
            }
        }
        public global::System.DateTime Date
        {
            get
            {
                return __fld_date;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = value;
                __has_date = true;
            }
        }
        public bool HasOccurrences
        {
            get { return __has_occurrences; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_occurrences = 0;
                __has_occurrences = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0)]
        public int Occurrences
        {
            get
            {
                return __fld_occurrences;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_occurrences = value;
                __has_occurrences = true;
            }
        }
        public bool HasStopped
        {
            get { return __has_stopped; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_stopped = false;
                __has_stopped = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Stopped
        {
            get
            {
                return __fld_stopped;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_stopped = value;
                __has_stopped = true;
            }
        }
        public bool HasFrequency
        {
            get { return __has_frequency; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_frequency = new global::Freshbooks.Library.Model.RecurringFrequency("");
                __has_frequency = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringFrequency Frequency
        {
            get
            {
                return __fld_frequency;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_frequency = value;
                __has_frequency = true;
            }
        }
        public bool HasAutobill
        {
            get { return __has_autobill; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobill = global::Freshbooks.Library.Model.AutoBilling.DefaultInstance;
                __has_autobill = false;
            }
        }
        public global::Freshbooks.Library.Model.AutoBilling Autobill
        {
            get
            {
                return __fld_autobill;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Autobill");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobill = value;
                __has_autobill = true;
            }
        }
        public bool HasSendEmail
        {
            get { return __has_sendEmail; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sendEmail = false;
                __has_sendEmail = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool SendEmail
        {
            get
            {
                return __fld_sendEmail;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sendEmail = value;
                __has_sendEmail = true;
            }
        }
        public bool HasSendSnailMail
        {
            get { return __has_sendSnailMail; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sendSnailMail = false;
                __has_sendSnailMail = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool SendSnailMail
        {
            get
            {
                return __fld_sendSnailMail;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sendSnailMail = value;
                __has_sendSnailMail = true;
            }
        }
        public bool HasReturnUri
        {
            get { return __has_returnUri; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_returnUri = "";
                __has_returnUri = false;
            }
        }
        public string ReturnUri
        {
            get
            {
                return __fld_returnUri;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("ReturnUri");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_returnUri = value;
                __has_returnUri = true;
            }
        }
        public bool HasUpdated
        {
            get { return __has_updated; }
        }
        public global::System.DateTime Updated
        {
            get
            {
                return __fld_updated;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updated = value;
                __has_updated = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_recurringId && !IsValidRecurringId(__fld_recurringId, onError)) errorCount++;
            if (__has_occurrences && !IsValidOccurrences(__fld_occurrences, onError)) errorCount++;
            if (__has_frequency && !IsValidFrequency(__fld_frequency, onError)) errorCount++;
            if (__has_autobill && !IsValidAutobill(__fld_autobill, onError)) errorCount++;
            if (__has_returnUri && !IsValidReturnUri(__fld_returnUri, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_autobill.MakeReadOnly();
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
            __has_autobill = true;
            __has_returnUri = true;
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
            __has_date = false;
            __fld_date = global::System.DateTime.MinValue;
            __has_occurrences = false;
            __fld_occurrences = 0;
            __has_stopped = false;
            __fld_stopped = false;
            __has_frequency = false;
            __fld_frequency = new global::Freshbooks.Library.Model.RecurringFrequency("");
            __has_autobill = false;
            __fld_autobill = global::Freshbooks.Library.Model.AutoBilling.DefaultInstance;
            __has_sendEmail = false;
            __fld_sendEmail = false;
            __has_sendSnailMail = false;
            __fld_sendSnailMail = false;
            __has_returnUri = false;
            __fld_returnUri = "";
            __has_updated = false;
            __fld_updated = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            Recurring value = (Recurring)base.MemberwiseClone();
            value.__fld_autobill = (global::Freshbooks.Library.Model.AutoBilling)value.__fld_autobill.Clone();
            return value;
        }
        public new Recurring Clone()
        {
            return (Recurring)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurring) MergeFrom((IRecurring)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IRecurring other)
        {
            if (other.HasRecurringId) RecurringId = other.RecurringId;
            if (other.HasDate) Date = other.Date;
            if (other.HasOccurrences) Occurrences = other.Occurrences;
            if (other.HasStopped) Stopped = other.Stopped;
            if (other.HasFrequency) Frequency = other.Frequency;
            if (other.HasAutobill) Autobill = (global::Freshbooks.Library.Model.AutoBilling)other.Autobill.Clone();
            if (other.HasSendEmail) SendEmail = other.SendEmail;
            if (other.HasSendSnailMail) SendSnailMail = other.SendSnailMail;
            if (other.HasReturnUri) ReturnUri = other.ReturnUri;
            if (other.HasUpdated) Updated = other.Updated;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "autobill", "date", "frequency", "occurrences", "recurring_id", "return_uri", "send_email", "send_snail_mail", "stopped", "updated" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true, false, false, false, false, false, false, false, false, false };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.AutoBilling value = __fld_autobill;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.AutoBilling.DefaultInstance) ? new global::Freshbooks.Library.Model.AutoBilling() : new global::Freshbooks.Library.Model.AutoBilling(__fld_autobill);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_autobill = value;
                        __has_autobill = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_date = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_date = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        __fld_frequency = new global::Freshbooks.Library.Model.RecurringFrequency(sbuilder.ToString());
                        __has_frequency = true;
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_occurrences = global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_occurrences = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        __fld_returnUri = sbuilder.ToString();
                        __has_returnUri = true;
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_sendEmail = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_sendEmail = true;
                        }
                        break;
                    }
                    case 7:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_sendSnailMail = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_sendSnailMail = true;
                        }
                        break;
                    }
                    case 8:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_stopped = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_stopped = true;
                        }
                        break;
                    }
                    case 9:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updated = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updated = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_recurringId)
            {
                writer.WriteElementString("recurring_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_recurringId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_date)
            {
                writer.WriteElementString("date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_date, "yyyy-MM-dd", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_occurrences)
            {
                writer.WriteElementString("occurrences", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_occurrences, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_stopped)
            {
                writer.WriteElementString("stopped", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_stopped, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_frequency)
            {
                writer.WriteElementString("frequency", __fld_frequency.Value);
            }
            if (__has_autobill)
            {
                __fld_autobill.WriteXml("autobill", writer);
            }
            if (__has_sendEmail)
            {
                writer.WriteElementString("send_email", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_sendEmail, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_sendSnailMail)
            {
                writer.WriteElementString("send_snail_mail", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_sendSnailMail, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_returnUri)
            {
                writer.WriteElementString("return_uri", __fld_returnUri);
            }
        }
        #endregion
    }
    #endregion
    #region AutoBilling
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IAutoBilling : global::NClassify.Library.IMessage
    {
        bool HasGatewayName { get; }
        string GatewayName { get; }
        bool HasCard { get; }
        global::Freshbooks.Library.Model.CardInfo Card { get; }
    }
    [global::System.Xml.Serialization.XmlType("AutoBilling")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class AutoBilling : IAutoBilling, global::NClassify.Library.IBuilder
    {
        private static readonly AutoBilling _defaultInstance = new AutoBilling(false);
        public static AutoBilling DefaultInstance { get { return _defaultInstance; } }
        static AutoBilling()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected AutoBilling(bool initalize)
        {
            if (initalize) Initialize();
        }
        public AutoBilling() : this(true)
        {
        }
        public AutoBilling(IAutoBilling copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            GatewayName = 1,
            Card = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidGatewayName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.GatewayName));
                return false;
            }
            return true;
        }
        public static bool IsValidCard(global::Freshbooks.Library.Model.CardInfo value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Card, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Card));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Card, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_gatewayName;
        private string __fld_gatewayName;
        private bool __has_card;
        private global::Freshbooks.Library.Model.CardInfo __fld_card;
        #endregion
        #region Instance Members
        public bool HasGatewayName
        {
            get { return __has_gatewayName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_gatewayName = "";
                __has_gatewayName = false;
            }
        }
        public string GatewayName
        {
            get
            {
                return __fld_gatewayName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("GatewayName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_gatewayName = value;
                __has_gatewayName = true;
            }
        }
        public bool HasCard
        {
            get { return __has_card; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_card = global::Freshbooks.Library.Model.CardInfo.DefaultInstance;
                __has_card = false;
            }
        }
        public global::Freshbooks.Library.Model.CardInfo Card
        {
            get
            {
                return __fld_card;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Card");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_card = value;
                __has_card = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_gatewayName)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayName, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.GatewayName));
                errorCount++;
            }
            if (!__has_card)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Card, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Card));
                errorCount++;
            }
            return errorCount;
        }
        public IAutoBilling AsReadOnly()
        {
            if (_readOnly) return this;
            AutoBilling copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_card.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_gatewayName = true;
            __has_card = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_gatewayName = false;
            __fld_gatewayName = "";
            __has_card = false;
            __fld_card = global::Freshbooks.Library.Model.CardInfo.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            AutoBilling value = (AutoBilling)base.MemberwiseClone();
            value.__fld_card = (global::Freshbooks.Library.Model.CardInfo)value.__fld_card.Clone();
            return value;
        }
        public AutoBilling Clone()
        {
            return (AutoBilling)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IAutoBilling) MergeFrom((IAutoBilling)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IAutoBilling other)
        {
            if (other.HasGatewayName) GatewayName = other.GatewayName;
            if (other.HasCard) Card = (global::Freshbooks.Library.Model.CardInfo)other.Card.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "card", "gateway_name" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("AutoBilling", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.CardInfo value = __fld_card;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.CardInfo.DefaultInstance) ? new global::Freshbooks.Library.Model.CardInfo() : new global::Freshbooks.Library.Model.CardInfo(__fld_card);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_card = value;
                        __has_card = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 1:
                    {
                        __fld_gatewayName = sbuilder.ToString();
                        __has_gatewayName = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("AutoBilling", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_gatewayName)
            {
                writer.WriteElementString("gateway_name", __fld_gatewayName);
            }
            if (__has_card)
            {
                __fld_card.WriteXml("card", writer);
            }
        }
        #endregion
    }
    #endregion
    #region CardInfo
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICardInfo : global::NClassify.Library.IMessage
    {
        bool HasName { get; }
        string Name { get; }
        bool HasNumber { get; }
        string Number { get; }
        bool HasExpiration { get; }
        global::Freshbooks.Library.Model.CardExpiration Expiration { get; }
    }
    [global::System.Xml.Serialization.XmlType("CardInfo")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CardInfo : ICardInfo, global::NClassify.Library.IBuilder
    {
        private static readonly CardInfo _defaultInstance = new CardInfo(false);
        public static CardInfo DefaultInstance { get { return _defaultInstance; } }
        static CardInfo()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CardInfo(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CardInfo() : this(true)
        {
        }
        public CardInfo(ICardInfo copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Name = 1,
            Number = 2,
            Expiration = 3,
        }
        #endregion
        #region Static Data
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        public static bool IsValidNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Number, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Number));
                return false;
            }
            return true;
        }
        public static bool IsValidExpiration(global::Freshbooks.Library.Model.CardExpiration value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expiration, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Expiration));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Expiration, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_name;
        private string __fld_name;
        private bool __has_number;
        private string __fld_number;
        private bool __has_expiration;
        private global::Freshbooks.Library.Model.CardExpiration __fld_expiration;
        #endregion
        #region Instance Members
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasNumber
        {
            get { return __has_number; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = "";
                __has_number = false;
            }
        }
        public string Number
        {
            get
            {
                return __fld_number;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Number");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = value;
                __has_number = true;
            }
        }
        public bool HasExpiration
        {
            get { return __has_expiration; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expiration = global::Freshbooks.Library.Model.CardExpiration.DefaultInstance;
                __has_expiration = false;
            }
        }
        public global::Freshbooks.Library.Model.CardExpiration Expiration
        {
            get
            {
                return __fld_expiration;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Expiration");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expiration = value;
                __has_expiration = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_name)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Name));
                errorCount++;
            }
            if (!__has_number)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Number, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Number));
                errorCount++;
            }
            if (!__has_expiration)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expiration, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Expiration));
                errorCount++;
            }
            return errorCount;
        }
        public ICardInfo AsReadOnly()
        {
            if (_readOnly) return this;
            CardInfo copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_expiration.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
            __has_number = true;
            __has_expiration = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_name = false;
            __fld_name = "";
            __has_number = false;
            __fld_number = "";
            __has_expiration = false;
            __fld_expiration = global::Freshbooks.Library.Model.CardExpiration.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CardInfo value = (CardInfo)base.MemberwiseClone();
            value.__fld_expiration = (global::Freshbooks.Library.Model.CardExpiration)value.__fld_expiration.Clone();
            return value;
        }
        public CardInfo Clone()
        {
            return (CardInfo)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICardInfo) MergeFrom((ICardInfo)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICardInfo other)
        {
            if (other.HasName) Name = other.Name;
            if (other.HasNumber) Number = other.Number;
            if (other.HasExpiration) Expiration = (global::Freshbooks.Library.Model.CardExpiration)other.Expiration.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "expiration", "name", "number" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CardInfo", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.CardExpiration value = __fld_expiration;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.CardExpiration.DefaultInstance) ? new global::Freshbooks.Library.Model.CardExpiration() : new global::Freshbooks.Library.Model.CardExpiration(__fld_expiration);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_expiration = value;
                        __has_expiration = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 1:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_number = sbuilder.ToString();
                        __has_number = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CardInfo", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
            if (__has_number)
            {
                writer.WriteElementString("number", __fld_number);
            }
            if (__has_expiration)
            {
                __fld_expiration.WriteXml("expiration", writer);
            }
        }
        #endregion
    }
    #endregion
    #region CardExpiration
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICardExpiration : global::NClassify.Library.IMessage
    {
        bool HasMonth { get; }
        int Month { get; }
        bool HasYear { get; }
        int Year { get; }
    }
    [global::System.Xml.Serialization.XmlType("CardExpiration")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CardExpiration : ICardExpiration, global::NClassify.Library.IBuilder
    {
        private static readonly CardExpiration _defaultInstance = new CardExpiration(false);
        public static CardExpiration DefaultInstance { get { return _defaultInstance; } }
        static CardExpiration()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CardExpiration(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CardExpiration() : this(true)
        {
        }
        public CardExpiration(ICardExpiration copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Month = 1,
            Year = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidMonth(int value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Month, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Month, 1));
                return false;
            }
            if (value.CompareTo(12) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Month, global::NClassify.Library.ResourceMessages.MustBeLessThan, TypeFields.Month, 12));
                return false;
            }
            return true;
        }
        public static bool IsValidYear(int value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1900) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Year, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Year, 1900));
                return false;
            }
            if (value.CompareTo(2999) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Year, global::NClassify.Library.ResourceMessages.MustBeLessThan, TypeFields.Year, 2999));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_month;
        private int __fld_month;
        private bool __has_year;
        private int __fld_year;
        #endregion
        #region Instance Members
        public bool HasMonth
        {
            get { return __has_month; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_month = 0;
                __has_month = false;
            }
        }
        public int Month
        {
            get
            {
                return __fld_month;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_month = value;
                __has_month = true;
            }
        }
        public bool HasYear
        {
            get { return __has_year; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_year = 0;
                __has_year = false;
            }
        }
        public int Year
        {
            get
            {
                return __fld_year;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_year = value;
                __has_year = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_month)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Month, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Month));
                errorCount++;
            }
            if (!__has_year)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Year, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Year));
                errorCount++;
            }
            return errorCount;
        }
        public ICardExpiration AsReadOnly()
        {
            if (_readOnly) return this;
            CardExpiration copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_month = false;
            __fld_month = 0;
            __has_year = false;
            __fld_year = 0;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CardExpiration value = (CardExpiration)base.MemberwiseClone();
            return value;
        }
        public CardExpiration Clone()
        {
            return (CardExpiration)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICardExpiration) MergeFrom((ICardExpiration)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICardExpiration other)
        {
            if (other.HasMonth) Month = other.Month;
            if (other.HasYear) Year = other.Year;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "month", "year" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CardExpiration", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_month = global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_month = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_year = global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_year = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CardExpiration", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_month)
            {
                writer.WriteElementString("month", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_month, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_year)
            {
                writer.WriteElementString("year", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_year, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region RecurringLines
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringLines : global::NClassify.Library.IMessage
    {
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
        bool HasLines { get; }
        global::Freshbooks.Library.Model.LineItems Lines { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringLines")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringLines : IRecurringLines, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringLines _defaultInstance = new RecurringLines(false);
        public static RecurringLines DefaultInstance { get { return _defaultInstance; } }
        static RecurringLines()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringLines(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringLines() : this(true)
        {
        }
        public RecurringLines(IRecurringLines copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            RecurringId = 1,
            Lines = 52,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidLines(global::Freshbooks.Library.Model.LineItems value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Lines, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Lines));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Lines, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        private bool __has_lines;
        private global::Freshbooks.Library.Model.LineItems __fld_lines;
        #endregion
        #region Instance Members
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
                __has_recurringId = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public bool HasLines
        {
            get { return __has_lines; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lines = global::Freshbooks.Library.Model.LineItems.DefaultInstance;
                __has_lines = false;
            }
        }
        public global::Freshbooks.Library.Model.LineItems Lines
        {
            get
            {
                return __fld_lines;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Lines");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lines = value;
                __has_lines = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_recurringId && !IsValidRecurringId(__fld_recurringId, onError)) errorCount++;
            if (__has_lines && !IsValidLines(__fld_lines, onError)) errorCount++;
            return errorCount;
        }
        public IRecurringLines AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringLines copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_lines.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_lines = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
            __has_lines = false;
            __fld_lines = global::Freshbooks.Library.Model.LineItems.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringLines value = (RecurringLines)base.MemberwiseClone();
            value.__fld_lines = (global::Freshbooks.Library.Model.LineItems)value.__fld_lines.Clone();
            return value;
        }
        public RecurringLines Clone()
        {
            return (RecurringLines)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringLines) MergeFrom((IRecurringLines)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringLines other)
        {
            if (other.HasRecurringId) RecurringId = other.RecurringId;
            if (other.HasLines) Lines = (global::Freshbooks.Library.Model.LineItems)other.Lines.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "lines", "recurring_id" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringLines", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.LineItems value = __fld_lines;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.LineItems.DefaultInstance) ? new global::Freshbooks.Library.Model.LineItems() : new global::Freshbooks.Library.Model.LineItems(__fld_lines);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_lines = value;
                        __has_lines = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringLines", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_recurringId)
            {
                writer.WriteElementString("recurring_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_recurringId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_lines)
            {
                __fld_lines.WriteXml("lines", writer);
            }
        }
        #endregion
    }
    #endregion
    #region RecurringLineIds
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringLineIds : global::NClassify.Library.IMessage
    {
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId> LineIdList { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringLineIds")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringLineIds : IRecurringLineIds, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringLineIds _defaultInstance = new RecurringLineIds(false);
        public static RecurringLineIds DefaultInstance { get { return _defaultInstance; } }
        static RecurringLineIds()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringLineIds(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringLineIds() : this(true)
        {
        }
        public RecurringLineIds(IRecurringLineIds copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            RecurringId = 1,
            LineIdList = 2,
        }
        #endregion
        #region _LineIdList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _LineIdList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("LineIdList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId> _contents;
            public _LineIdList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId>();
            }
            public _LineIdList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.LineId this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.LineId value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.LineId> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.LineId value) { Modify.Insert(index, value); }
            public bool Remove(global::Freshbooks.Library.Model.LineId item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.LineId item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.LineId item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.LineId[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _LineIdList Clone()
            {
                return _readOnly ? this : new _LineIdList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.LineId> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidLineIdList(global::Freshbooks.Library.Model.LineId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.LineIdList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        private _LineIdList __fld_lineId;
        #endregion
        #region Instance Members
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
                __has_recurringId = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId> LineIdList
        {
            get
            {
                return __fld_lineId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lineId = new _LineIdList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_recurringId && !IsValidRecurringId(__fld_recurringId, onError)) errorCount++;
            foreach (global::Freshbooks.Library.Model.LineId item in __fld_lineId)
            {
                if (!IsValidLineIdList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IRecurringLineIds AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringLineIds copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_lineId.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
            __fld_lineId = new _LineIdList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringLineIds value = (RecurringLineIds)base.MemberwiseClone();
            value.__fld_lineId = value.__fld_lineId.Clone();
            return value;
        }
        public RecurringLineIds Clone()
        {
            return (RecurringLineIds)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringLineIds) MergeFrom((IRecurringLineIds)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringLineIds other)
        {
            if (other.HasRecurringId) RecurringId = other.RecurringId;
            __fld_lineId.AddRange(other.LineIdList);
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "line_id", "recurring_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringLineIds", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_lineId.Add(new global::Freshbooks.Library.Model.LineId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture)));
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringLineIds", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_recurringId)
            {
                writer.WriteElementString("recurring_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_recurringId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::Freshbooks.Library.Model.LineId item in __fld_lineId)
            {
                writer.WriteElementString("line_id", global::NClassify.Library.TypeConverter.Instance.ToString(item.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region RecurringRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringRequest : global::NClassify.Library.IMessage
    {
        bool HasRecurring { get; }
        global::Freshbooks.Library.Model.Recurring Recurring { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringRequest : IRecurringRequest, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringRequest _defaultInstance = new RecurringRequest(false);
        public static RecurringRequest DefaultInstance { get { return _defaultInstance; } }
        static RecurringRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringRequest() : this(true)
        {
        }
        public RecurringRequest(IRecurringRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Recurring = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurring(global::Freshbooks.Library.Model.Recurring value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Recurring, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Recurring));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Recurring, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurring;
        private global::Freshbooks.Library.Model.Recurring __fld_recurring;
        #endregion
        #region Instance Members
        public bool HasRecurring
        {
            get { return __has_recurring; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurring = global::Freshbooks.Library.Model.Recurring.DefaultInstance;
                __has_recurring = false;
            }
        }
        public global::Freshbooks.Library.Model.Recurring Recurring
        {
            get
            {
                return __fld_recurring;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Recurring");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurring = value;
                __has_recurring = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_recurring)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Recurring, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Recurring));
                errorCount++;
            }
            return errorCount;
        }
        public IRecurringRequest AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_recurring.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_recurring = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurring = false;
            __fld_recurring = global::Freshbooks.Library.Model.Recurring.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringRequest value = (RecurringRequest)base.MemberwiseClone();
            value.__fld_recurring = (global::Freshbooks.Library.Model.Recurring)value.__fld_recurring.Clone();
            return value;
        }
        public RecurringRequest Clone()
        {
            return (RecurringRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringRequest) MergeFrom((IRecurringRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringRequest other)
        {
            if (other.HasRecurring) Recurring = (global::Freshbooks.Library.Model.Recurring)other.Recurring.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "recurring" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Recurring value = __fld_recurring;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Recurring.DefaultInstance) ? new global::Freshbooks.Library.Model.Recurring() : new global::Freshbooks.Library.Model.Recurring(__fld_recurring);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_recurring = value;
                        __has_recurring = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_recurring)
            {
                __fld_recurring.WriteXml("recurring", writer);
            }
        }
        #endregion
    }
    #endregion
    #region RecurringResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringResponse : global::NClassify.Library.IMessage
    {
        bool HasRecurring { get; }
        global::Freshbooks.Library.Model.Recurring Recurring { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringResponse : IRecurringResponse, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringResponse _defaultInstance = new RecurringResponse(false);
        public static RecurringResponse DefaultInstance { get { return _defaultInstance; } }
        static RecurringResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringResponse() : this(true)
        {
        }
        public RecurringResponse(IRecurringResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Recurring = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurring(global::Freshbooks.Library.Model.Recurring value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Recurring, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Recurring));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Recurring, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurring;
        private global::Freshbooks.Library.Model.Recurring __fld_recurring;
        #endregion
        #region Instance Members
        public bool HasRecurring
        {
            get { return __has_recurring; }
        }
        public global::Freshbooks.Library.Model.Recurring Recurring
        {
            get
            {
                return __fld_recurring;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Recurring");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurring = value;
                __has_recurring = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_recurring)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Recurring, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Recurring));
                errorCount++;
            }
            return errorCount;
        }
        public IRecurringResponse AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_recurring.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_recurring = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurring = false;
            __fld_recurring = global::Freshbooks.Library.Model.Recurring.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringResponse value = (RecurringResponse)base.MemberwiseClone();
            value.__fld_recurring = (global::Freshbooks.Library.Model.Recurring)value.__fld_recurring.Clone();
            return value;
        }
        public RecurringResponse Clone()
        {
            return (RecurringResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringResponse) MergeFrom((IRecurringResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringResponse other)
        {
            if (other.HasRecurring) Recurring = (global::Freshbooks.Library.Model.Recurring)other.Recurring.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "recurring" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Recurring value = __fld_recurring;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Recurring.DefaultInstance) ? new global::Freshbooks.Library.Model.Recurring() : new global::Freshbooks.Library.Model.Recurring(__fld_recurring);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_recurring = value;
                        __has_recurring = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Recurrings
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurrings : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Recurring> RecurringList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Recurrings")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Recurrings : global::Freshbooks.Library.Model.PaginatedResponse, IRecurrings, global::NClassify.Library.IBuilder
    {
        private static readonly Recurrings _defaultInstance = new Recurrings(false);
        public static new Recurrings DefaultInstance { get { return _defaultInstance; } }
        static Recurrings()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Recurrings(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Recurrings() : this(true)
        {
        }
        public Recurrings(IRecurrings copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            RecurringList = 10,
        }
        #endregion
        #region _RecurringList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _RecurringList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Recurring>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("RecurringList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Recurring> _contents;
            public _RecurringList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Recurring>();
            }
            public _RecurringList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Recurring> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Recurring>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Recurring item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Recurring)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Recurring> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Recurring this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Recurring value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Recurring> value)
            {
                foreach (global::Freshbooks.Library.Model.Recurring item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Recurring value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Recurring item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Recurring item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Recurring item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Recurring[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _RecurringList Clone()
            {
                return _readOnly ? this : new _RecurringList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Recurring> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurringList(global::Freshbooks.Library.Model.Recurring value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.RecurringList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _RecurringList __fld_recurring;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Recurring> RecurringList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Recurring>(__fld_recurring);
                return __fld_recurring;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurring = new _RecurringList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Recurring item in __fld_recurring)
            {
                if (!IsValidRecurringList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_recurring.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_recurring = new _RecurringList();
        }
        protected override object MemberwiseClone()
        {
            Recurrings value = (Recurrings)base.MemberwiseClone();
            value.__fld_recurring = value.__fld_recurring.Clone();
            return value;
        }
        public new Recurrings Clone()
        {
            return (Recurrings)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurrings) MergeFrom((IRecurrings)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IRecurrings other)
        {
            foreach (global::Freshbooks.Library.Model.Recurring item in other.RecurringList)
                __fld_recurring.Add((global::Freshbooks.Library.Model.Recurring)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "recurring" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Recurring child = new global::Freshbooks.Library.Model.Recurring();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_recurring.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region RecurringsResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringsResponse : global::NClassify.Library.IMessage
    {
        bool HasRecurrings { get; }
        global::Freshbooks.Library.Model.Recurrings Recurrings { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringsResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringsResponse : IRecurringsResponse, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringsResponse _defaultInstance = new RecurringsResponse(false);
        public static RecurringsResponse DefaultInstance { get { return _defaultInstance; } }
        static RecurringsResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringsResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringsResponse() : this(true)
        {
        }
        public RecurringsResponse(IRecurringsResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Recurrings = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurrings(global::Freshbooks.Library.Model.Recurrings value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Recurrings, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Recurrings));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Recurrings, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurrings;
        private global::Freshbooks.Library.Model.Recurrings __fld_recurrings;
        #endregion
        #region Instance Members
        public bool HasRecurrings
        {
            get { return __has_recurrings; }
        }
        public global::Freshbooks.Library.Model.Recurrings Recurrings
        {
            get
            {
                return __fld_recurrings;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Recurrings");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurrings = value;
                __has_recurrings = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_recurrings)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Recurrings, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Recurrings));
                errorCount++;
            }
            return errorCount;
        }
        public IRecurringsResponse AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringsResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_recurrings.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_recurrings = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurrings = false;
            __fld_recurrings = global::Freshbooks.Library.Model.Recurrings.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringsResponse value = (RecurringsResponse)base.MemberwiseClone();
            value.__fld_recurrings = (global::Freshbooks.Library.Model.Recurrings)value.__fld_recurrings.Clone();
            return value;
        }
        public RecurringsResponse Clone()
        {
            return (RecurringsResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringsResponse) MergeFrom((IRecurringsResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringsResponse other)
        {
            if (other.HasRecurrings) Recurrings = (global::Freshbooks.Library.Model.Recurrings)other.Recurrings.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "recurrings" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringsResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Recurrings value = __fld_recurrings;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Recurrings.DefaultInstance) ? new global::Freshbooks.Library.Model.Recurrings() : new global::Freshbooks.Library.Model.Recurrings(__fld_recurrings);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_recurrings = value;
                        __has_recurrings = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringsResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region RecurringsRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringsRequest : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasAutobill { get; }
        bool Autobill { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasDateFrom { get; }
        global::System.DateTime DateFrom { get; }
        bool HasDateTo { get; }
        global::System.DateTime DateTo { get; }
        bool HasUpdatedFrom { get; }
        global::System.DateTime UpdatedFrom { get; }
        bool HasUpdatedTo { get; }
        global::System.DateTime UpdatedTo { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringsRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringsRequest : global::Freshbooks.Library.Model.PaginatedRequest, IRecurringsRequest, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringsRequest _defaultInstance = new RecurringsRequest(false);
        public static new RecurringsRequest DefaultInstance { get { return _defaultInstance; } }
        static RecurringsRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringsRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringsRequest() : this(true)
        {
        }
        public RecurringsRequest(IRecurringsRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientId = 10,
            Autobill = 11,
            Folder = 12,
            DateFrom = 13,
            DateTo = 14,
            UpdatedFrom = 15,
            UpdatedTo = 16,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_autobill;
        private bool __fld_autobill;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_dateFrom;
        private global::System.DateTime __fld_dateFrom;
        private bool __has_dateTo;
        private global::System.DateTime __fld_dateTo;
        private bool __has_updatedFrom;
        private global::System.DateTime __fld_updatedFrom;
        private bool __has_updatedTo;
        private global::System.DateTime __fld_updatedTo;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasAutobill
        {
            get { return __has_autobill; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobill = false;
                __has_autobill = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Autobill
        {
            get
            {
                return __fld_autobill;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobill = value;
                __has_autobill = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasDateFrom
        {
            get { return __has_dateFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = global::System.DateTime.MinValue;
                __has_dateFrom = false;
            }
        }
        public global::System.DateTime DateFrom
        {
            get
            {
                return __fld_dateFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = value;
                __has_dateFrom = true;
            }
        }
        public bool HasDateTo
        {
            get { return __has_dateTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = global::System.DateTime.MinValue;
                __has_dateTo = false;
            }
        }
        public global::System.DateTime DateTo
        {
            get
            {
                return __fld_dateTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = value;
                __has_dateTo = true;
            }
        }
        public bool HasUpdatedFrom
        {
            get { return __has_updatedFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = global::System.DateTime.MinValue;
                __has_updatedFrom = false;
            }
        }
        public global::System.DateTime UpdatedFrom
        {
            get
            {
                return __fld_updatedFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = value;
                __has_updatedFrom = true;
            }
        }
        public bool HasUpdatedTo
        {
            get { return __has_updatedTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = global::System.DateTime.MinValue;
                __has_updatedTo = false;
            }
        }
        public global::System.DateTime UpdatedTo
        {
            get
            {
                return __fld_updatedTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = value;
                __has_updatedTo = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_autobill = false;
            __fld_autobill = false;
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_dateFrom = false;
            __fld_dateFrom = global::System.DateTime.MinValue;
            __has_dateTo = false;
            __fld_dateTo = global::System.DateTime.MinValue;
            __has_updatedFrom = false;
            __fld_updatedFrom = global::System.DateTime.MinValue;
            __has_updatedTo = false;
            __fld_updatedTo = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            RecurringsRequest value = (RecurringsRequest)base.MemberwiseClone();
            return value;
        }
        public new RecurringsRequest Clone()
        {
            return (RecurringsRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringsRequest) MergeFrom((IRecurringsRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IRecurringsRequest other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasAutobill) Autobill = other.Autobill;
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasDateFrom) DateFrom = other.DateFrom;
            if (other.HasDateTo) DateTo = other.DateTo;
            if (other.HasUpdatedFrom) UpdatedFrom = other.UpdatedFrom;
            if (other.HasUpdatedTo) UpdatedTo = other.UpdatedTo;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "autobill", "client_id", "date_from", "date_to", "folder", "updated_from", "updated_to" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_autobill = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_autobill = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateFrom = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateTo = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedFrom = true;
                        }
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedTo = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_autobill)
            {
                writer.WriteElementString("autobill", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_autobill, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
            if (__has_dateFrom)
            {
                writer.WriteElementString("date_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTo)
            {
                writer.WriteElementString("date_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedFrom)
            {
                writer.WriteElementString("updated_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedTo)
            {
                writer.WriteElementString("updated_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region RecurringEmailRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringEmailRequest : global::NClassify.Library.IMessage
    {
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
        bool HasSubject { get; }
        string Subject { get; }
        bool HasMessage { get; }
        string Message { get; }
    }
    [global::System.Xml.Serialization.XmlType("RecurringEmailRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringEmailRequest : IRecurringEmailRequest, global::NClassify.Library.IBuilder
    {
        private static readonly RecurringEmailRequest _defaultInstance = new RecurringEmailRequest(false);
        public static RecurringEmailRequest DefaultInstance { get { return _defaultInstance; } }
        static RecurringEmailRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected RecurringEmailRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public RecurringEmailRequest() : this(true)
        {
        }
        public RecurringEmailRequest(IRecurringEmailRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            RecurringId = 1,
            Subject = 2,
            Message = 3,
        }
        #endregion
        #region Static Data
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSubject(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Subject, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Subject));
                return false;
            }
            return true;
        }
        public static bool IsValidMessage(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Message, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Message));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        private bool __has_subject;
        private string __fld_subject;
        private bool __has_message;
        private string __fld_message;
        #endregion
        #region Instance Members
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
                __has_recurringId = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public bool HasSubject
        {
            get { return __has_subject; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_subject = "";
                __has_subject = false;
            }
        }
        public string Subject
        {
            get
            {
                return __fld_subject;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Subject");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_subject = value;
                __has_subject = true;
            }
        }
        public bool HasMessage
        {
            get { return __has_message; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_message = "";
                __has_message = false;
            }
        }
        public string Message
        {
            get
            {
                return __fld_message;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Message");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_message = value;
                __has_message = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_recurringId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.RecurringId));
                errorCount++;
            }
            if (!__has_subject)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Subject, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Subject));
                errorCount++;
            }
            if (!__has_message)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Message, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Message));
                errorCount++;
            }
            return errorCount;
        }
        public IRecurringEmailRequest AsReadOnly()
        {
            if (_readOnly) return this;
            RecurringEmailRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_subject = true;
            __has_message = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
            __has_subject = false;
            __fld_subject = "";
            __has_message = false;
            __fld_message = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            RecurringEmailRequest value = (RecurringEmailRequest)base.MemberwiseClone();
            return value;
        }
        public RecurringEmailRequest Clone()
        {
            return (RecurringEmailRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IRecurringEmailRequest) MergeFrom((IRecurringEmailRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IRecurringEmailRequest other)
        {
            if (other.HasRecurringId) RecurringId = other.RecurringId;
            if (other.HasSubject) Subject = other.Subject;
            if (other.HasMessage) Message = other.Message;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "message", "recurring_id", "subject" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("RecurringEmailRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_message = sbuilder.ToString();
                        __has_message = true;
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        __fld_subject = sbuilder.ToString();
                        __has_subject = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("RecurringEmailRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_recurringId)
            {
                writer.WriteElementString("recurring_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_recurringId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_subject)
            {
                writer.WriteElementString("subject", __fld_subject);
            }
            if (__has_message)
            {
                writer.WriteElementString("message", __fld_message);
            }
        }
        #endregion
    }
    #endregion
    #region RecurringService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IRecurringService
    {
        global::Freshbooks.Library.Model.RecurringIdentity Create(global::Freshbooks.Library.Model.RecurringRequest recurringRequest);
        void Update(global::Freshbooks.Library.Model.RecurringRequest recurringRequest);
        global::Freshbooks.Library.Model.RecurringResponse Get(global::Freshbooks.Library.Model.RecurringIdentity recurringIdentity);
        void Delete(global::Freshbooks.Library.Model.RecurringIdentity recurringIdentity);
        global::Freshbooks.Library.Model.RecurringsResponse List(global::Freshbooks.Library.Model.RecurringsRequest recurringsRequest);
        global::Freshbooks.Library.Model.RecurringLineIds LinesAdd(global::Freshbooks.Library.Model.RecurringLines recurringLines);
        void LinesUpdate(global::Freshbooks.Library.Model.RecurringLines recurringLines);
        void LinesDelete(global::Freshbooks.Library.Model.RecurringLineIds recurringLineIds);
    }
    [global::System.Xml.Serialization.XmlType("RecurringService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class RecurringService : IRecurringService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public RecurringService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public RecurringService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.RecurringIdentity Create(global::Freshbooks.Library.Model.RecurringRequest recurringRequest)
        {
            global::Freshbooks.Library.Model.RecurringIdentity response = new global::Freshbooks.Library.Model.RecurringIdentity();
            Invoke("create", recurringRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.RecurringRequest recurringRequest)
        {
            Invoke("update", recurringRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.RecurringResponse Get(global::Freshbooks.Library.Model.RecurringIdentity recurringIdentity)
        {
            global::Freshbooks.Library.Model.RecurringResponse response = new global::Freshbooks.Library.Model.RecurringResponse();
            Invoke("get", recurringIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.RecurringIdentity recurringIdentity)
        {
            Invoke("delete", recurringIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.RecurringsResponse List(global::Freshbooks.Library.Model.RecurringsRequest recurringsRequest)
        {
            global::Freshbooks.Library.Model.RecurringsResponse response = new global::Freshbooks.Library.Model.RecurringsResponse();
            Invoke("list", recurringsRequest, response);
            return response;
        }
        public global::Freshbooks.Library.Model.RecurringLineIds LinesAdd(global::Freshbooks.Library.Model.RecurringLines recurringLines)
        {
            global::Freshbooks.Library.Model.RecurringLineIds response = new global::Freshbooks.Library.Model.RecurringLineIds();
            Invoke("lines.add", recurringLines, response);
            return response;
        }
        public void LinesUpdate(global::Freshbooks.Library.Model.RecurringLines recurringLines)
        {
            Invoke("lines.update", recurringLines, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public void LinesDelete(global::Freshbooks.Library.Model.RecurringLineIds recurringLineIds)
        {
            Invoke("lines.delete", recurringLineIds, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IRecurringService _dispatch;
            public Dispatch(IRecurringService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IRecurringService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "lines.add", "lines.delete", "lines.update", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.RecurringRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.RecurringIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.RecurringIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.LinesAdd((global::Freshbooks.Library.Model.RecurringLines)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.LinesDelete((global::Freshbooks.Library.Model.RecurringLineIds)(object)request);
                        break;
                    }
                    case 5:
                    {
                        _dispatch.LinesUpdate((global::Freshbooks.Library.Model.RecurringLines)(object)request);
                        break;
                    }
                    case 6:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.RecurringsRequest)(object)request));
                        break;
                    }
                    case 7:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.RecurringRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IRecurringService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IRecurringService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IRecurringService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "lines.add", "lines.delete", "lines.update", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.RecurringRequest request = new global::Freshbooks.Library.Model.RecurringRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.RecurringIdentity response = new global::Freshbooks.Library.Model.RecurringIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.RecurringIdentity request = new global::Freshbooks.Library.Model.RecurringIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.RecurringIdentity request = new global::Freshbooks.Library.Model.RecurringIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.RecurringResponse response = new global::Freshbooks.Library.Model.RecurringResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.RecurringLines request = new global::Freshbooks.Library.Model.RecurringLines();
                        readInput(request);
                        global::Freshbooks.Library.Model.RecurringLineIds response = new global::Freshbooks.Library.Model.RecurringLineIds();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.RecurringLineIds request = new global::Freshbooks.Library.Model.RecurringLineIds();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 5:
                    {
                        global::Freshbooks.Library.Model.RecurringLines request = new global::Freshbooks.Library.Model.RecurringLines();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 6:
                    {
                        global::Freshbooks.Library.Model.RecurringsRequest request = new global::Freshbooks.Library.Model.RecurringsRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.RecurringsResponse response = new global::Freshbooks.Library.Model.RecurringsResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 7:
                    {
                        global::Freshbooks.Library.Model.RecurringRequest request = new global::Freshbooks.Library.Model.RecurringRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IRecurringService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
