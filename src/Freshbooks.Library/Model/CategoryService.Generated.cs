// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region CategoryIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategoryIdentity : global::NClassify.Library.IMessage
    {
        bool HasCategoryId { get; }
        global::Freshbooks.Library.Model.CategoryId CategoryId { get; }
    }
    [global::System.Xml.Serialization.XmlType("CategoryIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CategoryIdentity : ICategoryIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly CategoryIdentity _defaultInstance = new CategoryIdentity(false);
        public static CategoryIdentity DefaultInstance { get { return _defaultInstance; } }
        static CategoryIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CategoryIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CategoryIdentity() : this(true)
        {
        }
        public CategoryIdentity(ICategoryIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CategoryId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCategoryId(global::Freshbooks.Library.Model.CategoryId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_categoryId;
        private global::Freshbooks.Library.Model.CategoryId __fld_categoryId;
        #endregion
        #region Instance Members
        public bool HasCategoryId
        {
            get { return __has_categoryId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(0UL);
                __has_categoryId = false;
            }
        }
        public global::Freshbooks.Library.Model.CategoryId CategoryId
        {
            get
            {
                return __fld_categoryId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categoryId = value;
                __has_categoryId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_categoryId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.CategoryId));
                errorCount++;
            }
            return errorCount;
        }
        public ICategoryIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            CategoryIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_categoryId = false;
            __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CategoryIdentity value = (CategoryIdentity)base.MemberwiseClone();
            return value;
        }
        public CategoryIdentity Clone()
        {
            return (CategoryIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategoryIdentity) MergeFrom((ICategoryIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICategoryIdentity other)
        {
            if (other.HasCategoryId) CategoryId = other.CategoryId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "category_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CategoryIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_categoryId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CategoryIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_categoryId)
            {
                writer.WriteElementString("category_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_categoryId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Category
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategory : global::NClassify.Library.IMessage
    {
        bool HasCategoryId { get; }
        global::Freshbooks.Library.Model.CategoryId CategoryId { get; }
        bool HasName { get; }
        string Name { get; }
    }
    [global::System.Xml.Serialization.XmlType("Category")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Category : ICategory, global::NClassify.Library.IBuilder
    {
        private static readonly Category _defaultInstance = new Category(false);
        public static Category DefaultInstance { get { return _defaultInstance; } }
        static Category()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Category(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Category() : this(true)
        {
        }
        public Category(ICategory copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CategoryId = 4,
            Name = 5,
        }
        #endregion
        #region Static Data
        public static bool IsValidCategoryId(global::Freshbooks.Library.Model.CategoryId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_categoryId;
        private global::Freshbooks.Library.Model.CategoryId __fld_categoryId;
        private bool __has_name;
        private string __fld_name;
        #endregion
        #region Instance Members
        public bool HasCategoryId
        {
            get { return __has_categoryId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(0UL);
                __has_categoryId = false;
            }
        }
        public global::Freshbooks.Library.Model.CategoryId CategoryId
        {
            get
            {
                return __fld_categoryId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categoryId = value;
                __has_categoryId = true;
            }
        }
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_categoryId && !IsValidCategoryId(__fld_categoryId, onError)) errorCount++;
            if (!__has_name)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Name));
                errorCount++;
            }
            return errorCount;
        }
        public ICategory AsReadOnly()
        {
            if (_readOnly) return this;
            Category copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_categoryId = false;
            __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(0UL);
            __has_name = false;
            __fld_name = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Category value = (Category)base.MemberwiseClone();
            return value;
        }
        public Category Clone()
        {
            return (Category)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategory) MergeFrom((ICategory)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICategory other)
        {
            if (other.HasCategoryId) CategoryId = other.CategoryId;
            if (other.HasName) Name = other.Name;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "category_id", "name" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Category", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_categoryId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Category", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_categoryId)
            {
                writer.WriteElementString("category_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_categoryId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
        }
        #endregion
    }
    #endregion
    #region CategoryRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategoryRequest : global::NClassify.Library.IMessage
    {
        bool HasCategory { get; }
        global::Freshbooks.Library.Model.Category Category { get; }
    }
    [global::System.Xml.Serialization.XmlType("CategoryRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CategoryRequest : ICategoryRequest, global::NClassify.Library.IBuilder
    {
        private static readonly CategoryRequest _defaultInstance = new CategoryRequest(false);
        public static CategoryRequest DefaultInstance { get { return _defaultInstance; } }
        static CategoryRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CategoryRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CategoryRequest() : this(true)
        {
        }
        public CategoryRequest(ICategoryRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Category = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCategory(global::Freshbooks.Library.Model.Category value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Category, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Category));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Category, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_category;
        private global::Freshbooks.Library.Model.Category __fld_category;
        #endregion
        #region Instance Members
        public bool HasCategory
        {
            get { return __has_category; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_category = global::Freshbooks.Library.Model.Category.DefaultInstance;
                __has_category = false;
            }
        }
        public global::Freshbooks.Library.Model.Category Category
        {
            get
            {
                return __fld_category;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Category");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_category = value;
                __has_category = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_category)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Category, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Category));
                errorCount++;
            }
            return errorCount;
        }
        public ICategoryRequest AsReadOnly()
        {
            if (_readOnly) return this;
            CategoryRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_category.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_category = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_category = false;
            __fld_category = global::Freshbooks.Library.Model.Category.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CategoryRequest value = (CategoryRequest)base.MemberwiseClone();
            value.__fld_category = (global::Freshbooks.Library.Model.Category)value.__fld_category.Clone();
            return value;
        }
        public CategoryRequest Clone()
        {
            return (CategoryRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategoryRequest) MergeFrom((ICategoryRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICategoryRequest other)
        {
            if (other.HasCategory) Category = (global::Freshbooks.Library.Model.Category)other.Category.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "category" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CategoryRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Category value = __fld_category;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Category.DefaultInstance) ? new global::Freshbooks.Library.Model.Category() : new global::Freshbooks.Library.Model.Category(__fld_category);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_category = value;
                        __has_category = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CategoryRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_category)
            {
                __fld_category.WriteXml("category", writer);
            }
        }
        #endregion
    }
    #endregion
    #region CategoryResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategoryResponse : global::NClassify.Library.IMessage
    {
        bool HasCategory { get; }
        global::Freshbooks.Library.Model.Category Category { get; }
    }
    [global::System.Xml.Serialization.XmlType("CategoryResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CategoryResponse : ICategoryResponse, global::NClassify.Library.IBuilder
    {
        private static readonly CategoryResponse _defaultInstance = new CategoryResponse(false);
        public static CategoryResponse DefaultInstance { get { return _defaultInstance; } }
        static CategoryResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CategoryResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CategoryResponse() : this(true)
        {
        }
        public CategoryResponse(ICategoryResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Category = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCategory(global::Freshbooks.Library.Model.Category value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Category, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Category));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Category, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_category;
        private global::Freshbooks.Library.Model.Category __fld_category;
        #endregion
        #region Instance Members
        public bool HasCategory
        {
            get { return __has_category; }
        }
        public global::Freshbooks.Library.Model.Category Category
        {
            get
            {
                return __fld_category;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Category");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_category = value;
                __has_category = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_category)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Category, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Category));
                errorCount++;
            }
            return errorCount;
        }
        public ICategoryResponse AsReadOnly()
        {
            if (_readOnly) return this;
            CategoryResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_category.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_category = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_category = false;
            __fld_category = global::Freshbooks.Library.Model.Category.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CategoryResponse value = (CategoryResponse)base.MemberwiseClone();
            value.__fld_category = (global::Freshbooks.Library.Model.Category)value.__fld_category.Clone();
            return value;
        }
        public CategoryResponse Clone()
        {
            return (CategoryResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategoryResponse) MergeFrom((ICategoryResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICategoryResponse other)
        {
            if (other.HasCategory) Category = (global::Freshbooks.Library.Model.Category)other.Category.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "category" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CategoryResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Category value = __fld_category;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Category.DefaultInstance) ? new global::Freshbooks.Library.Model.Category() : new global::Freshbooks.Library.Model.Category(__fld_category);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_category = value;
                        __has_category = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CategoryResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Categories
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategories : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Category> CategoryList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Categories")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Categories : global::Freshbooks.Library.Model.PaginatedResponse, ICategories, global::NClassify.Library.IBuilder
    {
        private static readonly Categories _defaultInstance = new Categories(false);
        public static new Categories DefaultInstance { get { return _defaultInstance; } }
        static Categories()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Categories(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Categories() : this(true)
        {
        }
        public Categories(ICategories copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            CategoryList = 10,
        }
        #endregion
        #region _CategoryList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _CategoryList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Category>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("CategoryList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Category> _contents;
            public _CategoryList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Category>();
            }
            public _CategoryList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Category> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Category>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Category item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Category)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Category> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Category this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Category value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Category> value)
            {
                foreach (global::Freshbooks.Library.Model.Category item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Category value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Category item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Category item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Category item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Category[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _CategoryList Clone()
            {
                return _readOnly ? this : new _CategoryList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Category> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidCategoryList(global::Freshbooks.Library.Model.Category value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.CategoryList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _CategoryList __fld_category;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Category> CategoryList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Category>(__fld_category);
                return __fld_category;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_category = new _CategoryList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Category item in __fld_category)
            {
                if (!IsValidCategoryList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_category.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_category = new _CategoryList();
        }
        protected override object MemberwiseClone()
        {
            Categories value = (Categories)base.MemberwiseClone();
            value.__fld_category = value.__fld_category.Clone();
            return value;
        }
        public new Categories Clone()
        {
            return (Categories)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategories) MergeFrom((ICategories)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ICategories other)
        {
            foreach (global::Freshbooks.Library.Model.Category item in other.CategoryList)
                __fld_category.Add((global::Freshbooks.Library.Model.Category)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "category" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Category child = new global::Freshbooks.Library.Model.Category();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_category.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region CategoriesResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategoriesResponse : global::NClassify.Library.IMessage
    {
        bool HasCategories { get; }
        global::Freshbooks.Library.Model.Categories Categories { get; }
    }
    [global::System.Xml.Serialization.XmlType("CategoriesResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CategoriesResponse : ICategoriesResponse, global::NClassify.Library.IBuilder
    {
        private static readonly CategoriesResponse _defaultInstance = new CategoriesResponse(false);
        public static CategoriesResponse DefaultInstance { get { return _defaultInstance; } }
        static CategoriesResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CategoriesResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CategoriesResponse() : this(true)
        {
        }
        public CategoriesResponse(ICategoriesResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Categories = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCategories(global::Freshbooks.Library.Model.Categories value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Categories, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Categories));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Categories, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_categories;
        private global::Freshbooks.Library.Model.Categories __fld_categories;
        #endregion
        #region Instance Members
        public bool HasCategories
        {
            get { return __has_categories; }
        }
        public global::Freshbooks.Library.Model.Categories Categories
        {
            get
            {
                return __fld_categories;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Categories");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categories = value;
                __has_categories = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_categories)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Categories, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Categories));
                errorCount++;
            }
            return errorCount;
        }
        public ICategoriesResponse AsReadOnly()
        {
            if (_readOnly) return this;
            CategoriesResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_categories.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_categories = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_categories = false;
            __fld_categories = global::Freshbooks.Library.Model.Categories.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CategoriesResponse value = (CategoriesResponse)base.MemberwiseClone();
            value.__fld_categories = (global::Freshbooks.Library.Model.Categories)value.__fld_categories.Clone();
            return value;
        }
        public CategoriesResponse Clone()
        {
            return (CategoriesResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategoriesResponse) MergeFrom((ICategoriesResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICategoriesResponse other)
        {
            if (other.HasCategories) Categories = (global::Freshbooks.Library.Model.Categories)other.Categories.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "categories" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CategoriesResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Categories value = __fld_categories;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Categories.DefaultInstance) ? new global::Freshbooks.Library.Model.Categories() : new global::Freshbooks.Library.Model.Categories(__fld_categories);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_categories = value;
                        __has_categories = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CategoriesResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region CategoriesRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategoriesRequest : global::NClassify.Library.IMessage
    {
    }
    [global::System.Xml.Serialization.XmlType("CategoriesRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CategoriesRequest : global::Freshbooks.Library.Model.PaginatedRequest, ICategoriesRequest, global::NClassify.Library.IBuilder
    {
        private static readonly CategoriesRequest _defaultInstance = new CategoriesRequest(false);
        public static new CategoriesRequest DefaultInstance { get { return _defaultInstance; } }
        static CategoriesRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CategoriesRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public CategoriesRequest() : this(true)
        {
        }
        public CategoriesRequest(ICategoriesRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        #endregion
        #region Instance Members
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
        }
        protected override object MemberwiseClone()
        {
            CategoriesRequest value = (CategoriesRequest)base.MemberwiseClone();
            return value;
        }
        public new CategoriesRequest Clone()
        {
            return (CategoriesRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICategoriesRequest) MergeFrom((ICategoriesRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ICategoriesRequest other)
        {
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region CategoryService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICategoryService
    {
        global::Freshbooks.Library.Model.CategoryIdentity Create(global::Freshbooks.Library.Model.CategoryRequest categoryRequest);
        void Update(global::Freshbooks.Library.Model.CategoryRequest categoryRequest);
        global::Freshbooks.Library.Model.CategoryResponse Get(global::Freshbooks.Library.Model.CategoryIdentity categoryIdentity);
        void Delete(global::Freshbooks.Library.Model.CategoryIdentity categoryIdentity);
        global::Freshbooks.Library.Model.CategoriesResponse List(global::Freshbooks.Library.Model.CategoriesRequest categoriesRequest);
    }
    [global::System.Xml.Serialization.XmlType("CategoryService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CategoryService : ICategoryService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public CategoryService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public CategoryService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.CategoryIdentity Create(global::Freshbooks.Library.Model.CategoryRequest categoryRequest)
        {
            global::Freshbooks.Library.Model.CategoryIdentity response = new global::Freshbooks.Library.Model.CategoryIdentity();
            Invoke("create", categoryRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.CategoryRequest categoryRequest)
        {
            Invoke("update", categoryRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.CategoryResponse Get(global::Freshbooks.Library.Model.CategoryIdentity categoryIdentity)
        {
            global::Freshbooks.Library.Model.CategoryResponse response = new global::Freshbooks.Library.Model.CategoryResponse();
            Invoke("get", categoryIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.CategoryIdentity categoryIdentity)
        {
            Invoke("delete", categoryIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.CategoriesResponse List(global::Freshbooks.Library.Model.CategoriesRequest categoriesRequest)
        {
            global::Freshbooks.Library.Model.CategoriesResponse response = new global::Freshbooks.Library.Model.CategoriesResponse();
            Invoke("list", categoriesRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly ICategoryService _dispatch;
            public Dispatch(ICategoryService dispatch)
                : this(dispatch, true) { }
            public Dispatch(ICategoryService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.CategoryRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.CategoryIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.CategoryIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.CategoriesRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.CategoryRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ICategoryService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(ICategoryService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(ICategoryService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.CategoryRequest request = new global::Freshbooks.Library.Model.CategoryRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.CategoryIdentity response = new global::Freshbooks.Library.Model.CategoryIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.CategoryIdentity request = new global::Freshbooks.Library.Model.CategoryIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.CategoryIdentity request = new global::Freshbooks.Library.Model.CategoryIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.CategoryResponse response = new global::Freshbooks.Library.Model.CategoryResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.CategoriesRequest request = new global::Freshbooks.Library.Model.CategoriesRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.CategoriesResponse response = new global::Freshbooks.Library.Model.CategoriesResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.CategoryRequest request = new global::Freshbooks.Library.Model.CategoryRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ICategoryService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
