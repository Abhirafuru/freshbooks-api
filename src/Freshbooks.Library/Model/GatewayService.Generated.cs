// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region Gateway
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IGateway : global::NClassify.Library.IMessage
    {
        bool HasName { get; }
        string Name { get; }
        bool HasAutobillCapable { get; }
        bool AutobillCapable { get; }
    }
    [global::System.Xml.Serialization.XmlType("Gateway")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Gateway : IGateway, global::NClassify.Library.IBuilder
    {
        private static readonly Gateway _defaultInstance = new Gateway(false);
        public static Gateway DefaultInstance { get { return _defaultInstance; } }
        static Gateway()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Gateway(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Gateway() : this(true)
        {
        }
        public Gateway(IGateway copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Name = 1,
            AutobillCapable = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_name;
        private string __fld_name;
        private bool __has_autobillCapable;
        private bool __fld_autobillCapable;
        #endregion
        #region Instance Members
        public bool HasName
        {
            get { return __has_name; }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasAutobillCapable
        {
            get { return __has_autobillCapable; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool AutobillCapable
        {
            get
            {
                return __fld_autobillCapable;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobillCapable = value;
                __has_autobillCapable = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_name && !IsValidName(__fld_name, onError)) errorCount++;
            return errorCount;
        }
        public IGateway AsReadOnly()
        {
            if (_readOnly) return this;
            Gateway copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_name = false;
            __fld_name = "";
            __has_autobillCapable = false;
            __fld_autobillCapable = false;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Gateway value = (Gateway)base.MemberwiseClone();
            return value;
        }
        public Gateway Clone()
        {
            return (Gateway)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IGateway) MergeFrom((IGateway)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IGateway other)
        {
            if (other.HasName) Name = other.Name;
            if (other.HasAutobillCapable) AutobillCapable = other.AutobillCapable;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "autobill_capable", "name" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Gateway", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_autobillCapable = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_autobillCapable = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Gateway", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Gateways
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IGateways : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Gateway> GatewayList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Gateways")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Gateways : global::Freshbooks.Library.Model.PaginatedResponse, IGateways, global::NClassify.Library.IBuilder
    {
        private static readonly Gateways _defaultInstance = new Gateways(false);
        public static new Gateways DefaultInstance { get { return _defaultInstance; } }
        static Gateways()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Gateways(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Gateways() : this(true)
        {
        }
        public Gateways(IGateways copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            GatewayList = 10,
        }
        #endregion
        #region _GatewayList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _GatewayList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Gateway>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("GatewayList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Gateway> _contents;
            public _GatewayList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Gateway>();
            }
            public _GatewayList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Gateway> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Gateway>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Gateway item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Gateway)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Gateway> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Gateway this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Gateway value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Gateway> value)
            {
                foreach (global::Freshbooks.Library.Model.Gateway item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Gateway value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Gateway item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Gateway item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Gateway item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Gateway[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _GatewayList Clone()
            {
                return _readOnly ? this : new _GatewayList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Gateway> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidGatewayList(global::Freshbooks.Library.Model.Gateway value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.GatewayList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _GatewayList __fld_gateway;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Gateway> GatewayList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Gateway>(__fld_gateway);
                return __fld_gateway;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_gateway = new _GatewayList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Gateway item in __fld_gateway)
            {
                if (!IsValidGatewayList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_gateway.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_gateway = new _GatewayList();
        }
        protected override object MemberwiseClone()
        {
            Gateways value = (Gateways)base.MemberwiseClone();
            value.__fld_gateway = value.__fld_gateway.Clone();
            return value;
        }
        public new Gateways Clone()
        {
            return (Gateways)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IGateways) MergeFrom((IGateways)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IGateways other)
        {
            foreach (global::Freshbooks.Library.Model.Gateway item in other.GatewayList)
                __fld_gateway.Add((global::Freshbooks.Library.Model.Gateway)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "gateway" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Gateway child = new global::Freshbooks.Library.Model.Gateway();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_gateway.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region GatewaysResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IGatewaysResponse : global::NClassify.Library.IMessage
    {
        bool HasGateways { get; }
        global::Freshbooks.Library.Model.Gateways Gateways { get; }
    }
    [global::System.Xml.Serialization.XmlType("GatewaysResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class GatewaysResponse : IGatewaysResponse, global::NClassify.Library.IBuilder
    {
        private static readonly GatewaysResponse _defaultInstance = new GatewaysResponse(false);
        public static GatewaysResponse DefaultInstance { get { return _defaultInstance; } }
        static GatewaysResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected GatewaysResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public GatewaysResponse() : this(true)
        {
        }
        public GatewaysResponse(IGatewaysResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Gateways = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidGateways(global::Freshbooks.Library.Model.Gateways value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Gateways, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Gateways));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Gateways, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_gateways;
        private global::Freshbooks.Library.Model.Gateways __fld_gateways;
        #endregion
        #region Instance Members
        public bool HasGateways
        {
            get { return __has_gateways; }
        }
        public global::Freshbooks.Library.Model.Gateways Gateways
        {
            get
            {
                return __fld_gateways;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Gateways");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_gateways = value;
                __has_gateways = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_gateways)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Gateways, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Gateways));
                errorCount++;
            }
            return errorCount;
        }
        public IGatewaysResponse AsReadOnly()
        {
            if (_readOnly) return this;
            GatewaysResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_gateways.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_gateways = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_gateways = false;
            __fld_gateways = global::Freshbooks.Library.Model.Gateways.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            GatewaysResponse value = (GatewaysResponse)base.MemberwiseClone();
            value.__fld_gateways = (global::Freshbooks.Library.Model.Gateways)value.__fld_gateways.Clone();
            return value;
        }
        public GatewaysResponse Clone()
        {
            return (GatewaysResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IGatewaysResponse) MergeFrom((IGatewaysResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IGatewaysResponse other)
        {
            if (other.HasGateways) Gateways = (global::Freshbooks.Library.Model.Gateways)other.Gateways.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "gateways" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("GatewaysResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Gateways value = __fld_gateways;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Gateways.DefaultInstance) ? new global::Freshbooks.Library.Model.Gateways() : new global::Freshbooks.Library.Model.Gateways(__fld_gateways);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_gateways = value;
                        __has_gateways = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("GatewaysResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region GatewaysRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IGatewaysRequest : global::NClassify.Library.IMessage
    {
        bool HasAutobillCapable { get; }
        bool AutobillCapable { get; }
    }
    [global::System.Xml.Serialization.XmlType("GatewaysRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class GatewaysRequest : global::Freshbooks.Library.Model.PaginatedRequest, IGatewaysRequest, global::NClassify.Library.IBuilder
    {
        private static readonly GatewaysRequest _defaultInstance = new GatewaysRequest(false);
        public static new GatewaysRequest DefaultInstance { get { return _defaultInstance; } }
        static GatewaysRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected GatewaysRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public GatewaysRequest() : this(true)
        {
        }
        public GatewaysRequest(IGatewaysRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            AutobillCapable = 10,
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        private bool __has_autobillCapable;
        private bool __fld_autobillCapable;
        #endregion
        #region Instance Members
        public bool HasAutobillCapable
        {
            get { return __has_autobillCapable; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobillCapable = false;
                __has_autobillCapable = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool AutobillCapable
        {
            get
            {
                return __fld_autobillCapable;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_autobillCapable = value;
                __has_autobillCapable = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_autobillCapable = false;
            __fld_autobillCapable = false;
        }
        protected override object MemberwiseClone()
        {
            GatewaysRequest value = (GatewaysRequest)base.MemberwiseClone();
            return value;
        }
        public new GatewaysRequest Clone()
        {
            return (GatewaysRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IGatewaysRequest) MergeFrom((IGatewaysRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IGatewaysRequest other)
        {
            if (other.HasAutobillCapable) AutobillCapable = other.AutobillCapable;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "autobill_capable" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_autobillCapable = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_autobillCapable = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_autobillCapable)
            {
                writer.WriteElementString("autobill_capable", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_autobillCapable, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region GatewayService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IGatewayService
    {
        global::Freshbooks.Library.Model.GatewaysResponse List(global::Freshbooks.Library.Model.GatewaysRequest gatewaysRequest);
    }
    [global::System.Xml.Serialization.XmlType("GatewayService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class GatewayService : IGatewayService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public GatewayService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public GatewayService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.GatewaysResponse List(global::Freshbooks.Library.Model.GatewaysRequest gatewaysRequest)
        {
            global::Freshbooks.Library.Model.GatewaysResponse response = new global::Freshbooks.Library.Model.GatewaysResponse();
            Invoke("list", gatewaysRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IGatewayService _dispatch;
            public Dispatch(IGatewayService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IGatewayService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "list" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.GatewaysRequest)(object)request));
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IGatewayService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IGatewayService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IGatewayService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "list" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.GatewaysRequest request = new global::Freshbooks.Library.Model.GatewaysRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.GatewaysResponse response = new global::Freshbooks.Library.Model.GatewaysResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IGatewayService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
