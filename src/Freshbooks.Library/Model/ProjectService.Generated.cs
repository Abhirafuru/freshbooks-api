// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region ProjectIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectIdentity : global::NClassify.Library.IMessage
    {
        bool HasProjectId { get; }
        global::Freshbooks.Library.Model.ProjectId ProjectId { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectIdentity : IProjectIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectIdentity _defaultInstance = new ProjectIdentity(false);
        public static ProjectIdentity DefaultInstance { get { return _defaultInstance; } }
        static ProjectIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectIdentity() : this(true)
        {
        }
        public ProjectIdentity(IProjectIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ProjectId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidProjectId(global::Freshbooks.Library.Model.ProjectId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_projectId;
        private global::Freshbooks.Library.Model.ProjectId __fld_projectId;
        #endregion
        #region Instance Members
        public bool HasProjectId
        {
            get { return __has_projectId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
                __has_projectId = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectId ProjectId
        {
            get
            {
                return __fld_projectId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = value;
                __has_projectId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_projectId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ProjectId));
                errorCount++;
            }
            return errorCount;
        }
        public IProjectIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_projectId = false;
            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectIdentity value = (ProjectIdentity)base.MemberwiseClone();
            return value;
        }
        public ProjectIdentity Clone()
        {
            return (ProjectIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectIdentity) MergeFrom((IProjectIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectIdentity other)
        {
            if (other.HasProjectId) ProjectId = other.ProjectId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "project_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_projectId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_projectId)
            {
                writer.WriteElementString("project_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_projectId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Project
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProject : global::NClassify.Library.IMessage
    {
        bool HasProjectId { get; }
        global::Freshbooks.Library.Model.ProjectId ProjectId { get; }
        bool HasName { get; }
        string Name { get; }
        bool HasBillMethod { get; }
        string BillMethod { get; }
        bool HasDescription { get; }
        string Description { get; }
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasRate { get; }
        double Rate { get; }
        bool HasHourBudget { get; }
        double HourBudget { get; }
        bool HasTasks { get; }
        global::Freshbooks.Library.Model.ProjectTasks Tasks { get; }
        bool HasStaff { get; }
        global::Freshbooks.Library.Model.ProjectStaffList Staff { get; }
    }
    [global::System.Xml.Serialization.XmlType("Project")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Project : IProject, global::NClassify.Library.IBuilder
    {
        private static readonly Project _defaultInstance = new Project(false);
        public static Project DefaultInstance { get { return _defaultInstance; } }
        static Project()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Project(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Project() : this(true)
        {
        }
        public Project(IProject copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ProjectId = 1,
            Name = 2,
            BillMethod = 3,
            Description = 4,
            ClientId = 10,
            Rate = 11,
            HourBudget = 12,
            Tasks = 20,
            Staff = 21,
        }
        #endregion
        #region Static Data
        public static bool IsValidProjectId(global::Freshbooks.Library.Model.ProjectId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        private static readonly string[] __in_billMethod = new string[] {"task-rate", "flat-rate", "project-rate", "staff-rate"};
        public static bool IsValidBillMethod(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.BillMethod, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.BillMethod));
                return false;
            }
            if (global::System.Array.BinarySearch(__in_billMethod, value) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.BillMethod, global::NClassify.Library.ResourceMessages.MustBeOneOf, TypeFields.BillMethod, string.Join(", ", __in_billMethod)));
                return false;
            }
            return true;
        }
        public static bool IsValidDescription(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Description, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Description));
                return false;
            }
            return true;
        }
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidTasks(global::Freshbooks.Library.Model.ProjectTasks value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tasks, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tasks));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Tasks, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStaff(global::Freshbooks.Library.Model.ProjectStaffList value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Staff, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Staff));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Staff, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_projectId;
        private global::Freshbooks.Library.Model.ProjectId __fld_projectId;
        private bool __has_name;
        private string __fld_name;
        private bool __has_billMethod;
        private string __fld_billMethod;
        private bool __has_description;
        private string __fld_description;
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_rate;
        private double __fld_rate;
        private bool __has_hourBudget;
        private double __fld_hourBudget;
        private bool __has_tasks;
        private global::Freshbooks.Library.Model.ProjectTasks __fld_tasks;
        private bool __has_staff;
        private global::Freshbooks.Library.Model.ProjectStaffList __fld_staff;
        #endregion
        #region Instance Members
        public bool HasProjectId
        {
            get { return __has_projectId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
                __has_projectId = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectId ProjectId
        {
            get
            {
                return __fld_projectId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = value;
                __has_projectId = true;
            }
        }
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasBillMethod
        {
            get { return __has_billMethod; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_billMethod = "project-rate";
                __has_billMethod = false;
            }
        }
        public string BillMethod
        {
            get
            {
                return __fld_billMethod;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("BillMethod");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_billMethod = value;
                __has_billMethod = true;
            }
        }
        public bool HasDescription
        {
            get { return __has_description; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = "";
                __has_description = false;
            }
        }
        public string Description
        {
            get
            {
                return __fld_description;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Description");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = value;
                __has_description = true;
            }
        }
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasRate
        {
            get { return __has_rate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = 0D;
                __has_rate = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Rate
        {
            get
            {
                return __fld_rate;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = value;
                __has_rate = true;
            }
        }
        public bool HasHourBudget
        {
            get { return __has_hourBudget; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_hourBudget = 0D;
                __has_hourBudget = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double HourBudget
        {
            get
            {
                return __fld_hourBudget;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_hourBudget = value;
                __has_hourBudget = true;
            }
        }
        public bool HasTasks
        {
            get { return __has_tasks; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tasks = global::Freshbooks.Library.Model.ProjectTasks.DefaultInstance;
                __has_tasks = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectTasks Tasks
        {
            get
            {
                return __fld_tasks;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tasks");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tasks = value;
                __has_tasks = true;
            }
        }
        public bool HasStaff
        {
            get { return __has_staff; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staff = global::Freshbooks.Library.Model.ProjectStaffList.DefaultInstance;
                __has_staff = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectStaffList Staff
        {
            get
            {
                return __fld_staff;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Staff");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staff = value;
                __has_staff = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_projectId && !IsValidProjectId(__fld_projectId, onError)) errorCount++;
            if (!__has_name)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Name));
                errorCount++;
            }
            if (!__has_billMethod)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.BillMethod, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.BillMethod));
                errorCount++;
            }
            if (__has_description && !IsValidDescription(__fld_description, onError)) errorCount++;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_tasks && !IsValidTasks(__fld_tasks, onError)) errorCount++;
            if (__has_staff && !IsValidStaff(__fld_staff, onError)) errorCount++;
            return errorCount;
        }
        public IProject AsReadOnly()
        {
            if (_readOnly) return this;
            Project copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_tasks.MakeReadOnly();
            __fld_staff.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
            __has_billMethod = true;
            __has_description = true;
            __has_tasks = true;
            __has_staff = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_projectId = false;
            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
            __has_name = false;
            __fld_name = "";
            __has_billMethod = false;
            __fld_billMethod = "";
            __has_description = false;
            __fld_description = "";
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_rate = false;
            __fld_rate = 0D;
            __has_hourBudget = false;
            __fld_hourBudget = 0D;
            __has_tasks = false;
            __fld_tasks = global::Freshbooks.Library.Model.ProjectTasks.DefaultInstance;
            __has_staff = false;
            __fld_staff = global::Freshbooks.Library.Model.ProjectStaffList.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Project value = (Project)base.MemberwiseClone();
            value.__fld_tasks = (global::Freshbooks.Library.Model.ProjectTasks)value.__fld_tasks.Clone();
            value.__fld_staff = (global::Freshbooks.Library.Model.ProjectStaffList)value.__fld_staff.Clone();
            return value;
        }
        public Project Clone()
        {
            return (Project)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProject) MergeFrom((IProject)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProject other)
        {
            if (other.HasProjectId) ProjectId = other.ProjectId;
            if (other.HasName) Name = other.Name;
            if (other.HasBillMethod) BillMethod = other.BillMethod;
            if (other.HasDescription) Description = other.Description;
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasRate) Rate = other.Rate;
            if (other.HasHourBudget) HourBudget = other.HourBudget;
            if (other.HasTasks) Tasks = (global::Freshbooks.Library.Model.ProjectTasks)other.Tasks.Clone();
            if (other.HasStaff) Staff = (global::Freshbooks.Library.Model.ProjectStaffList)other.Staff.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "bill_method", "client_id", "description", "hour_budget", "name", "project_id", "rate", "staff", "tasks" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, false, false, false, false, false, false, true, true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Project", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 7:
                    {
                        global::Freshbooks.Library.Model.ProjectStaffList value = __fld_staff;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.ProjectStaffList.DefaultInstance) ? new global::Freshbooks.Library.Model.ProjectStaffList() : new global::Freshbooks.Library.Model.ProjectStaffList(__fld_staff);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_staff = value;
                        __has_staff = true;
                        break;
                    }
                    case 8:
                    {
                        global::Freshbooks.Library.Model.ProjectTasks value = __fld_tasks;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.ProjectTasks.DefaultInstance) ? new global::Freshbooks.Library.Model.ProjectTasks() : new global::Freshbooks.Library.Model.ProjectTasks(__fld_tasks);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_tasks = value;
                        __has_tasks = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_billMethod = sbuilder.ToString();
                        __has_billMethod = true;
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        __fld_description = sbuilder.ToString();
                        __has_description = true;
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_hourBudget = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_hourBudget = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_projectId = true;
                        }
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_rate = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_rate = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Project", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_projectId)
            {
                writer.WriteElementString("project_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_projectId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
            if (__has_billMethod)
            {
                writer.WriteElementString("bill_method", __fld_billMethod);
            }
            if (__has_description)
            {
                writer.WriteElementString("description", __fld_description);
            }
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_rate)
            {
                writer.WriteElementString("rate", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_rate, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_hourBudget)
            {
                writer.WriteElementString("hour_budget", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_hourBudget, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_tasks)
            {
                __fld_tasks.WriteXml("tasks", writer);
            }
            if (__has_staff)
            {
                __fld_staff.WriteXml("staff", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ProjectTask
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectTask : global::NClassify.Library.IMessage
    {
        bool HasTaskId { get; }
        global::Freshbooks.Library.Model.TaskId TaskId { get; }
        bool HasRate { get; }
        double Rate { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectTask")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectTask : IProjectTask, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectTask _defaultInstance = new ProjectTask(false);
        public static ProjectTask DefaultInstance { get { return _defaultInstance; } }
        static ProjectTask()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectTask(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectTask() : this(true)
        {
        }
        public ProjectTask(IProjectTask copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TaskId = 1,
            Rate = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidTaskId(global::Freshbooks.Library.Model.TaskId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_taskId;
        private global::Freshbooks.Library.Model.TaskId __fld_taskId;
        private bool __has_rate;
        private double __fld_rate;
        #endregion
        #region Instance Members
        public bool HasTaskId
        {
            get { return __has_taskId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
                __has_taskId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaskId TaskId
        {
            get
            {
                return __fld_taskId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = value;
                __has_taskId = true;
            }
        }
        public bool HasRate
        {
            get { return __has_rate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = 0D;
                __has_rate = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Rate
        {
            get
            {
                return __fld_rate;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = value;
                __has_rate = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_taskId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TaskId));
                errorCount++;
            }
            return errorCount;
        }
        public IProjectTask AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectTask copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_taskId = false;
            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
            __has_rate = false;
            __fld_rate = 0D;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectTask value = (ProjectTask)base.MemberwiseClone();
            return value;
        }
        public ProjectTask Clone()
        {
            return (ProjectTask)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectTask) MergeFrom((IProjectTask)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectTask other)
        {
            if (other.HasTaskId) TaskId = other.TaskId;
            if (other.HasRate) Rate = other.Rate;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "rate", "task_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectTask", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_rate = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_rate = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taskId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectTask", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_taskId)
            {
                writer.WriteElementString("task_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taskId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_rate)
            {
                writer.WriteElementString("rate", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_rate, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region ProjectTasks
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectTasks : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectTask> TaskList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectTasks")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectTasks : IProjectTasks, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectTasks _defaultInstance = new ProjectTasks(false);
        public static ProjectTasks DefaultInstance { get { return _defaultInstance; } }
        static ProjectTasks()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectTasks(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectTasks() : this(true)
        {
        }
        public ProjectTasks(IProjectTasks copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TaskList = 1,
        }
        #endregion
        #region _TaskList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _TaskList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectTask>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("TaskList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectTask> _contents;
            public _TaskList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectTask>();
            }
            public _TaskList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectTask> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectTask>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.ProjectTask item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.ProjectTask)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectTask> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.ProjectTask this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.ProjectTask value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.ProjectTask> value)
            {
                foreach (global::Freshbooks.Library.Model.ProjectTask item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.ProjectTask value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.ProjectTask item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.ProjectTask item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.ProjectTask item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.ProjectTask[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _TaskList Clone()
            {
                return _readOnly ? this : new _TaskList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.ProjectTask> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidTaskList(global::Freshbooks.Library.Model.ProjectTask value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaskList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TaskList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _TaskList __fld_task;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectTask> TaskList
        {
            get
            {
                return __fld_task;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_task = new _TaskList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.ProjectTask item in __fld_task)
            {
                if (!IsValidTaskList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IProjectTasks AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectTasks copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_task.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_task = new _TaskList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectTasks value = (ProjectTasks)base.MemberwiseClone();
            value.__fld_task = value.__fld_task.Clone();
            return value;
        }
        public ProjectTasks Clone()
        {
            return (ProjectTasks)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectTasks) MergeFrom((IProjectTasks)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectTasks other)
        {
            foreach (global::Freshbooks.Library.Model.ProjectTask item in other.TaskList)
                __fld_task.Add((global::Freshbooks.Library.Model.ProjectTask)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "task" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectTasks", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ProjectTask child = new global::Freshbooks.Library.Model.ProjectTask();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_task.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectTasks", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (global::Freshbooks.Library.Model.ProjectTask item in __fld_task)
            {
                item.WriteXml("task", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ProjectStaff
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectStaff : global::NClassify.Library.IMessage
    {
        bool HasStaffId { get; }
        global::Freshbooks.Library.Model.StaffId StaffId { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectStaff")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectStaff : IProjectStaff, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectStaff _defaultInstance = new ProjectStaff(false);
        public static ProjectStaff DefaultInstance { get { return _defaultInstance; } }
        static ProjectStaff()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectStaff(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectStaff() : this(true)
        {
        }
        public ProjectStaff(IProjectStaff copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            StaffId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidStaffId(global::Freshbooks.Library.Model.StaffId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_staffId;
        private global::Freshbooks.Library.Model.StaffId __fld_staffId;
        #endregion
        #region Instance Members
        public bool HasStaffId
        {
            get { return __has_staffId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
                __has_staffId = false;
            }
        }
        public global::Freshbooks.Library.Model.StaffId StaffId
        {
            get
            {
                return __fld_staffId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = value;
                __has_staffId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_staffId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.StaffId));
                errorCount++;
            }
            return errorCount;
        }
        public IProjectStaff AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectStaff copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_staffId = false;
            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectStaff value = (ProjectStaff)base.MemberwiseClone();
            return value;
        }
        public ProjectStaff Clone()
        {
            return (ProjectStaff)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectStaff) MergeFrom((IProjectStaff)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectStaff other)
        {
            if (other.HasStaffId) StaffId = other.StaffId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "staff_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectStaff", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_staffId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectStaff", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_staffId)
            {
                writer.WriteElementString("staff_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_staffId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region ProjectStaffList
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectStaffList : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectStaff> StaffList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectStaffList")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectStaffList : IProjectStaffList, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectStaffList _defaultInstance = new ProjectStaffList(false);
        public static ProjectStaffList DefaultInstance { get { return _defaultInstance; } }
        static ProjectStaffList()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectStaffList(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectStaffList() : this(true)
        {
        }
        public ProjectStaffList(IProjectStaffList copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            StaffList = 1,
        }
        #endregion
        #region _StaffList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _StaffList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectStaff>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("StaffList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectStaff> _contents;
            public _StaffList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectStaff>();
            }
            public _StaffList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectStaff> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectStaff>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.ProjectStaff item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.ProjectStaff)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ProjectStaff> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.ProjectStaff this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.ProjectStaff value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.ProjectStaff> value)
            {
                foreach (global::Freshbooks.Library.Model.ProjectStaff item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.ProjectStaff value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.ProjectStaff item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.ProjectStaff item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.ProjectStaff item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.ProjectStaff[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _StaffList Clone()
            {
                return _readOnly ? this : new _StaffList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.ProjectStaff> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidStaffList(global::Freshbooks.Library.Model.ProjectStaff value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StaffList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.StaffList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _StaffList __fld_staff;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ProjectStaff> StaffList
        {
            get
            {
                return __fld_staff;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staff = new _StaffList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.ProjectStaff item in __fld_staff)
            {
                if (!IsValidStaffList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IProjectStaffList AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectStaffList copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_staff.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_staff = new _StaffList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectStaffList value = (ProjectStaffList)base.MemberwiseClone();
            value.__fld_staff = value.__fld_staff.Clone();
            return value;
        }
        public ProjectStaffList Clone()
        {
            return (ProjectStaffList)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectStaffList) MergeFrom((IProjectStaffList)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectStaffList other)
        {
            foreach (global::Freshbooks.Library.Model.ProjectStaff item in other.StaffList)
                __fld_staff.Add((global::Freshbooks.Library.Model.ProjectStaff)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "staff" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectStaffList", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ProjectStaff child = new global::Freshbooks.Library.Model.ProjectStaff();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_staff.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectStaffList", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (global::Freshbooks.Library.Model.ProjectStaff item in __fld_staff)
            {
                item.WriteXml("staff", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ProjectRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectRequest : global::NClassify.Library.IMessage
    {
        bool HasProject { get; }
        global::Freshbooks.Library.Model.Project Project { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectRequest : IProjectRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectRequest _defaultInstance = new ProjectRequest(false);
        public static ProjectRequest DefaultInstance { get { return _defaultInstance; } }
        static ProjectRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectRequest() : this(true)
        {
        }
        public ProjectRequest(IProjectRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Project = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidProject(global::Freshbooks.Library.Model.Project value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Project, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Project));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Project, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_project;
        private global::Freshbooks.Library.Model.Project __fld_project;
        #endregion
        #region Instance Members
        public bool HasProject
        {
            get { return __has_project; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_project = global::Freshbooks.Library.Model.Project.DefaultInstance;
                __has_project = false;
            }
        }
        public global::Freshbooks.Library.Model.Project Project
        {
            get
            {
                return __fld_project;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Project");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_project = value;
                __has_project = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_project)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Project, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Project));
                errorCount++;
            }
            return errorCount;
        }
        public IProjectRequest AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_project.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_project = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_project = false;
            __fld_project = global::Freshbooks.Library.Model.Project.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectRequest value = (ProjectRequest)base.MemberwiseClone();
            value.__fld_project = (global::Freshbooks.Library.Model.Project)value.__fld_project.Clone();
            return value;
        }
        public ProjectRequest Clone()
        {
            return (ProjectRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectRequest) MergeFrom((IProjectRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectRequest other)
        {
            if (other.HasProject) Project = (global::Freshbooks.Library.Model.Project)other.Project.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "project" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Project value = __fld_project;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Project.DefaultInstance) ? new global::Freshbooks.Library.Model.Project() : new global::Freshbooks.Library.Model.Project(__fld_project);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_project = value;
                        __has_project = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_project)
            {
                __fld_project.WriteXml("project", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ProjectResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectResponse : global::NClassify.Library.IMessage
    {
        bool HasProject { get; }
        global::Freshbooks.Library.Model.Project Project { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectResponse : IProjectResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectResponse _defaultInstance = new ProjectResponse(false);
        public static ProjectResponse DefaultInstance { get { return _defaultInstance; } }
        static ProjectResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectResponse() : this(true)
        {
        }
        public ProjectResponse(IProjectResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Project = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidProject(global::Freshbooks.Library.Model.Project value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Project, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Project));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Project, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_project;
        private global::Freshbooks.Library.Model.Project __fld_project;
        #endregion
        #region Instance Members
        public bool HasProject
        {
            get { return __has_project; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_project = global::Freshbooks.Library.Model.Project.DefaultInstance;
                __has_project = false;
            }
        }
        public global::Freshbooks.Library.Model.Project Project
        {
            get
            {
                return __fld_project;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Project");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_project = value;
                __has_project = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_project)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Project, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Project));
                errorCount++;
            }
            return errorCount;
        }
        public IProjectResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_project.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_project = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_project = false;
            __fld_project = global::Freshbooks.Library.Model.Project.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectResponse value = (ProjectResponse)base.MemberwiseClone();
            value.__fld_project = (global::Freshbooks.Library.Model.Project)value.__fld_project.Clone();
            return value;
        }
        public ProjectResponse Clone()
        {
            return (ProjectResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectResponse) MergeFrom((IProjectResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectResponse other)
        {
            if (other.HasProject) Project = (global::Freshbooks.Library.Model.Project)other.Project.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "project" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Project value = __fld_project;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Project.DefaultInstance) ? new global::Freshbooks.Library.Model.Project() : new global::Freshbooks.Library.Model.Project(__fld_project);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_project = value;
                        __has_project = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_project)
            {
                __fld_project.WriteXml("project", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Projects
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjects : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Project> ProjectList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Projects")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Projects : global::Freshbooks.Library.Model.PaginatedResponse, IProjects, global::NClassify.Library.IBuilder
    {
        private static readonly Projects _defaultInstance = new Projects(false);
        public static new Projects DefaultInstance { get { return _defaultInstance; } }
        static Projects()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Projects(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Projects() : this(true)
        {
        }
        public Projects(IProjects copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ProjectList = 10,
        }
        #endregion
        #region _ProjectList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ProjectList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Project>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ProjectList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Project> _contents;
            public _ProjectList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Project>();
            }
            public _ProjectList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Project> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Project>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Project item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Project)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Project> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Project this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Project value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Project> value)
            {
                foreach (global::Freshbooks.Library.Model.Project item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Project value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Project item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Project item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Project item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Project[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ProjectList Clone()
            {
                return _readOnly ? this : new _ProjectList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Project> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidProjectList(global::Freshbooks.Library.Model.Project value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ProjectList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _ProjectList __fld_project;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Project> ProjectList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Project>(__fld_project);
                return __fld_project;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_project = new _ProjectList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Project item in __fld_project)
            {
                if (!IsValidProjectList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_project.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_project = new _ProjectList();
        }
        protected override object MemberwiseClone()
        {
            Projects value = (Projects)base.MemberwiseClone();
            value.__fld_project = value.__fld_project.Clone();
            return value;
        }
        public new Projects Clone()
        {
            return (Projects)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjects) MergeFrom((IProjects)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IProjects other)
        {
            foreach (global::Freshbooks.Library.Model.Project item in other.ProjectList)
                __fld_project.Add((global::Freshbooks.Library.Model.Project)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "project" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Project child = new global::Freshbooks.Library.Model.Project();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_project.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region ProjectsResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectsResponse : global::NClassify.Library.IMessage
    {
        bool HasProjects { get; }
        global::Freshbooks.Library.Model.Projects Projects { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectsResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectsResponse : IProjectsResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectsResponse _defaultInstance = new ProjectsResponse(false);
        public static ProjectsResponse DefaultInstance { get { return _defaultInstance; } }
        static ProjectsResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectsResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectsResponse() : this(true)
        {
        }
        public ProjectsResponse(IProjectsResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Projects = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidProjects(global::Freshbooks.Library.Model.Projects value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Projects, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Projects));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Projects, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_projects;
        private global::Freshbooks.Library.Model.Projects __fld_projects;
        #endregion
        #region Instance Members
        public bool HasProjects
        {
            get { return __has_projects; }
        }
        public global::Freshbooks.Library.Model.Projects Projects
        {
            get
            {
                return __fld_projects;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Projects");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projects = value;
                __has_projects = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_projects)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Projects, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Projects));
                errorCount++;
            }
            return errorCount;
        }
        public IProjectsResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ProjectsResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_projects.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_projects = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_projects = false;
            __fld_projects = global::Freshbooks.Library.Model.Projects.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ProjectsResponse value = (ProjectsResponse)base.MemberwiseClone();
            value.__fld_projects = (global::Freshbooks.Library.Model.Projects)value.__fld_projects.Clone();
            return value;
        }
        public ProjectsResponse Clone()
        {
            return (ProjectsResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectsResponse) MergeFrom((IProjectsResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IProjectsResponse other)
        {
            if (other.HasProjects) Projects = (global::Freshbooks.Library.Model.Projects)other.Projects.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "projects" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ProjectsResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Projects value = __fld_projects;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Projects.DefaultInstance) ? new global::Freshbooks.Library.Model.Projects() : new global::Freshbooks.Library.Model.Projects(__fld_projects);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_projects = value;
                        __has_projects = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ProjectsResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ProjectsRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectsRequest : global::NClassify.Library.IMessage
    {
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
    }
    [global::System.Xml.Serialization.XmlType("ProjectsRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectsRequest : global::Freshbooks.Library.Model.PaginatedRequest, IProjectsRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ProjectsRequest _defaultInstance = new ProjectsRequest(false);
        public static new ProjectsRequest DefaultInstance { get { return _defaultInstance; } }
        static ProjectsRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ProjectsRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public ProjectsRequest() : this(true)
        {
        }
        public ProjectsRequest(IProjectsRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            Folder = 10,
        }
        #endregion
        #region Static Data
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        #endregion
        #region Instance Members
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
        }
        protected override object MemberwiseClone()
        {
            ProjectsRequest value = (ProjectsRequest)base.MemberwiseClone();
            return value;
        }
        public new ProjectsRequest Clone()
        {
            return (ProjectsRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IProjectsRequest) MergeFrom((IProjectsRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IProjectsRequest other)
        {
            if (other.HasFolder) Folder = other.Folder;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "folder" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
        }
        #endregion
    }
    #endregion
    #region ProjectService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IProjectService
    {
        global::Freshbooks.Library.Model.ProjectIdentity Create(global::Freshbooks.Library.Model.ProjectRequest projectRequest);
        void Update(global::Freshbooks.Library.Model.ProjectRequest projectRequest);
        global::Freshbooks.Library.Model.ProjectResponse Get(global::Freshbooks.Library.Model.ProjectIdentity projectIdentity);
        void Delete(global::Freshbooks.Library.Model.ProjectIdentity projectIdentity);
        global::Freshbooks.Library.Model.ProjectsResponse List(global::Freshbooks.Library.Model.ProjectsRequest projectsRequest);
    }
    [global::System.Xml.Serialization.XmlType("ProjectService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ProjectService : IProjectService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public ProjectService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public ProjectService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.ProjectIdentity Create(global::Freshbooks.Library.Model.ProjectRequest projectRequest)
        {
            global::Freshbooks.Library.Model.ProjectIdentity response = new global::Freshbooks.Library.Model.ProjectIdentity();
            Invoke("create", projectRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.ProjectRequest projectRequest)
        {
            Invoke("update", projectRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ProjectResponse Get(global::Freshbooks.Library.Model.ProjectIdentity projectIdentity)
        {
            global::Freshbooks.Library.Model.ProjectResponse response = new global::Freshbooks.Library.Model.ProjectResponse();
            Invoke("get", projectIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.ProjectIdentity projectIdentity)
        {
            Invoke("delete", projectIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ProjectsResponse List(global::Freshbooks.Library.Model.ProjectsRequest projectsRequest)
        {
            global::Freshbooks.Library.Model.ProjectsResponse response = new global::Freshbooks.Library.Model.ProjectsResponse();
            Invoke("list", projectsRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IProjectService _dispatch;
            public Dispatch(IProjectService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IProjectService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.ProjectRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.ProjectIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.ProjectIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.ProjectsRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.ProjectRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IProjectService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IProjectService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IProjectService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ProjectRequest request = new global::Freshbooks.Library.Model.ProjectRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ProjectIdentity response = new global::Freshbooks.Library.Model.ProjectIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.ProjectIdentity request = new global::Freshbooks.Library.Model.ProjectIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.ProjectIdentity request = new global::Freshbooks.Library.Model.ProjectIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.ProjectResponse response = new global::Freshbooks.Library.Model.ProjectResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.ProjectsRequest request = new global::Freshbooks.Library.Model.ProjectsRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ProjectsResponse response = new global::Freshbooks.Library.Model.ProjectsResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.ProjectRequest request = new global::Freshbooks.Library.Model.ProjectRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IProjectService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
