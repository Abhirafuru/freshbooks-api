// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region StaffMemberIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffMemberIdentity : global::NClassify.Library.IMessage
    {
        bool HasStaffId { get; }
        global::Freshbooks.Library.Model.StaffId StaffId { get; }
    }
    [global::System.Xml.Serialization.XmlType("StaffMemberIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffMemberIdentity : IStaffMemberIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly StaffMemberIdentity _defaultInstance = new StaffMemberIdentity(false);
        public static StaffMemberIdentity DefaultInstance { get { return _defaultInstance; } }
        static StaffMemberIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected StaffMemberIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public StaffMemberIdentity() : this(true)
        {
        }
        public StaffMemberIdentity(IStaffMemberIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            StaffId = 4,
        }
        #endregion
        #region Static Data
        public static bool IsValidStaffId(global::Freshbooks.Library.Model.StaffId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_staffId;
        private global::Freshbooks.Library.Model.StaffId __fld_staffId;
        #endregion
        #region Instance Members
        public bool HasStaffId
        {
            get { return __has_staffId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
                __has_staffId = false;
            }
        }
        public global::Freshbooks.Library.Model.StaffId StaffId
        {
            get
            {
                return __fld_staffId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = value;
                __has_staffId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_staffId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.StaffId));
                errorCount++;
            }
            return errorCount;
        }
        public IStaffMemberIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            StaffMemberIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_staffId = false;
            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            StaffMemberIdentity value = (StaffMemberIdentity)base.MemberwiseClone();
            return value;
        }
        public StaffMemberIdentity Clone()
        {
            return (StaffMemberIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IStaffMemberIdentity) MergeFrom((IStaffMemberIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IStaffMemberIdentity other)
        {
            if (other.HasStaffId) StaffId = other.StaffId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "staff_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("StaffMemberIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_staffId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("StaffMemberIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_staffId)
            {
                writer.WriteElementString("staff_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_staffId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region StaffMember
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffMember : global::NClassify.Library.IMessage
    {
        bool HasStaffId { get; }
        global::Freshbooks.Library.Model.StaffId StaffId { get; }
        bool HasUsername { get; }
        string Username { get; }
        bool HasFirstName { get; }
        string FirstName { get; }
        bool HasLastName { get; }
        string LastName { get; }
        bool HasEmail { get; }
        string Email { get; }
        bool HasBusinessPhone { get; }
        string BusinessPhone { get; }
        bool HasMobilePhone { get; }
        string MobilePhone { get; }
        bool HasRate { get; }
        double Rate { get; }
        bool HasLastLogin { get; }
        global::System.DateTime LastLogin { get; }
        bool HasNumberOfLogins { get; }
        ulong NumberOfLogins { get; }
        bool HasSignupDate { get; }
        global::System.DateTime SignupDate { get; }
        bool HasStreet1 { get; }
        string Street1 { get; }
        bool HasStreet2 { get; }
        string Street2 { get; }
        bool HasCity { get; }
        string City { get; }
        bool HasState { get; }
        string State { get; }
        bool HasCountry { get; }
        string Country { get; }
        bool HasCode { get; }
        string Code { get; }
    }
    [global::System.Xml.Serialization.XmlType("StaffMember")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffMember : IStaffMember, global::NClassify.Library.IBuilder
    {
        private static readonly StaffMember _defaultInstance = new StaffMember(false);
        public static StaffMember DefaultInstance { get { return _defaultInstance; } }
        static StaffMember()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected StaffMember(bool initalize)
        {
            if (initalize) Initialize();
        }
        public StaffMember() : this(true)
        {
        }
        public StaffMember(IStaffMember copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            StaffId = 4,
            Username = 5,
            FirstName = 6,
            LastName = 7,
            Email = 8,
            BusinessPhone = 9,
            MobilePhone = 10,
            Rate = 11,
            LastLogin = 12,
            NumberOfLogins = 13,
            SignupDate = 14,
            Street1 = 15,
            Street2 = 16,
            City = 17,
            State = 18,
            Country = 19,
            Code = 20,
        }
        #endregion
        #region Static Data
        public static bool IsValidStaffId(global::Freshbooks.Library.Model.StaffId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidUsername(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Username, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Username));
                return false;
            }
            return true;
        }
        public static bool IsValidFirstName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.FirstName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.FirstName));
                return false;
            }
            return true;
        }
        public static bool IsValidLastName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.LastName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.LastName));
                return false;
            }
            return true;
        }
        public static bool IsValidEmail(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Email, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Email));
                return false;
            }
            return true;
        }
        public static bool IsValidBusinessPhone(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.BusinessPhone, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.BusinessPhone));
                return false;
            }
            return true;
        }
        public static bool IsValidMobilePhone(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.MobilePhone, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.MobilePhone));
                return false;
            }
            return true;
        }
        public static bool IsValidStreet1(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Street1, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Street1));
                return false;
            }
            return true;
        }
        public static bool IsValidStreet2(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Street2, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Street2));
                return false;
            }
            return true;
        }
        public static bool IsValidCity(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.City, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.City));
                return false;
            }
            return true;
        }
        public static bool IsValidState(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.State, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.State));
                return false;
            }
            return true;
        }
        public static bool IsValidCountry(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Country, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Country));
                return false;
            }
            return true;
        }
        public static bool IsValidCode(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Code, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Code));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_staffId;
        private global::Freshbooks.Library.Model.StaffId __fld_staffId;
        private bool __has_username;
        private string __fld_username;
        private bool __has_firstName;
        private string __fld_firstName;
        private bool __has_lastName;
        private string __fld_lastName;
        private bool __has_email;
        private string __fld_email;
        private bool __has_businessPhone;
        private string __fld_businessPhone;
        private bool __has_mobilePhone;
        private string __fld_mobilePhone;
        private bool __has_rate;
        private double __fld_rate;
        private bool __has_lastLogin;
        private global::System.DateTime __fld_lastLogin;
        private bool __has_numberOfLogins;
        private ulong __fld_numberOfLogins;
        private bool __has_signupDate;
        private global::System.DateTime __fld_signupDate;
        private bool __has_street1;
        private string __fld_street1;
        private bool __has_street2;
        private string __fld_street2;
        private bool __has_city;
        private string __fld_city;
        private bool __has_state;
        private string __fld_state;
        private bool __has_country;
        private string __fld_country;
        private bool __has_code;
        private string __fld_code;
        #endregion
        #region Instance Members
        public bool HasStaffId
        {
            get { return __has_staffId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
                __has_staffId = false;
            }
        }
        public global::Freshbooks.Library.Model.StaffId StaffId
        {
            get
            {
                return __fld_staffId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = value;
                __has_staffId = true;
            }
        }
        public bool HasUsername
        {
            get { return __has_username; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = "";
                __has_username = false;
            }
        }
        public string Username
        {
            get
            {
                return __fld_username;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Username");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = value;
                __has_username = true;
            }
        }
        public bool HasFirstName
        {
            get { return __has_firstName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = "";
                __has_firstName = false;
            }
        }
        public string FirstName
        {
            get
            {
                return __fld_firstName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("FirstName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = value;
                __has_firstName = true;
            }
        }
        public bool HasLastName
        {
            get { return __has_lastName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = "";
                __has_lastName = false;
            }
        }
        public string LastName
        {
            get
            {
                return __fld_lastName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("LastName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = value;
                __has_lastName = true;
            }
        }
        public bool HasEmail
        {
            get { return __has_email; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = "";
                __has_email = false;
            }
        }
        public string Email
        {
            get
            {
                return __fld_email;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Email");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = value;
                __has_email = true;
            }
        }
        public bool HasBusinessPhone
        {
            get { return __has_businessPhone; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_businessPhone = "";
                __has_businessPhone = false;
            }
        }
        public string BusinessPhone
        {
            get
            {
                return __fld_businessPhone;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("BusinessPhone");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_businessPhone = value;
                __has_businessPhone = true;
            }
        }
        public bool HasMobilePhone
        {
            get { return __has_mobilePhone; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mobilePhone = "";
                __has_mobilePhone = false;
            }
        }
        public string MobilePhone
        {
            get
            {
                return __fld_mobilePhone;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("MobilePhone");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mobilePhone = value;
                __has_mobilePhone = true;
            }
        }
        public bool HasRate
        {
            get { return __has_rate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = 0D;
                __has_rate = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Rate
        {
            get
            {
                return __fld_rate;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = value;
                __has_rate = true;
            }
        }
        public bool HasLastLogin
        {
            get { return __has_lastLogin; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastLogin = global::System.DateTime.MinValue;
                __has_lastLogin = false;
            }
        }
        public global::System.DateTime LastLogin
        {
            get
            {
                return __fld_lastLogin;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastLogin = value;
                __has_lastLogin = true;
            }
        }
        public bool HasNumberOfLogins
        {
            get { return __has_numberOfLogins; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_numberOfLogins = 0UL;
                __has_numberOfLogins = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0UL)]
        public ulong NumberOfLogins
        {
            get
            {
                return __fld_numberOfLogins;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_numberOfLogins = value;
                __has_numberOfLogins = true;
            }
        }
        public bool HasSignupDate
        {
            get { return __has_signupDate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_signupDate = global::System.DateTime.MinValue;
                __has_signupDate = false;
            }
        }
        public global::System.DateTime SignupDate
        {
            get
            {
                return __fld_signupDate;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_signupDate = value;
                __has_signupDate = true;
            }
        }
        public bool HasStreet1
        {
            get { return __has_street1; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_street1 = "";
                __has_street1 = false;
            }
        }
        public string Street1
        {
            get
            {
                return __fld_street1;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Street1");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_street1 = value;
                __has_street1 = true;
            }
        }
        public bool HasStreet2
        {
            get { return __has_street2; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_street2 = "";
                __has_street2 = false;
            }
        }
        public string Street2
        {
            get
            {
                return __fld_street2;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Street2");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_street2 = value;
                __has_street2 = true;
            }
        }
        public bool HasCity
        {
            get { return __has_city; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_city = "";
                __has_city = false;
            }
        }
        public string City
        {
            get
            {
                return __fld_city;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("City");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_city = value;
                __has_city = true;
            }
        }
        public bool HasState
        {
            get { return __has_state; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_state = "";
                __has_state = false;
            }
        }
        public string State
        {
            get
            {
                return __fld_state;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("State");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_state = value;
                __has_state = true;
            }
        }
        public bool HasCountry
        {
            get { return __has_country; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_country = "";
                __has_country = false;
            }
        }
        public string Country
        {
            get
            {
                return __fld_country;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Country");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_country = value;
                __has_country = true;
            }
        }
        public bool HasCode
        {
            get { return __has_code; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_code = "";
                __has_code = false;
            }
        }
        public string Code
        {
            get
            {
                return __fld_code;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Code");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_code = value;
                __has_code = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_staffId && !IsValidStaffId(__fld_staffId, onError)) errorCount++;
            if (__has_username && !IsValidUsername(__fld_username, onError)) errorCount++;
            if (__has_firstName && !IsValidFirstName(__fld_firstName, onError)) errorCount++;
            if (__has_lastName && !IsValidLastName(__fld_lastName, onError)) errorCount++;
            if (__has_email && !IsValidEmail(__fld_email, onError)) errorCount++;
            if (__has_businessPhone && !IsValidBusinessPhone(__fld_businessPhone, onError)) errorCount++;
            if (__has_mobilePhone && !IsValidMobilePhone(__fld_mobilePhone, onError)) errorCount++;
            if (__has_street1 && !IsValidStreet1(__fld_street1, onError)) errorCount++;
            if (__has_street2 && !IsValidStreet2(__fld_street2, onError)) errorCount++;
            if (__has_city && !IsValidCity(__fld_city, onError)) errorCount++;
            if (__has_state && !IsValidState(__fld_state, onError)) errorCount++;
            if (__has_country && !IsValidCountry(__fld_country, onError)) errorCount++;
            if (__has_code && !IsValidCode(__fld_code, onError)) errorCount++;
            return errorCount;
        }
        public IStaffMember AsReadOnly()
        {
            if (_readOnly) return this;
            StaffMember copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_username = true;
            __has_firstName = true;
            __has_lastName = true;
            __has_email = true;
            __has_businessPhone = true;
            __has_mobilePhone = true;
            __has_street1 = true;
            __has_street2 = true;
            __has_city = true;
            __has_state = true;
            __has_country = true;
            __has_code = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_staffId = false;
            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
            __has_username = false;
            __fld_username = "";
            __has_firstName = false;
            __fld_firstName = "";
            __has_lastName = false;
            __fld_lastName = "";
            __has_email = false;
            __fld_email = "";
            __has_businessPhone = false;
            __fld_businessPhone = "";
            __has_mobilePhone = false;
            __fld_mobilePhone = "";
            __has_rate = false;
            __fld_rate = 0D;
            __has_lastLogin = false;
            __fld_lastLogin = global::System.DateTime.MinValue;
            __has_numberOfLogins = false;
            __fld_numberOfLogins = 0UL;
            __has_signupDate = false;
            __fld_signupDate = global::System.DateTime.MinValue;
            __has_street1 = false;
            __fld_street1 = "";
            __has_street2 = false;
            __fld_street2 = "";
            __has_city = false;
            __fld_city = "";
            __has_state = false;
            __fld_state = "";
            __has_country = false;
            __fld_country = "";
            __has_code = false;
            __fld_code = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            StaffMember value = (StaffMember)base.MemberwiseClone();
            return value;
        }
        public StaffMember Clone()
        {
            return (StaffMember)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IStaffMember) MergeFrom((IStaffMember)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IStaffMember other)
        {
            if (other.HasStaffId) StaffId = other.StaffId;
            if (other.HasUsername) Username = other.Username;
            if (other.HasFirstName) FirstName = other.FirstName;
            if (other.HasLastName) LastName = other.LastName;
            if (other.HasEmail) Email = other.Email;
            if (other.HasBusinessPhone) BusinessPhone = other.BusinessPhone;
            if (other.HasMobilePhone) MobilePhone = other.MobilePhone;
            if (other.HasRate) Rate = other.Rate;
            if (other.HasLastLogin) LastLogin = other.LastLogin;
            if (other.HasNumberOfLogins) NumberOfLogins = other.NumberOfLogins;
            if (other.HasSignupDate) SignupDate = other.SignupDate;
            if (other.HasStreet1) Street1 = other.Street1;
            if (other.HasStreet2) Street2 = other.Street2;
            if (other.HasCity) City = other.City;
            if (other.HasState) State = other.State;
            if (other.HasCountry) Country = other.Country;
            if (other.HasCode) Code = other.Code;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "business_phone", "city", "code", "country", "email", "first_name", "last_login", "last_name", "mobile_phone", "number_of_logins", "rate", "signup_date", "staff_id", "state", "street1", "street2", "username" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("StaffMember", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_businessPhone = sbuilder.ToString();
                        __has_businessPhone = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_city = sbuilder.ToString();
                        __has_city = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_code = sbuilder.ToString();
                        __has_code = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_country = sbuilder.ToString();
                        __has_country = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_email = sbuilder.ToString();
                        __has_email = true;
                        break;
                    }
                    case 5:
                    {
                        __fld_firstName = sbuilder.ToString();
                        __has_firstName = true;
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_lastLogin = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_lastLogin = true;
                        }
                        break;
                    }
                    case 7:
                    {
                        __fld_lastName = sbuilder.ToString();
                        __has_lastName = true;
                        break;
                    }
                    case 8:
                    {
                        __fld_mobilePhone = sbuilder.ToString();
                        __has_mobilePhone = true;
                        break;
                    }
                    case 9:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_numberOfLogins = global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_numberOfLogins = true;
                        }
                        break;
                    }
                    case 10:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_rate = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_rate = true;
                        }
                        break;
                    }
                    case 11:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_signupDate = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_signupDate = true;
                        }
                        break;
                    }
                    case 12:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_staffId = true;
                        }
                        break;
                    }
                    case 13:
                    {
                        __fld_state = sbuilder.ToString();
                        __has_state = true;
                        break;
                    }
                    case 14:
                    {
                        __fld_street1 = sbuilder.ToString();
                        __has_street1 = true;
                        break;
                    }
                    case 15:
                    {
                        __fld_street2 = sbuilder.ToString();
                        __has_street2 = true;
                        break;
                    }
                    case 16:
                    {
                        __fld_username = sbuilder.ToString();
                        __has_username = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("StaffMember", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_staffId)
            {
                writer.WriteElementString("staff_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_staffId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_username)
            {
                writer.WriteElementString("username", __fld_username);
            }
            if (__has_firstName)
            {
                writer.WriteElementString("first_name", __fld_firstName);
            }
            if (__has_lastName)
            {
                writer.WriteElementString("last_name", __fld_lastName);
            }
            if (__has_email)
            {
                writer.WriteElementString("email", __fld_email);
            }
            if (__has_businessPhone)
            {
                writer.WriteElementString("business_phone", __fld_businessPhone);
            }
            if (__has_mobilePhone)
            {
                writer.WriteElementString("mobile_phone", __fld_mobilePhone);
            }
            if (__has_rate)
            {
                writer.WriteElementString("rate", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_rate, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_lastLogin)
            {
                writer.WriteElementString("last_login", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_lastLogin, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_numberOfLogins)
            {
                writer.WriteElementString("number_of_logins", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_numberOfLogins, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_signupDate)
            {
                writer.WriteElementString("signup_date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_signupDate, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_street1)
            {
                writer.WriteElementString("street1", __fld_street1);
            }
            if (__has_street2)
            {
                writer.WriteElementString("street2", __fld_street2);
            }
            if (__has_city)
            {
                writer.WriteElementString("city", __fld_city);
            }
            if (__has_state)
            {
                writer.WriteElementString("state", __fld_state);
            }
            if (__has_country)
            {
                writer.WriteElementString("country", __fld_country);
            }
            if (__has_code)
            {
                writer.WriteElementString("code", __fld_code);
            }
        }
        #endregion
    }
    #endregion
    #region StaffMemberResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffMemberResponse : global::NClassify.Library.IMessage
    {
        bool HasStaff { get; }
        global::Freshbooks.Library.Model.StaffMember Staff { get; }
    }
    [global::System.Xml.Serialization.XmlType("StaffMemberResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffMemberResponse : IStaffMemberResponse, global::NClassify.Library.IBuilder
    {
        private static readonly StaffMemberResponse _defaultInstance = new StaffMemberResponse(false);
        public static StaffMemberResponse DefaultInstance { get { return _defaultInstance; } }
        static StaffMemberResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected StaffMemberResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public StaffMemberResponse() : this(true)
        {
        }
        public StaffMemberResponse(IStaffMemberResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Staff = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidStaff(global::Freshbooks.Library.Model.StaffMember value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Staff, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Staff));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Staff, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_staff;
        private global::Freshbooks.Library.Model.StaffMember __fld_staff;
        #endregion
        #region Instance Members
        public bool HasStaff
        {
            get { return __has_staff; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staff = global::Freshbooks.Library.Model.StaffMember.DefaultInstance;
                __has_staff = false;
            }
        }
        public global::Freshbooks.Library.Model.StaffMember Staff
        {
            get
            {
                return __fld_staff;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Staff");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staff = value;
                __has_staff = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_staff)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Staff, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Staff));
                errorCount++;
            }
            return errorCount;
        }
        public IStaffMemberResponse AsReadOnly()
        {
            if (_readOnly) return this;
            StaffMemberResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_staff.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_staff = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_staff = false;
            __fld_staff = global::Freshbooks.Library.Model.StaffMember.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            StaffMemberResponse value = (StaffMemberResponse)base.MemberwiseClone();
            value.__fld_staff = (global::Freshbooks.Library.Model.StaffMember)value.__fld_staff.Clone();
            return value;
        }
        public StaffMemberResponse Clone()
        {
            return (StaffMemberResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IStaffMemberResponse) MergeFrom((IStaffMemberResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IStaffMemberResponse other)
        {
            if (other.HasStaff) Staff = (global::Freshbooks.Library.Model.StaffMember)other.Staff.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "staff" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("StaffMemberResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.StaffMember value = __fld_staff;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.StaffMember.DefaultInstance) ? new global::Freshbooks.Library.Model.StaffMember() : new global::Freshbooks.Library.Model.StaffMember(__fld_staff);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_staff = value;
                        __has_staff = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("StaffMemberResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_staff)
            {
                __fld_staff.WriteXml("staff", writer);
            }
        }
        #endregion
    }
    #endregion
    #region SelfRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ISelfRequest : global::NClassify.Library.IMessage
    {
    }
    [global::System.Xml.Serialization.XmlType("SelfRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class SelfRequest : ISelfRequest, global::NClassify.Library.IBuilder
    {
        private static readonly SelfRequest _defaultInstance = new SelfRequest(false);
        public static SelfRequest DefaultInstance { get { return _defaultInstance; } }
        static SelfRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected SelfRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public SelfRequest() : this(true)
        {
        }
        public SelfRequest(ISelfRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        private bool _readOnly;
        #endregion
        #region Instance Members
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            return errorCount;
        }
        public ISelfRequest AsReadOnly()
        {
            if (_readOnly) return this;
            SelfRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            SelfRequest value = (SelfRequest)base.MemberwiseClone();
            return value;
        }
        public SelfRequest Clone()
        {
            return (SelfRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ISelfRequest) MergeFrom((ISelfRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ISelfRequest other)
        {
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SelfRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SelfRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region StaffMembers
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffMembers : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.StaffMember> MemberList { get; }
    }
    [global::System.Xml.Serialization.XmlType("StaffMembers")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffMembers : global::Freshbooks.Library.Model.PaginatedResponse, IStaffMembers, global::NClassify.Library.IBuilder
    {
        private static readonly StaffMembers _defaultInstance = new StaffMembers(false);
        public static new StaffMembers DefaultInstance { get { return _defaultInstance; } }
        static StaffMembers()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected StaffMembers(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public StaffMembers() : this(true)
        {
        }
        public StaffMembers(IStaffMembers copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            MemberList = 10,
        }
        #endregion
        #region _MemberList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _MemberList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.StaffMember>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("MemberList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.StaffMember> _contents;
            public _MemberList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.StaffMember>();
            }
            public _MemberList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.StaffMember> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.StaffMember>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.StaffMember item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.StaffMember)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.StaffMember> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.StaffMember this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.StaffMember value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.StaffMember> value)
            {
                foreach (global::Freshbooks.Library.Model.StaffMember item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.StaffMember value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.StaffMember item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.StaffMember item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.StaffMember item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.StaffMember[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _MemberList Clone()
            {
                return _readOnly ? this : new _MemberList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.StaffMember> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidMemberList(global::Freshbooks.Library.Model.StaffMember value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.MemberList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.MemberList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.MemberList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _MemberList __fld_member;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.StaffMember> MemberList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.StaffMember>(__fld_member);
                return __fld_member;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_member = new _MemberList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.StaffMember item in __fld_member)
            {
                if (!IsValidMemberList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_member.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_member = new _MemberList();
        }
        protected override object MemberwiseClone()
        {
            StaffMembers value = (StaffMembers)base.MemberwiseClone();
            value.__fld_member = value.__fld_member.Clone();
            return value;
        }
        public new StaffMembers Clone()
        {
            return (StaffMembers)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IStaffMembers) MergeFrom((IStaffMembers)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IStaffMembers other)
        {
            foreach (global::Freshbooks.Library.Model.StaffMember item in other.MemberList)
                __fld_member.Add((global::Freshbooks.Library.Model.StaffMember)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "member" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.StaffMember child = new global::Freshbooks.Library.Model.StaffMember();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_member.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region StaffMembersResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffMembersResponse : global::NClassify.Library.IMessage
    {
        bool HasStaffMembers { get; }
        global::Freshbooks.Library.Model.StaffMembers StaffMembers { get; }
    }
    [global::System.Xml.Serialization.XmlType("StaffMembersResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffMembersResponse : IStaffMembersResponse, global::NClassify.Library.IBuilder
    {
        private static readonly StaffMembersResponse _defaultInstance = new StaffMembersResponse(false);
        public static StaffMembersResponse DefaultInstance { get { return _defaultInstance; } }
        static StaffMembersResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected StaffMembersResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public StaffMembersResponse() : this(true)
        {
        }
        public StaffMembersResponse(IStaffMembersResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            StaffMembers = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidStaffMembers(global::Freshbooks.Library.Model.StaffMembers value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StaffMembers, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.StaffMembers));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffMembers, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_staffMembers;
        private global::Freshbooks.Library.Model.StaffMembers __fld_staffMembers;
        #endregion
        #region Instance Members
        public bool HasStaffMembers
        {
            get { return __has_staffMembers; }
        }
        public global::Freshbooks.Library.Model.StaffMembers StaffMembers
        {
            get
            {
                return __fld_staffMembers;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("StaffMembers");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffMembers = value;
                __has_staffMembers = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_staffMembers)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StaffMembers, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.StaffMembers));
                errorCount++;
            }
            return errorCount;
        }
        public IStaffMembersResponse AsReadOnly()
        {
            if (_readOnly) return this;
            StaffMembersResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_staffMembers.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_staffMembers = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_staffMembers = false;
            __fld_staffMembers = global::Freshbooks.Library.Model.StaffMembers.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            StaffMembersResponse value = (StaffMembersResponse)base.MemberwiseClone();
            value.__fld_staffMembers = (global::Freshbooks.Library.Model.StaffMembers)value.__fld_staffMembers.Clone();
            return value;
        }
        public StaffMembersResponse Clone()
        {
            return (StaffMembersResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IStaffMembersResponse) MergeFrom((IStaffMembersResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IStaffMembersResponse other)
        {
            if (other.HasStaffMembers) StaffMembers = (global::Freshbooks.Library.Model.StaffMembers)other.StaffMembers.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "staff_members" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("StaffMembersResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.StaffMembers value = __fld_staffMembers;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.StaffMembers.DefaultInstance) ? new global::Freshbooks.Library.Model.StaffMembers() : new global::Freshbooks.Library.Model.StaffMembers(__fld_staffMembers);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_staffMembers = value;
                        __has_staffMembers = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("StaffMembersResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region StaffMembersRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffMembersRequest : global::NClassify.Library.IMessage
    {
    }
    [global::System.Xml.Serialization.XmlType("StaffMembersRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffMembersRequest : global::Freshbooks.Library.Model.PaginatedRequest, IStaffMembersRequest, global::NClassify.Library.IBuilder
    {
        private static readonly StaffMembersRequest _defaultInstance = new StaffMembersRequest(false);
        public static new StaffMembersRequest DefaultInstance { get { return _defaultInstance; } }
        static StaffMembersRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected StaffMembersRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public StaffMembersRequest() : this(true)
        {
        }
        public StaffMembersRequest(IStaffMembersRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        #endregion
        #region Instance Members
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
        }
        protected override object MemberwiseClone()
        {
            StaffMembersRequest value = (StaffMembersRequest)base.MemberwiseClone();
            return value;
        }
        public new StaffMembersRequest Clone()
        {
            return (StaffMembersRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IStaffMembersRequest) MergeFrom((IStaffMembersRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IStaffMembersRequest other)
        {
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region StaffService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IStaffService
    {
        global::Freshbooks.Library.Model.StaffMemberResponse Current();
        global::Freshbooks.Library.Model.StaffMemberResponse Get(global::Freshbooks.Library.Model.StaffMemberIdentity staffMemberIdentity);
        global::Freshbooks.Library.Model.StaffMembersResponse List(global::Freshbooks.Library.Model.StaffMembersRequest staffMembersRequest);
    }
    [global::System.Xml.Serialization.XmlType("StaffService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class StaffService : IStaffService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public StaffService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public StaffService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.StaffMemberResponse Current()
        {
            global::Freshbooks.Library.Model.StaffMemberResponse response = new global::Freshbooks.Library.Model.StaffMemberResponse();
            Invoke("current", global::NClassify.Library.EmptyMessage.DefaultInstance, response);
            return response;
        }
        public global::Freshbooks.Library.Model.StaffMemberResponse Get(global::Freshbooks.Library.Model.StaffMemberIdentity staffMemberIdentity)
        {
            global::Freshbooks.Library.Model.StaffMemberResponse response = new global::Freshbooks.Library.Model.StaffMemberResponse();
            Invoke("get", staffMemberIdentity, response);
            return response;
        }
        public global::Freshbooks.Library.Model.StaffMembersResponse List(global::Freshbooks.Library.Model.StaffMembersRequest staffMembersRequest)
        {
            global::Freshbooks.Library.Model.StaffMembersResponse response = new global::Freshbooks.Library.Model.StaffMembersResponse();
            Invoke("list", staffMembersRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IStaffService _dispatch;
            public Dispatch(IStaffService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IStaffService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "current", "get", "list" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Current());
                        break;
                    }
                    case 1:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.StaffMemberIdentity)(object)request));
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.StaffMembersRequest)(object)request));
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IStaffService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IStaffService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IStaffService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "current", "get", "list" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.StaffMemberResponse response = new global::Freshbooks.Library.Model.StaffMemberResponse();
                        _dispatch.CallMethod(methodName, global::NClassify.Library.EmptyMessage.DefaultInstance, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.StaffMemberIdentity request = new global::Freshbooks.Library.Model.StaffMemberIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.StaffMemberResponse response = new global::Freshbooks.Library.Model.StaffMemberResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.StaffMembersRequest request = new global::Freshbooks.Library.Model.StaffMembersRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.StaffMembersResponse response = new global::Freshbooks.Library.Model.StaffMembersResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IStaffService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
