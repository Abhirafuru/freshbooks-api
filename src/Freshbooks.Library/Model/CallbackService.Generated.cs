// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region event_type
    [global::System.Xml.Serialization.XmlType("event_type")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct EventType : global::System.IEquatable<EventType>, global::System.IComparable<EventType>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        private static readonly string[] __in_value = new string[] {"all", "category", "category.create", "category.delete", "category.update", "client", "client.create", "client.delete", "client.update", "estimate", "estimate.create", "estimate.delete", "estimate.sendByEmail", "estimate.update", "expense", "expense.create", "expense.delete", "expense.update", "invoice", "invoice.create", "invoice.delete", "invoice.dispute", "invoice.pastdue.1", "invoice.pastdue.2", "invoice.pastdue.3", "invoice.sendByEmail", "invoice.sendBySnailMail", "invoice.update", "item", "item.create", "item.delete", "item.update", "payment", "payment.create", "payment.delete", "payment.update", "project", "project.create", "project.delete", "project.update", "recurring", "recurring.create", "recurring.delete", "recurring.update", "staff", "staff.create", "staff.delete", "staff.update", "task", "task.create", "task.delete", "task.update", "time_entry", "time_entry.create", "time_entry.delete", "time_entry.update"};
        public static bool IsValidValue(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Value));
                return false;
            }
            if (global::System.Array.BinarySearch(__in_value, value) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeOneOf, TypeFields.Value, string.Join(", ", __in_value)));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public EventType(string value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is EventType ? Equals((EventType)obj) : base.Equals(obj);
        }
        public bool Equals(EventType other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(EventType other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator EventType(string value)
        {
            return new EventType(value);
        }
        public static explicit operator string(EventType value)
        {
            return value.Value;
        }
        public static bool operator ==(EventType x, EventType y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(EventType x, EventType y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region CallbackIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbackIdentity : global::NClassify.Library.IMessage
    {
        bool HasCallbackId { get; }
        global::Freshbooks.Library.Model.CallbackId CallbackId { get; }
    }
    [global::System.Xml.Serialization.XmlType("CallbackIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbackIdentity : ICallbackIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly CallbackIdentity _defaultInstance = new CallbackIdentity(false);
        public static CallbackIdentity DefaultInstance { get { return _defaultInstance; } }
        static CallbackIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CallbackIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CallbackIdentity() : this(true)
        {
        }
        public CallbackIdentity(ICallbackIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CallbackId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCallbackId(global::Freshbooks.Library.Model.CallbackId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_callbackId;
        private global::Freshbooks.Library.Model.CallbackId __fld_callbackId;
        #endregion
        #region Instance Members
        public bool HasCallbackId
        {
            get { return __has_callbackId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(0UL);
                __has_callbackId = false;
            }
        }
        public global::Freshbooks.Library.Model.CallbackId CallbackId
        {
            get
            {
                return __fld_callbackId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callbackId = value;
                __has_callbackId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_callbackId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.CallbackId));
                errorCount++;
            }
            return errorCount;
        }
        public ICallbackIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            CallbackIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_callbackId = false;
            __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CallbackIdentity value = (CallbackIdentity)base.MemberwiseClone();
            return value;
        }
        public CallbackIdentity Clone()
        {
            return (CallbackIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbackIdentity) MergeFrom((ICallbackIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICallbackIdentity other)
        {
            if (other.HasCallbackId) CallbackId = other.CallbackId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callback_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CallbackIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_callbackId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CallbackIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_callbackId)
            {
                writer.WriteElementString("callback_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_callbackId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Callback
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallback : global::NClassify.Library.IMessage
    {
        bool HasCallbackId { get; }
        global::Freshbooks.Library.Model.CallbackId CallbackId { get; }
        bool HasUri { get; }
        global::Freshbooks.Library.Model.Url Uri { get; }
        bool HasEvent { get; }
        global::Freshbooks.Library.Model.EventType Event { get; }
        bool HasVerified { get; }
        bool Verified { get; }
    }
    [global::System.Xml.Serialization.XmlType("Callback")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Callback : ICallback, global::NClassify.Library.IBuilder
    {
        private static readonly Callback _defaultInstance = new Callback(false);
        public static Callback DefaultInstance { get { return _defaultInstance; } }
        static Callback()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Callback(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Callback() : this(true)
        {
        }
        public Callback(ICallback copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CallbackId = 4,
            Uri = 5,
            Event = 6,
            Verified = 7,
        }
        #endregion
        #region Static Data
        public static bool IsValidCallbackId(global::Freshbooks.Library.Model.CallbackId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidUri(global::Freshbooks.Library.Model.Url value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Uri, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidEvent(global::Freshbooks.Library.Model.EventType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Event, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_callbackId;
        private global::Freshbooks.Library.Model.CallbackId __fld_callbackId;
        private bool __has_uri;
        private global::Freshbooks.Library.Model.Url __fld_uri;
        private bool __has_event;
        private global::Freshbooks.Library.Model.EventType __fld_event;
        private bool __has_verified;
        private bool __fld_verified;
        #endregion
        #region Instance Members
        public bool HasCallbackId
        {
            get { return __has_callbackId; }
        }
        public global::Freshbooks.Library.Model.CallbackId CallbackId
        {
            get
            {
                return __fld_callbackId;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callbackId = value;
                __has_callbackId = true;
            }
        }
        public bool HasUri
        {
            get { return __has_uri; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uri = new global::Freshbooks.Library.Model.Url("");
                __has_uri = false;
            }
        }
        public global::Freshbooks.Library.Model.Url Uri
        {
            get
            {
                return __fld_uri;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uri = value;
                __has_uri = true;
            }
        }
        public bool HasEvent
        {
            get { return __has_event; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_event = new global::Freshbooks.Library.Model.EventType("");
                __has_event = false;
            }
        }
        public global::Freshbooks.Library.Model.EventType Event
        {
            get
            {
                return __fld_event;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_event = value;
                __has_event = true;
            }
        }
        public bool HasVerified
        {
            get { return __has_verified; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_verified = false;
                __has_verified = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Verified
        {
            get
            {
                return __fld_verified;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_verified = value;
                __has_verified = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_callbackId && !IsValidCallbackId(__fld_callbackId, onError)) errorCount++;
            if (__has_uri && !IsValidUri(__fld_uri, onError)) errorCount++;
            if (__has_event && !IsValidEvent(__fld_event, onError)) errorCount++;
            return errorCount;
        }
        public ICallback AsReadOnly()
        {
            if (_readOnly) return this;
            Callback copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_callbackId = false;
            __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(0UL);
            __has_uri = false;
            __fld_uri = new global::Freshbooks.Library.Model.Url("");
            __has_event = false;
            __fld_event = new global::Freshbooks.Library.Model.EventType("");
            __has_verified = false;
            __fld_verified = false;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Callback value = (Callback)base.MemberwiseClone();
            return value;
        }
        public Callback Clone()
        {
            return (Callback)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallback) MergeFrom((ICallback)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICallback other)
        {
            if (other.HasCallbackId) CallbackId = other.CallbackId;
            if (other.HasUri) Uri = other.Uri;
            if (other.HasEvent) Event = other.Event;
            if (other.HasVerified) Verified = other.Verified;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callback_id", "event", "uri", "verified" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Callback", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_callbackId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_event = new global::Freshbooks.Library.Model.EventType(sbuilder.ToString());
                        __has_event = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_uri = new global::Freshbooks.Library.Model.Url(sbuilder.ToString());
                        __has_uri = true;
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_verified = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_verified = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Callback", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_uri)
            {
                writer.WriteElementString("uri", __fld_uri.Value);
            }
            if (__has_event)
            {
                writer.WriteElementString("event", __fld_event.Value);
            }
            if (__has_verified)
            {
                writer.WriteElementString("verified", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_verified, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region CallbackRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbackRequest : global::NClassify.Library.IMessage
    {
        bool HasCallback { get; }
        global::Freshbooks.Library.Model.Callback Callback { get; }
    }
    [global::System.Xml.Serialization.XmlType("CallbackRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbackRequest : ICallbackRequest, global::NClassify.Library.IBuilder
    {
        private static readonly CallbackRequest _defaultInstance = new CallbackRequest(false);
        public static CallbackRequest DefaultInstance { get { return _defaultInstance; } }
        static CallbackRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CallbackRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CallbackRequest() : this(true)
        {
        }
        public CallbackRequest(ICallbackRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Callback = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCallback(global::Freshbooks.Library.Model.Callback value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Callback, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Callback));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Callback, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_callback;
        private global::Freshbooks.Library.Model.Callback __fld_callback;
        #endregion
        #region Instance Members
        public bool HasCallback
        {
            get { return __has_callback; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callback = global::Freshbooks.Library.Model.Callback.DefaultInstance;
                __has_callback = false;
            }
        }
        public global::Freshbooks.Library.Model.Callback Callback
        {
            get
            {
                return __fld_callback;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Callback");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callback = value;
                __has_callback = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_callback)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Callback, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Callback));
                errorCount++;
            }
            return errorCount;
        }
        public ICallbackRequest AsReadOnly()
        {
            if (_readOnly) return this;
            CallbackRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_callback.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_callback = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_callback = false;
            __fld_callback = global::Freshbooks.Library.Model.Callback.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CallbackRequest value = (CallbackRequest)base.MemberwiseClone();
            value.__fld_callback = (global::Freshbooks.Library.Model.Callback)value.__fld_callback.Clone();
            return value;
        }
        public CallbackRequest Clone()
        {
            return (CallbackRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbackRequest) MergeFrom((ICallbackRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICallbackRequest other)
        {
            if (other.HasCallback) Callback = (global::Freshbooks.Library.Model.Callback)other.Callback.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callback" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CallbackRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Callback value = __fld_callback;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Callback.DefaultInstance) ? new global::Freshbooks.Library.Model.Callback() : new global::Freshbooks.Library.Model.Callback(__fld_callback);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_callback = value;
                        __has_callback = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CallbackRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_callback)
            {
                __fld_callback.WriteXml("callback", writer);
            }
        }
        #endregion
    }
    #endregion
    #region CallbackVerify
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbackVerify : global::NClassify.Library.IMessage
    {
        bool HasCallbackId { get; }
        global::Freshbooks.Library.Model.CallbackId CallbackId { get; }
        bool HasVerifier { get; }
        string Verifier { get; }
    }
    [global::System.Xml.Serialization.XmlType("CallbackVerify")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbackVerify : ICallbackVerify, global::NClassify.Library.IBuilder
    {
        private static readonly CallbackVerify _defaultInstance = new CallbackVerify(false);
        public static CallbackVerify DefaultInstance { get { return _defaultInstance; } }
        static CallbackVerify()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CallbackVerify(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CallbackVerify() : this(true)
        {
        }
        public CallbackVerify(ICallbackVerify copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CallbackId = 4,
            Verifier = 5,
        }
        #endregion
        #region Static Data
        public static bool IsValidCallbackId(global::Freshbooks.Library.Model.CallbackId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidVerifier(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Verifier, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Verifier));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_callbackId;
        private global::Freshbooks.Library.Model.CallbackId __fld_callbackId;
        private bool __has_verifier;
        private string __fld_verifier;
        #endregion
        #region Instance Members
        public bool HasCallbackId
        {
            get { return __has_callbackId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(0UL);
                __has_callbackId = false;
            }
        }
        public global::Freshbooks.Library.Model.CallbackId CallbackId
        {
            get
            {
                return __fld_callbackId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callbackId = value;
                __has_callbackId = true;
            }
        }
        public bool HasVerifier
        {
            get { return __has_verifier; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_verifier = "";
                __has_verifier = false;
            }
        }
        public string Verifier
        {
            get
            {
                return __fld_verifier;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Verifier");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_verifier = value;
                __has_verifier = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_callbackId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.CallbackId));
                errorCount++;
            }
            if (!__has_verifier)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Verifier, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Verifier));
                errorCount++;
            }
            return errorCount;
        }
        public ICallbackVerify AsReadOnly()
        {
            if (_readOnly) return this;
            CallbackVerify copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_verifier = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_callbackId = false;
            __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(0UL);
            __has_verifier = false;
            __fld_verifier = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CallbackVerify value = (CallbackVerify)base.MemberwiseClone();
            return value;
        }
        public CallbackVerify Clone()
        {
            return (CallbackVerify)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbackVerify) MergeFrom((ICallbackVerify)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICallbackVerify other)
        {
            if (other.HasCallbackId) CallbackId = other.CallbackId;
            if (other.HasVerifier) Verifier = other.Verifier;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callback_id", "verifier" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CallbackVerify", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_callbackId = new global::Freshbooks.Library.Model.CallbackId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_callbackId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_verifier = sbuilder.ToString();
                        __has_verifier = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CallbackVerify", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_callbackId)
            {
                writer.WriteElementString("callback_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_callbackId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_verifier)
            {
                writer.WriteElementString("verifier", __fld_verifier);
            }
        }
        #endregion
    }
    #endregion
    #region CallbackVerifyRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbackVerifyRequest : global::NClassify.Library.IMessage
    {
        bool HasCallback { get; }
        global::Freshbooks.Library.Model.CallbackVerify Callback { get; }
    }
    [global::System.Xml.Serialization.XmlType("CallbackVerifyRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbackVerifyRequest : ICallbackVerifyRequest, global::NClassify.Library.IBuilder
    {
        private static readonly CallbackVerifyRequest _defaultInstance = new CallbackVerifyRequest(false);
        public static CallbackVerifyRequest DefaultInstance { get { return _defaultInstance; } }
        static CallbackVerifyRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CallbackVerifyRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CallbackVerifyRequest() : this(true)
        {
        }
        public CallbackVerifyRequest(ICallbackVerifyRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Callback = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCallback(global::Freshbooks.Library.Model.CallbackVerify value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Callback, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Callback));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Callback, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_callback;
        private global::Freshbooks.Library.Model.CallbackVerify __fld_callback;
        #endregion
        #region Instance Members
        public bool HasCallback
        {
            get { return __has_callback; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callback = global::Freshbooks.Library.Model.CallbackVerify.DefaultInstance;
                __has_callback = false;
            }
        }
        public global::Freshbooks.Library.Model.CallbackVerify Callback
        {
            get
            {
                return __fld_callback;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Callback");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callback = value;
                __has_callback = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_callback)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Callback, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Callback));
                errorCount++;
            }
            return errorCount;
        }
        public ICallbackVerifyRequest AsReadOnly()
        {
            if (_readOnly) return this;
            CallbackVerifyRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_callback.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_callback = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_callback = false;
            __fld_callback = global::Freshbooks.Library.Model.CallbackVerify.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CallbackVerifyRequest value = (CallbackVerifyRequest)base.MemberwiseClone();
            value.__fld_callback = (global::Freshbooks.Library.Model.CallbackVerify)value.__fld_callback.Clone();
            return value;
        }
        public CallbackVerifyRequest Clone()
        {
            return (CallbackVerifyRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbackVerifyRequest) MergeFrom((ICallbackVerifyRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICallbackVerifyRequest other)
        {
            if (other.HasCallback) Callback = (global::Freshbooks.Library.Model.CallbackVerify)other.Callback.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callback" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CallbackVerifyRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.CallbackVerify value = __fld_callback;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.CallbackVerify.DefaultInstance) ? new global::Freshbooks.Library.Model.CallbackVerify() : new global::Freshbooks.Library.Model.CallbackVerify(__fld_callback);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_callback = value;
                        __has_callback = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CallbackVerifyRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_callback)
            {
                __fld_callback.WriteXml("callback", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Callbacks
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbacks : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Callback> CallbackList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Callbacks")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Callbacks : global::Freshbooks.Library.Model.PaginatedResponse, ICallbacks, global::NClassify.Library.IBuilder
    {
        private static readonly Callbacks _defaultInstance = new Callbacks(false);
        public static new Callbacks DefaultInstance { get { return _defaultInstance; } }
        static Callbacks()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Callbacks(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Callbacks() : this(true)
        {
        }
        public Callbacks(ICallbacks copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            CallbackList = 10,
        }
        #endregion
        #region _CallbackList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _CallbackList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Callback>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("CallbackList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Callback> _contents;
            public _CallbackList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Callback>();
            }
            public _CallbackList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Callback> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Callback>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Callback item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Callback)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Callback> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Callback this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Callback value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Callback> value)
            {
                foreach (global::Freshbooks.Library.Model.Callback item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Callback value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Callback item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Callback item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Callback item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Callback[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _CallbackList Clone()
            {
                return _readOnly ? this : new _CallbackList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Callback> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidCallbackList(global::Freshbooks.Library.Model.Callback value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.CallbackList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CallbackList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _CallbackList __fld_callback;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Callback> CallbackList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Callback>(__fld_callback);
                return __fld_callback;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callback = new _CallbackList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Callback item in __fld_callback)
            {
                if (!IsValidCallbackList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_callback.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_callback = new _CallbackList();
        }
        protected override object MemberwiseClone()
        {
            Callbacks value = (Callbacks)base.MemberwiseClone();
            value.__fld_callback = value.__fld_callback.Clone();
            return value;
        }
        public new Callbacks Clone()
        {
            return (Callbacks)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbacks) MergeFrom((ICallbacks)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ICallbacks other)
        {
            foreach (global::Freshbooks.Library.Model.Callback item in other.CallbackList)
                __fld_callback.Add((global::Freshbooks.Library.Model.Callback)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callback" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Callback child = new global::Freshbooks.Library.Model.Callback();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_callback.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region CallbacksResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbacksResponse : global::NClassify.Library.IMessage
    {
        bool HasCallbacks { get; }
        global::Freshbooks.Library.Model.Callbacks Callbacks { get; }
    }
    [global::System.Xml.Serialization.XmlType("CallbacksResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbacksResponse : ICallbacksResponse, global::NClassify.Library.IBuilder
    {
        private static readonly CallbacksResponse _defaultInstance = new CallbacksResponse(false);
        public static CallbacksResponse DefaultInstance { get { return _defaultInstance; } }
        static CallbacksResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CallbacksResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CallbacksResponse() : this(true)
        {
        }
        public CallbacksResponse(ICallbacksResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Callbacks = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidCallbacks(global::Freshbooks.Library.Model.Callbacks value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Callbacks, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Callbacks));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Callbacks, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_callbacks;
        private global::Freshbooks.Library.Model.Callbacks __fld_callbacks;
        #endregion
        #region Instance Members
        public bool HasCallbacks
        {
            get { return __has_callbacks; }
        }
        public global::Freshbooks.Library.Model.Callbacks Callbacks
        {
            get
            {
                return __fld_callbacks;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Callbacks");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_callbacks = value;
                __has_callbacks = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_callbacks)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Callbacks, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Callbacks));
                errorCount++;
            }
            return errorCount;
        }
        public ICallbacksResponse AsReadOnly()
        {
            if (_readOnly) return this;
            CallbacksResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_callbacks.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_callbacks = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_callbacks = false;
            __fld_callbacks = global::Freshbooks.Library.Model.Callbacks.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CallbacksResponse value = (CallbacksResponse)base.MemberwiseClone();
            value.__fld_callbacks = (global::Freshbooks.Library.Model.Callbacks)value.__fld_callbacks.Clone();
            return value;
        }
        public CallbacksResponse Clone()
        {
            return (CallbacksResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbacksResponse) MergeFrom((ICallbacksResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICallbacksResponse other)
        {
            if (other.HasCallbacks) Callbacks = (global::Freshbooks.Library.Model.Callbacks)other.Callbacks.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "callbacks" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CallbacksResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Callbacks value = __fld_callbacks;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Callbacks.DefaultInstance) ? new global::Freshbooks.Library.Model.Callbacks() : new global::Freshbooks.Library.Model.Callbacks(__fld_callbacks);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_callbacks = value;
                        __has_callbacks = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CallbacksResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region CallbacksRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbacksRequest : global::NClassify.Library.IMessage
    {
        bool HasEvent { get; }
        global::Freshbooks.Library.Model.EventType Event { get; }
        bool HasUri { get; }
        global::Freshbooks.Library.Model.Url Uri { get; }
    }
    [global::System.Xml.Serialization.XmlType("CallbacksRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbacksRequest : global::Freshbooks.Library.Model.PaginatedRequest, ICallbacksRequest, global::NClassify.Library.IBuilder
    {
        private static readonly CallbacksRequest _defaultInstance = new CallbacksRequest(false);
        public static new CallbacksRequest DefaultInstance { get { return _defaultInstance; } }
        static CallbacksRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CallbacksRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public CallbacksRequest() : this(true)
        {
        }
        public CallbacksRequest(ICallbacksRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            Event = 10,
            Uri = 11,
        }
        #endregion
        #region Static Data
        public static bool IsValidEvent(global::Freshbooks.Library.Model.EventType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Event, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidUri(global::Freshbooks.Library.Model.Url value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Uri, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_event;
        private global::Freshbooks.Library.Model.EventType __fld_event;
        private bool __has_uri;
        private global::Freshbooks.Library.Model.Url __fld_uri;
        #endregion
        #region Instance Members
        public bool HasEvent
        {
            get { return __has_event; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_event = new global::Freshbooks.Library.Model.EventType("");
                __has_event = false;
            }
        }
        public global::Freshbooks.Library.Model.EventType Event
        {
            get
            {
                return __fld_event;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_event = value;
                __has_event = true;
            }
        }
        public bool HasUri
        {
            get { return __has_uri; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uri = new global::Freshbooks.Library.Model.Url("");
                __has_uri = false;
            }
        }
        public global::Freshbooks.Library.Model.Url Uri
        {
            get
            {
                return __fld_uri;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uri = value;
                __has_uri = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_event && !IsValidEvent(__fld_event, onError)) errorCount++;
            if (__has_uri && !IsValidUri(__fld_uri, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_event = false;
            __fld_event = new global::Freshbooks.Library.Model.EventType("");
            __has_uri = false;
            __fld_uri = new global::Freshbooks.Library.Model.Url("");
        }
        protected override object MemberwiseClone()
        {
            CallbacksRequest value = (CallbacksRequest)base.MemberwiseClone();
            return value;
        }
        public new CallbacksRequest Clone()
        {
            return (CallbacksRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICallbacksRequest) MergeFrom((ICallbacksRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ICallbacksRequest other)
        {
            if (other.HasEvent) Event = other.Event;
            if (other.HasUri) Uri = other.Uri;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "event", "uri" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_event = new global::Freshbooks.Library.Model.EventType(sbuilder.ToString());
                        __has_event = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_uri = new global::Freshbooks.Library.Model.Url(sbuilder.ToString());
                        __has_uri = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_event)
            {
                writer.WriteElementString("event", __fld_event.Value);
            }
            if (__has_uri)
            {
                writer.WriteElementString("uri", __fld_uri.Value);
            }
        }
        #endregion
    }
    #endregion
    #region CallbackService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICallbackService
    {
        global::Freshbooks.Library.Model.CallbackIdentity Create(global::Freshbooks.Library.Model.CallbackRequest callbackRequest);
        void Verify(global::Freshbooks.Library.Model.CallbackVerifyRequest callbackVerifyRequest);
        void ResendToken(global::Freshbooks.Library.Model.CallbackIdentity callbackIdentity);
        global::Freshbooks.Library.Model.CallbacksResponse List(global::Freshbooks.Library.Model.CallbacksRequest callbacksRequest);
        void Delete(global::Freshbooks.Library.Model.CallbackIdentity callbackIdentity);
    }
    [global::System.Xml.Serialization.XmlType("CallbackService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CallbackService : ICallbackService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public CallbackService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public CallbackService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.CallbackIdentity Create(global::Freshbooks.Library.Model.CallbackRequest callbackRequest)
        {
            global::Freshbooks.Library.Model.CallbackIdentity response = new global::Freshbooks.Library.Model.CallbackIdentity();
            Invoke("create", callbackRequest, response);
            return response;
        }
        public void Verify(global::Freshbooks.Library.Model.CallbackVerifyRequest callbackVerifyRequest)
        {
            Invoke("verify", callbackVerifyRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public void ResendToken(global::Freshbooks.Library.Model.CallbackIdentity callbackIdentity)
        {
            Invoke("resendToken", callbackIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.CallbacksResponse List(global::Freshbooks.Library.Model.CallbacksRequest callbacksRequest)
        {
            global::Freshbooks.Library.Model.CallbacksResponse response = new global::Freshbooks.Library.Model.CallbacksResponse();
            Invoke("list", callbacksRequest, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.CallbackIdentity callbackIdentity)
        {
            Invoke("delete", callbackIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly ICallbackService _dispatch;
            public Dispatch(ICallbackService dispatch)
                : this(dispatch, true) { }
            public Dispatch(ICallbackService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "list", "resendToken", "verify" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.CallbackRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.CallbackIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.CallbacksRequest)(object)request));
                        break;
                    }
                    case 3:
                    {
                        _dispatch.ResendToken((global::Freshbooks.Library.Model.CallbackIdentity)(object)request);
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Verify((global::Freshbooks.Library.Model.CallbackVerifyRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ICallbackService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(ICallbackService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(ICallbackService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "list", "resendToken", "verify" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.CallbackRequest request = new global::Freshbooks.Library.Model.CallbackRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.CallbackIdentity response = new global::Freshbooks.Library.Model.CallbackIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.CallbackIdentity request = new global::Freshbooks.Library.Model.CallbackIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.CallbacksRequest request = new global::Freshbooks.Library.Model.CallbacksRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.CallbacksResponse response = new global::Freshbooks.Library.Model.CallbacksResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.CallbackIdentity request = new global::Freshbooks.Library.Model.CallbackIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.CallbackVerifyRequest request = new global::Freshbooks.Library.Model.CallbackVerifyRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ICallbackService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
