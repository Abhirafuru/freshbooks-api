// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region TaxIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxIdentity : global::NClassify.Library.IMessage
    {
        bool HasTaxId { get; }
        global::Freshbooks.Library.Model.TaxId TaxId { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaxIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaxIdentity : ITaxIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly TaxIdentity _defaultInstance = new TaxIdentity(false);
        public static TaxIdentity DefaultInstance { get { return _defaultInstance; } }
        static TaxIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaxIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaxIdentity() : this(true)
        {
        }
        public TaxIdentity(ITaxIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TaxId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTaxId(global::Freshbooks.Library.Model.TaxId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaxId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_taxId;
        private global::Freshbooks.Library.Model.TaxId __fld_taxId;
        #endregion
        #region Instance Members
        public bool HasTaxId
        {
            get { return __has_taxId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taxId = new global::Freshbooks.Library.Model.TaxId(0UL);
                __has_taxId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaxId TaxId
        {
            get
            {
                return __fld_taxId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taxId = value;
                __has_taxId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_taxId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaxId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TaxId));
                errorCount++;
            }
            return errorCount;
        }
        public ITaxIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            TaxIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_taxId = false;
            __fld_taxId = new global::Freshbooks.Library.Model.TaxId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaxIdentity value = (TaxIdentity)base.MemberwiseClone();
            return value;
        }
        public TaxIdentity Clone()
        {
            return (TaxIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaxIdentity) MergeFrom((ITaxIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaxIdentity other)
        {
            if (other.HasTaxId) TaxId = other.TaxId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "tax_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaxIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taxId = new global::Freshbooks.Library.Model.TaxId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taxId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaxIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_taxId)
            {
                writer.WriteElementString("tax_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taxId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Tax
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITax : global::NClassify.Library.IMessage
    {
        bool HasTaxId { get; }
        global::Freshbooks.Library.Model.TaxId TaxId { get; }
        bool HasName { get; }
        string Name { get; }
        bool HasNumber { get; }
        string Number { get; }
        bool HasCompound { get; }
        bool Compound { get; }
        bool HasRate { get; }
        double Rate { get; }
    }
    [global::System.Xml.Serialization.XmlType("Tax")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Tax : ITax, global::NClassify.Library.IBuilder
    {
        private static readonly Tax _defaultInstance = new Tax(false);
        public static Tax DefaultInstance { get { return _defaultInstance; } }
        static Tax()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Tax(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Tax() : this(true)
        {
        }
        public Tax(ITax copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TaxId = 1,
            Name = 10,
            Number = 11,
            Compound = 21,
            Rate = 22,
        }
        #endregion
        #region Static Data
        public static bool IsValidTaxId(global::Freshbooks.Library.Model.TaxId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaxId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            if (value.Length < 1)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustBeLongerThan, TypeFields.Name, 1));
                return false;
            }
            if (value.Length > 15)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustBeShorterThan, TypeFields.Name, 15));
                return false;
            }
            return true;
        }
        public static bool IsValidNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Number, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Number));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_taxId;
        private global::Freshbooks.Library.Model.TaxId __fld_taxId;
        private bool __has_name;
        private string __fld_name;
        private bool __has_number;
        private string __fld_number;
        private bool __has_compound;
        private bool __fld_compound;
        private bool __has_rate;
        private double __fld_rate;
        #endregion
        #region Instance Members
        public bool HasTaxId
        {
            get { return __has_taxId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taxId = new global::Freshbooks.Library.Model.TaxId(0UL);
                __has_taxId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaxId TaxId
        {
            get
            {
                return __fld_taxId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taxId = value;
                __has_taxId = true;
            }
        }
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasNumber
        {
            get { return __has_number; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = "";
                __has_number = false;
            }
        }
        public string Number
        {
            get
            {
                return __fld_number;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Number");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = value;
                __has_number = true;
            }
        }
        public bool HasCompound
        {
            get { return __has_compound; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_compound = false;
                __has_compound = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Compound
        {
            get
            {
                return __fld_compound;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_compound = value;
                __has_compound = true;
            }
        }
        public bool HasRate
        {
            get { return __has_rate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = 0D;
                __has_rate = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Rate
        {
            get
            {
                return __fld_rate;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = value;
                __has_rate = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_taxId && !IsValidTaxId(__fld_taxId, onError)) errorCount++;
            if (!__has_name)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Name));
                errorCount++;
            }
            if (__has_number && !IsValidNumber(__fld_number, onError)) errorCount++;
            return errorCount;
        }
        public ITax AsReadOnly()
        {
            if (_readOnly) return this;
            Tax copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
            __has_number = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_taxId = false;
            __fld_taxId = new global::Freshbooks.Library.Model.TaxId(0UL);
            __has_name = false;
            __fld_name = "";
            __has_number = false;
            __fld_number = "";
            __has_compound = false;
            __fld_compound = false;
            __has_rate = false;
            __fld_rate = 0D;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Tax value = (Tax)base.MemberwiseClone();
            return value;
        }
        public Tax Clone()
        {
            return (Tax)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITax) MergeFrom((ITax)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITax other)
        {
            if (other.HasTaxId) TaxId = other.TaxId;
            if (other.HasName) Name = other.Name;
            if (other.HasNumber) Number = other.Number;
            if (other.HasCompound) Compound = other.Compound;
            if (other.HasRate) Rate = other.Rate;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "compound", "name", "number", "rate", "tax_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Tax", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_compound = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_compound = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_number = sbuilder.ToString();
                        __has_number = true;
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_rate = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_rate = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taxId = new global::Freshbooks.Library.Model.TaxId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taxId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Tax", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_taxId)
            {
                writer.WriteElementString("tax_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taxId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
            if (__has_number)
            {
                writer.WriteElementString("number", __fld_number);
            }
            if (__has_compound)
            {
                writer.WriteElementString("compound", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_compound, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_rate)
            {
                writer.WriteElementString("rate", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_rate, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TaxRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxRequest : global::NClassify.Library.IMessage
    {
        bool HasTax { get; }
        global::Freshbooks.Library.Model.Tax Tax { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaxRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaxRequest : ITaxRequest, global::NClassify.Library.IBuilder
    {
        private static readonly TaxRequest _defaultInstance = new TaxRequest(false);
        public static TaxRequest DefaultInstance { get { return _defaultInstance; } }
        static TaxRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaxRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaxRequest() : this(true)
        {
        }
        public TaxRequest(ITaxRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Tax = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTax(global::Freshbooks.Library.Model.Tax value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tax));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Tax, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_tax;
        private global::Freshbooks.Library.Model.Tax __fld_tax;
        #endregion
        #region Instance Members
        public bool HasTax
        {
            get { return __has_tax; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax = global::Freshbooks.Library.Model.Tax.DefaultInstance;
                __has_tax = false;
            }
        }
        public global::Freshbooks.Library.Model.Tax Tax
        {
            get
            {
                return __fld_tax;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tax");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax = value;
                __has_tax = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_tax)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Tax));
                errorCount++;
            }
            return errorCount;
        }
        public ITaxRequest AsReadOnly()
        {
            if (_readOnly) return this;
            TaxRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_tax.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_tax = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_tax = false;
            __fld_tax = global::Freshbooks.Library.Model.Tax.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaxRequest value = (TaxRequest)base.MemberwiseClone();
            value.__fld_tax = (global::Freshbooks.Library.Model.Tax)value.__fld_tax.Clone();
            return value;
        }
        public TaxRequest Clone()
        {
            return (TaxRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaxRequest) MergeFrom((ITaxRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaxRequest other)
        {
            if (other.HasTax) Tax = (global::Freshbooks.Library.Model.Tax)other.Tax.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "tax" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaxRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Tax value = __fld_tax;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Tax.DefaultInstance) ? new global::Freshbooks.Library.Model.Tax() : new global::Freshbooks.Library.Model.Tax(__fld_tax);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_tax = value;
                        __has_tax = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaxRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_tax)
            {
                __fld_tax.WriteXml("tax", writer);
            }
        }
        #endregion
    }
    #endregion
    #region TaxResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxResponse : global::NClassify.Library.IMessage
    {
        bool HasTax { get; }
        global::Freshbooks.Library.Model.Tax Tax { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaxResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaxResponse : ITaxResponse, global::NClassify.Library.IBuilder
    {
        private static readonly TaxResponse _defaultInstance = new TaxResponse(false);
        public static TaxResponse DefaultInstance { get { return _defaultInstance; } }
        static TaxResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaxResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaxResponse() : this(true)
        {
        }
        public TaxResponse(ITaxResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Tax = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTax(global::Freshbooks.Library.Model.Tax value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tax));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Tax, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_tax;
        private global::Freshbooks.Library.Model.Tax __fld_tax;
        #endregion
        #region Instance Members
        public bool HasTax
        {
            get { return __has_tax; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax = global::Freshbooks.Library.Model.Tax.DefaultInstance;
                __has_tax = false;
            }
        }
        public global::Freshbooks.Library.Model.Tax Tax
        {
            get
            {
                return __fld_tax;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tax");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax = value;
                __has_tax = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_tax)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Tax));
                errorCount++;
            }
            return errorCount;
        }
        public ITaxResponse AsReadOnly()
        {
            if (_readOnly) return this;
            TaxResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_tax.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_tax = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_tax = false;
            __fld_tax = global::Freshbooks.Library.Model.Tax.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaxResponse value = (TaxResponse)base.MemberwiseClone();
            value.__fld_tax = (global::Freshbooks.Library.Model.Tax)value.__fld_tax.Clone();
            return value;
        }
        public TaxResponse Clone()
        {
            return (TaxResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaxResponse) MergeFrom((ITaxResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaxResponse other)
        {
            if (other.HasTax) Tax = (global::Freshbooks.Library.Model.Tax)other.Tax.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "tax" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaxResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Tax value = __fld_tax;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Tax.DefaultInstance) ? new global::Freshbooks.Library.Model.Tax() : new global::Freshbooks.Library.Model.Tax(__fld_tax);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_tax = value;
                        __has_tax = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaxResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_tax)
            {
                __fld_tax.WriteXml("tax", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Taxes
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxes : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Tax> TaxList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Taxes")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Taxes : global::Freshbooks.Library.Model.PaginatedResponse, ITaxes, global::NClassify.Library.IBuilder
    {
        private static readonly Taxes _defaultInstance = new Taxes(false);
        public static new Taxes DefaultInstance { get { return _defaultInstance; } }
        static Taxes()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Taxes(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Taxes() : this(true)
        {
        }
        public Taxes(ITaxes copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            TaxList = 10,
        }
        #endregion
        #region _TaxList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _TaxList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Tax>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("TaxList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Tax> _contents;
            public _TaxList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Tax>();
            }
            public _TaxList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Tax> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Tax>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Tax item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Tax)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Tax> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Tax this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Tax value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Tax> value)
            {
                foreach (global::Freshbooks.Library.Model.Tax item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Tax value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Tax item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Tax item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Tax item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Tax[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _TaxList Clone()
            {
                return _readOnly ? this : new _TaxList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Tax> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidTaxList(global::Freshbooks.Library.Model.Tax value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaxList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TaxList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaxList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _TaxList __fld_tax;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Tax> TaxList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Tax>(__fld_tax);
                return __fld_tax;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax = new _TaxList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Tax item in __fld_tax)
            {
                if (!IsValidTaxList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_tax.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_tax = new _TaxList();
        }
        protected override object MemberwiseClone()
        {
            Taxes value = (Taxes)base.MemberwiseClone();
            value.__fld_tax = value.__fld_tax.Clone();
            return value;
        }
        public new Taxes Clone()
        {
            return (Taxes)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaxes) MergeFrom((ITaxes)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ITaxes other)
        {
            foreach (global::Freshbooks.Library.Model.Tax item in other.TaxList)
                __fld_tax.Add((global::Freshbooks.Library.Model.Tax)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "tax" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Tax child = new global::Freshbooks.Library.Model.Tax();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_tax.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region TaxesResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxesResponse : global::NClassify.Library.IMessage
    {
        bool HasTaxes { get; }
        global::Freshbooks.Library.Model.Taxes Taxes { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaxesResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaxesResponse : ITaxesResponse, global::NClassify.Library.IBuilder
    {
        private static readonly TaxesResponse _defaultInstance = new TaxesResponse(false);
        public static TaxesResponse DefaultInstance { get { return _defaultInstance; } }
        static TaxesResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaxesResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaxesResponse() : this(true)
        {
        }
        public TaxesResponse(ITaxesResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Taxes = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTaxes(global::Freshbooks.Library.Model.Taxes value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Taxes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Taxes));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Taxes, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_taxes;
        private global::Freshbooks.Library.Model.Taxes __fld_taxes;
        #endregion
        #region Instance Members
        public bool HasTaxes
        {
            get { return __has_taxes; }
        }
        public global::Freshbooks.Library.Model.Taxes Taxes
        {
            get
            {
                return __fld_taxes;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Taxes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taxes = value;
                __has_taxes = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_taxes)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Taxes, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Taxes));
                errorCount++;
            }
            return errorCount;
        }
        public ITaxesResponse AsReadOnly()
        {
            if (_readOnly) return this;
            TaxesResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_taxes.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_taxes = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_taxes = false;
            __fld_taxes = global::Freshbooks.Library.Model.Taxes.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaxesResponse value = (TaxesResponse)base.MemberwiseClone();
            value.__fld_taxes = (global::Freshbooks.Library.Model.Taxes)value.__fld_taxes.Clone();
            return value;
        }
        public TaxesResponse Clone()
        {
            return (TaxesResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaxesResponse) MergeFrom((ITaxesResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaxesResponse other)
        {
            if (other.HasTaxes) Taxes = (global::Freshbooks.Library.Model.Taxes)other.Taxes.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "taxes" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaxesResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Taxes value = __fld_taxes;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Taxes.DefaultInstance) ? new global::Freshbooks.Library.Model.Taxes() : new global::Freshbooks.Library.Model.Taxes(__fld_taxes);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_taxes = value;
                        __has_taxes = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaxesResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region TaxesRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxesRequest : global::NClassify.Library.IMessage
    {
        bool HasCompound { get; }
        bool Compound { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaxesRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaxesRequest : global::Freshbooks.Library.Model.PaginatedRequest, ITaxesRequest, global::NClassify.Library.IBuilder
    {
        private static readonly TaxesRequest _defaultInstance = new TaxesRequest(false);
        public static new TaxesRequest DefaultInstance { get { return _defaultInstance; } }
        static TaxesRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaxesRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public TaxesRequest() : this(true)
        {
        }
        public TaxesRequest(ITaxesRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            Compound = 10,
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        private bool __has_compound;
        private bool __fld_compound;
        #endregion
        #region Instance Members
        public bool HasCompound
        {
            get { return __has_compound; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_compound = false;
                __has_compound = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Compound
        {
            get
            {
                return __fld_compound;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_compound = value;
                __has_compound = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_compound = false;
            __fld_compound = false;
        }
        protected override object MemberwiseClone()
        {
            TaxesRequest value = (TaxesRequest)base.MemberwiseClone();
            return value;
        }
        public new TaxesRequest Clone()
        {
            return (TaxesRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaxesRequest) MergeFrom((ITaxesRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ITaxesRequest other)
        {
            if (other.HasCompound) Compound = other.Compound;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "compound" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_compound = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_compound = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_compound)
            {
                writer.WriteElementString("compound", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_compound, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TaxService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaxService
    {
        global::Freshbooks.Library.Model.TaxIdentity Create(global::Freshbooks.Library.Model.TaxRequest taxRequest);
        void Update(global::Freshbooks.Library.Model.TaxRequest taxRequest);
        global::Freshbooks.Library.Model.TaxResponse Get(global::Freshbooks.Library.Model.TaxIdentity taxIdentity);
        void Delete(global::Freshbooks.Library.Model.TaxIdentity taxIdentity);
        global::Freshbooks.Library.Model.TaxesResponse List(global::Freshbooks.Library.Model.TaxesRequest taxesRequest);
    }
    [global::System.Xml.Serialization.XmlType("TaxService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaxService : ITaxService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public TaxService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public TaxService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.TaxIdentity Create(global::Freshbooks.Library.Model.TaxRequest taxRequest)
        {
            global::Freshbooks.Library.Model.TaxIdentity response = new global::Freshbooks.Library.Model.TaxIdentity();
            Invoke("create", taxRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.TaxRequest taxRequest)
        {
            Invoke("update", taxRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.TaxResponse Get(global::Freshbooks.Library.Model.TaxIdentity taxIdentity)
        {
            global::Freshbooks.Library.Model.TaxResponse response = new global::Freshbooks.Library.Model.TaxResponse();
            Invoke("get", taxIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.TaxIdentity taxIdentity)
        {
            Invoke("delete", taxIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.TaxesResponse List(global::Freshbooks.Library.Model.TaxesRequest taxesRequest)
        {
            global::Freshbooks.Library.Model.TaxesResponse response = new global::Freshbooks.Library.Model.TaxesResponse();
            Invoke("list", taxesRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly ITaxService _dispatch;
            public Dispatch(ITaxService dispatch)
                : this(dispatch, true) { }
            public Dispatch(ITaxService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.TaxRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.TaxIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.TaxIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.TaxesRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.TaxRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ITaxService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(ITaxService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(ITaxService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TaxRequest request = new global::Freshbooks.Library.Model.TaxRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.TaxIdentity response = new global::Freshbooks.Library.Model.TaxIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.TaxIdentity request = new global::Freshbooks.Library.Model.TaxIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.TaxIdentity request = new global::Freshbooks.Library.Model.TaxIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.TaxResponse response = new global::Freshbooks.Library.Model.TaxResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.TaxesRequest request = new global::Freshbooks.Library.Model.TaxesRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.TaxesResponse response = new global::Freshbooks.Library.Model.TaxesResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.TaxRequest request = new global::Freshbooks.Library.Model.TaxRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ITaxService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
