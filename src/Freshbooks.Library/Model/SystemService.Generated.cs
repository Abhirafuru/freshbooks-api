// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region Address
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IAddress : global::NClassify.Library.IMessage
    {
        bool HasStreet1 { get; }
        string Street1 { get; }
        bool HasStreet2 { get; }
        string Street2 { get; }
        bool HasCity { get; }
        string City { get; }
        bool HasProvince { get; }
        string Province { get; }
        bool HasPostalCode { get; }
        string PostalCode { get; }
        bool HasCountry { get; }
        string Country { get; }
    }
    [global::System.Xml.Serialization.XmlType("Address")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Address : IAddress, global::NClassify.Library.IBuilder
    {
        private static readonly Address _defaultInstance = new Address(false);
        public static Address DefaultInstance { get { return _defaultInstance; } }
        static Address()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Address(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Address() : this(true)
        {
        }
        public Address(IAddress copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Street1 = 7,
            Street2 = 8,
            City = 9,
            Province = 10,
            PostalCode = 11,
            Country = 12,
        }
        #endregion
        #region Static Data
        public static bool IsValidStreet1(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Street1, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Street1));
                return false;
            }
            return true;
        }
        public static bool IsValidStreet2(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Street2, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Street2));
                return false;
            }
            return true;
        }
        public static bool IsValidCity(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.City, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.City));
                return false;
            }
            return true;
        }
        public static bool IsValidProvince(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Province, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Province));
                return false;
            }
            return true;
        }
        public static bool IsValidPostalCode(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PostalCode, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PostalCode));
                return false;
            }
            return true;
        }
        public static bool IsValidCountry(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Country, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Country));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_street1;
        private string __fld_street1;
        private bool __has_street2;
        private string __fld_street2;
        private bool __has_city;
        private string __fld_city;
        private bool __has_province;
        private string __fld_province;
        private bool __has_postalCode;
        private string __fld_postalCode;
        private bool __has_country;
        private string __fld_country;
        #endregion
        #region Instance Members
        public bool HasStreet1
        {
            get { return __has_street1; }
        }
        public string Street1
        {
            get
            {
                return __fld_street1;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Street1");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_street1 = value;
                __has_street1 = true;
            }
        }
        public bool HasStreet2
        {
            get { return __has_street2; }
        }
        public string Street2
        {
            get
            {
                return __fld_street2;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Street2");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_street2 = value;
                __has_street2 = true;
            }
        }
        public bool HasCity
        {
            get { return __has_city; }
        }
        public string City
        {
            get
            {
                return __fld_city;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("City");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_city = value;
                __has_city = true;
            }
        }
        public bool HasProvince
        {
            get { return __has_province; }
        }
        public string Province
        {
            get
            {
                return __fld_province;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Province");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_province = value;
                __has_province = true;
            }
        }
        public bool HasPostalCode
        {
            get { return __has_postalCode; }
        }
        public string PostalCode
        {
            get
            {
                return __fld_postalCode;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("PostalCode");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_postalCode = value;
                __has_postalCode = true;
            }
        }
        public bool HasCountry
        {
            get { return __has_country; }
        }
        public string Country
        {
            get
            {
                return __fld_country;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Country");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_country = value;
                __has_country = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_street1 && !IsValidStreet1(__fld_street1, onError)) errorCount++;
            if (__has_street2 && !IsValidStreet2(__fld_street2, onError)) errorCount++;
            if (__has_city && !IsValidCity(__fld_city, onError)) errorCount++;
            if (__has_province && !IsValidProvince(__fld_province, onError)) errorCount++;
            if (__has_postalCode && !IsValidPostalCode(__fld_postalCode, onError)) errorCount++;
            if (__has_country && !IsValidCountry(__fld_country, onError)) errorCount++;
            return errorCount;
        }
        public IAddress AsReadOnly()
        {
            if (_readOnly) return this;
            Address copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_street1 = true;
            __has_street2 = true;
            __has_city = true;
            __has_province = true;
            __has_postalCode = true;
            __has_country = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_street1 = false;
            __fld_street1 = "";
            __has_street2 = false;
            __fld_street2 = "";
            __has_city = false;
            __fld_city = "";
            __has_province = false;
            __fld_province = "";
            __has_postalCode = false;
            __fld_postalCode = "";
            __has_country = false;
            __fld_country = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Address value = (Address)base.MemberwiseClone();
            return value;
        }
        public Address Clone()
        {
            return (Address)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IAddress) MergeFrom((IAddress)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IAddress other)
        {
            if (other.HasStreet1) Street1 = other.Street1;
            if (other.HasStreet2) Street2 = other.Street2;
            if (other.HasCity) City = other.City;
            if (other.HasProvince) Province = other.Province;
            if (other.HasPostalCode) PostalCode = other.PostalCode;
            if (other.HasCountry) Country = other.Country;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "city", "country", "postal_code", "province", "street1", "street2" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Address", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_city = sbuilder.ToString();
                        __has_city = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_country = sbuilder.ToString();
                        __has_country = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_postalCode = sbuilder.ToString();
                        __has_postalCode = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_province = sbuilder.ToString();
                        __has_province = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_street1 = sbuilder.ToString();
                        __has_street1 = true;
                        break;
                    }
                    case 5:
                    {
                        __fld_street2 = sbuilder.ToString();
                        __has_street2 = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Address", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ApiInformation
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IApiInformation : global::NClassify.Library.IMessage
    {
        bool HasRequests { get; }
        long Requests { get; }
        bool HasRequestLimit { get; }
        long RequestLimit { get; }
    }
    [global::System.Xml.Serialization.XmlType("ApiInformation")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ApiInformation : IApiInformation, global::NClassify.Library.IBuilder
    {
        private static readonly ApiInformation _defaultInstance = new ApiInformation(false);
        public static ApiInformation DefaultInstance { get { return _defaultInstance; } }
        static ApiInformation()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ApiInformation(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ApiInformation() : this(true)
        {
        }
        public ApiInformation(IApiInformation copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Requests = 15,
            RequestLimit = 16,
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_requests;
        private long __fld_requests;
        private bool __has_requestLimit;
        private long __fld_requestLimit;
        #endregion
        #region Instance Members
        public bool HasRequests
        {
            get { return __has_requests; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0L)]
        public long Requests
        {
            get
            {
                return __fld_requests;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_requests = value;
                __has_requests = true;
            }
        }
        public bool HasRequestLimit
        {
            get { return __has_requestLimit; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0L)]
        public long RequestLimit
        {
            get
            {
                return __fld_requestLimit;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_requestLimit = value;
                __has_requestLimit = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            return errorCount;
        }
        public IApiInformation AsReadOnly()
        {
            if (_readOnly) return this;
            ApiInformation copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_requests = false;
            __fld_requests = 0L;
            __has_requestLimit = false;
            __fld_requestLimit = 0L;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ApiInformation value = (ApiInformation)base.MemberwiseClone();
            return value;
        }
        public ApiInformation Clone()
        {
            return (ApiInformation)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IApiInformation) MergeFrom((IApiInformation)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IApiInformation other)
        {
            if (other.HasRequests) Requests = other.Requests;
            if (other.HasRequestLimit) RequestLimit = other.RequestLimit;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "request_limit", "requests" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ApiInformation", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_requestLimit = global::NClassify.Library.TypeConverter.Instance.ParseInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_requestLimit = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_requests = global::NClassify.Library.TypeConverter.Instance.ParseInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_requests = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ApiInformation", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region SystemInformation
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ISystemInformation : global::NClassify.Library.IMessage
    {
        bool HasCompanyName { get; }
        string CompanyName { get; }
        bool HasProfession { get; }
        string Profession { get; }
        bool HasAddress { get; }
        global::Freshbooks.Library.Model.Address Address { get; }
        bool HasApi { get; }
        global::Freshbooks.Library.Model.ApiInformation Api { get; }
    }
    [global::System.Xml.Serialization.XmlType("SystemInformation")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class SystemInformation : ISystemInformation, global::NClassify.Library.IBuilder
    {
        private static readonly SystemInformation _defaultInstance = new SystemInformation(false);
        public static SystemInformation DefaultInstance { get { return _defaultInstance; } }
        static SystemInformation()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected SystemInformation(bool initalize)
        {
            if (initalize) Initialize();
        }
        public SystemInformation() : this(true)
        {
        }
        public SystemInformation(ISystemInformation copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CompanyName = 4,
            Profession = 5,
            Address = 6,
            Api = 14,
        }
        #endregion
        #region Static Data
        public static bool IsValidCompanyName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CompanyName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.CompanyName));
                return false;
            }
            return true;
        }
        public static bool IsValidProfession(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Profession, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Profession));
                return false;
            }
            return true;
        }
        public static bool IsValidAddress(global::Freshbooks.Library.Model.Address value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Address, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Address));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Address, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidApi(global::Freshbooks.Library.Model.ApiInformation value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Api, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Api));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Api, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_companyName;
        private string __fld_companyName;
        private bool __has_profession;
        private string __fld_profession;
        private bool __has_address;
        private global::Freshbooks.Library.Model.Address __fld_address;
        private bool __has_api;
        private global::Freshbooks.Library.Model.ApiInformation __fld_api;
        #endregion
        #region Instance Members
        public bool HasCompanyName
        {
            get { return __has_companyName; }
        }
        public string CompanyName
        {
            get
            {
                return __fld_companyName;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("CompanyName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_companyName = value;
                __has_companyName = true;
            }
        }
        public bool HasProfession
        {
            get { return __has_profession; }
        }
        public string Profession
        {
            get
            {
                return __fld_profession;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Profession");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_profession = value;
                __has_profession = true;
            }
        }
        public bool HasAddress
        {
            get { return __has_address; }
        }
        public global::Freshbooks.Library.Model.Address Address
        {
            get
            {
                return __fld_address;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Address");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_address = value;
                __has_address = true;
            }
        }
        public bool HasApi
        {
            get { return __has_api; }
        }
        public global::Freshbooks.Library.Model.ApiInformation Api
        {
            get
            {
                return __fld_api;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Api");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_api = value;
                __has_api = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_companyName && !IsValidCompanyName(__fld_companyName, onError)) errorCount++;
            if (__has_profession && !IsValidProfession(__fld_profession, onError)) errorCount++;
            if (!__has_address)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Address, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Address));
                errorCount++;
            }
            if (!__has_api)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Api, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Api));
                errorCount++;
            }
            return errorCount;
        }
        public ISystemInformation AsReadOnly()
        {
            if (_readOnly) return this;
            SystemInformation copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_address.MakeReadOnly();
            __fld_api.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_companyName = true;
            __has_profession = true;
            __has_address = true;
            __has_api = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_companyName = false;
            __fld_companyName = "";
            __has_profession = false;
            __fld_profession = "";
            __has_address = false;
            __fld_address = global::Freshbooks.Library.Model.Address.DefaultInstance;
            __has_api = false;
            __fld_api = global::Freshbooks.Library.Model.ApiInformation.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            SystemInformation value = (SystemInformation)base.MemberwiseClone();
            value.__fld_address = (global::Freshbooks.Library.Model.Address)value.__fld_address.Clone();
            value.__fld_api = (global::Freshbooks.Library.Model.ApiInformation)value.__fld_api.Clone();
            return value;
        }
        public SystemInformation Clone()
        {
            return (SystemInformation)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ISystemInformation) MergeFrom((ISystemInformation)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ISystemInformation other)
        {
            if (other.HasCompanyName) CompanyName = other.CompanyName;
            if (other.HasProfession) Profession = other.Profession;
            if (other.HasAddress) Address = (global::Freshbooks.Library.Model.Address)other.Address.Clone();
            if (other.HasApi) Api = (global::Freshbooks.Library.Model.ApiInformation)other.Api.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "address", "api", "company_name", "profession" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true, true, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SystemInformation", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Address value = __fld_address;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Address.DefaultInstance) ? new global::Freshbooks.Library.Model.Address() : new global::Freshbooks.Library.Model.Address(__fld_address);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_address = value;
                        __has_address = true;
                        break;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.ApiInformation value = __fld_api;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.ApiInformation.DefaultInstance) ? new global::Freshbooks.Library.Model.ApiInformation() : new global::Freshbooks.Library.Model.ApiInformation(__fld_api);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_api = value;
                        __has_api = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 2:
                    {
                        __fld_companyName = sbuilder.ToString();
                        __has_companyName = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_profession = sbuilder.ToString();
                        __has_profession = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SystemInformation", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region SystemResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ISystemResponse : global::NClassify.Library.IMessage
    {
        bool HasSystem { get; }
        global::Freshbooks.Library.Model.SystemInformation System { get; }
    }
    [global::System.Xml.Serialization.XmlType("SystemResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class SystemResponse : ISystemResponse, global::NClassify.Library.IBuilder
    {
        private static readonly SystemResponse _defaultInstance = new SystemResponse(false);
        public static SystemResponse DefaultInstance { get { return _defaultInstance; } }
        static SystemResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected SystemResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public SystemResponse() : this(true)
        {
        }
        public SystemResponse(ISystemResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            System = 14,
        }
        #endregion
        #region Static Data
        public static bool IsValidSystem(global::Freshbooks.Library.Model.SystemInformation value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.System, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.System));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.System, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_system;
        private global::Freshbooks.Library.Model.SystemInformation __fld_system;
        #endregion
        #region Instance Members
        public bool HasSystem
        {
            get { return __has_system; }
        }
        public global::Freshbooks.Library.Model.SystemInformation System
        {
            get
            {
                return __fld_system;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("System");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_system = value;
                __has_system = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_system)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.System, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.System));
                errorCount++;
            }
            return errorCount;
        }
        public ISystemResponse AsReadOnly()
        {
            if (_readOnly) return this;
            SystemResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_system.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_system = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_system = false;
            __fld_system = global::Freshbooks.Library.Model.SystemInformation.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            SystemResponse value = (SystemResponse)base.MemberwiseClone();
            value.__fld_system = (global::Freshbooks.Library.Model.SystemInformation)value.__fld_system.Clone();
            return value;
        }
        public SystemResponse Clone()
        {
            return (SystemResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ISystemResponse) MergeFrom((ISystemResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ISystemResponse other)
        {
            if (other.HasSystem) System = (global::Freshbooks.Library.Model.SystemInformation)other.System.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "system" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SystemResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.SystemInformation value = __fld_system;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.SystemInformation.DefaultInstance) ? new global::Freshbooks.Library.Model.SystemInformation() : new global::Freshbooks.Library.Model.SystemInformation(__fld_system);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_system = value;
                        __has_system = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SystemResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region SystemService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ISystemService
    {
        global::Freshbooks.Library.Model.SystemResponse Current();
    }
    [global::System.Xml.Serialization.XmlType("SystemService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class SystemService : ISystemService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public SystemService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public SystemService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.SystemResponse Current()
        {
            global::Freshbooks.Library.Model.SystemResponse response = new global::Freshbooks.Library.Model.SystemResponse();
            Invoke("current", global::NClassify.Library.EmptyMessage.DefaultInstance, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly ISystemService _dispatch;
            public Dispatch(ISystemService dispatch)
                : this(dispatch, true) { }
            public Dispatch(ISystemService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "current" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Current());
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ISystemService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(ISystemService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(ISystemService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "current" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.SystemResponse response = new global::Freshbooks.Library.Model.SystemResponse();
                        _dispatch.CallMethod(methodName, global::NClassify.Library.EmptyMessage.DefaultInstance, response);
                        return response;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ISystemService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
