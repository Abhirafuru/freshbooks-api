// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region TaskIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaskIdentity : global::NClassify.Library.IMessage
    {
        bool HasTaskId { get; }
        global::Freshbooks.Library.Model.TaskId TaskId { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaskIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaskIdentity : ITaskIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly TaskIdentity _defaultInstance = new TaskIdentity(false);
        public static TaskIdentity DefaultInstance { get { return _defaultInstance; } }
        static TaskIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaskIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaskIdentity() : this(true)
        {
        }
        public TaskIdentity(ITaskIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TaskId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTaskId(global::Freshbooks.Library.Model.TaskId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_taskId;
        private global::Freshbooks.Library.Model.TaskId __fld_taskId;
        #endregion
        #region Instance Members
        public bool HasTaskId
        {
            get { return __has_taskId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
                __has_taskId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaskId TaskId
        {
            get
            {
                return __fld_taskId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = value;
                __has_taskId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_taskId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TaskId));
                errorCount++;
            }
            return errorCount;
        }
        public ITaskIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            TaskIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_taskId = false;
            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaskIdentity value = (TaskIdentity)base.MemberwiseClone();
            return value;
        }
        public TaskIdentity Clone()
        {
            return (TaskIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaskIdentity) MergeFrom((ITaskIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaskIdentity other)
        {
            if (other.HasTaskId) TaskId = other.TaskId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "task_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaskIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taskId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaskIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_taskId)
            {
                writer.WriteElementString("task_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taskId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Task
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITask : global::NClassify.Library.IMessage
    {
        bool HasTaskId { get; }
        global::Freshbooks.Library.Model.TaskId TaskId { get; }
        bool HasName { get; }
        string Name { get; }
        bool HasDescription { get; }
        string Description { get; }
        bool HasBillable { get; }
        bool Billable { get; }
        bool HasRate { get; }
        double Rate { get; }
    }
    [global::System.Xml.Serialization.XmlType("Task")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Task : ITask, global::NClassify.Library.IBuilder
    {
        private static readonly Task _defaultInstance = new Task(false);
        public static Task DefaultInstance { get { return _defaultInstance; } }
        static Task()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Task(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Task() : this(true)
        {
        }
        public Task(ITask copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TaskId = 1,
            Name = 10,
            Description = 11,
            Billable = 21,
            Rate = 22,
        }
        #endregion
        #region Static Data
        public static bool IsValidTaskId(global::Freshbooks.Library.Model.TaskId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        public static bool IsValidDescription(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Description, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Description));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_taskId;
        private global::Freshbooks.Library.Model.TaskId __fld_taskId;
        private bool __has_name;
        private string __fld_name;
        private bool __has_description;
        private string __fld_description;
        private bool __has_billable;
        private bool __fld_billable;
        private bool __has_rate;
        private double __fld_rate;
        #endregion
        #region Instance Members
        public bool HasTaskId
        {
            get { return __has_taskId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
                __has_taskId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaskId TaskId
        {
            get
            {
                return __fld_taskId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = value;
                __has_taskId = true;
            }
        }
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasDescription
        {
            get { return __has_description; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = "";
                __has_description = false;
            }
        }
        public string Description
        {
            get
            {
                return __fld_description;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Description");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = value;
                __has_description = true;
            }
        }
        public bool HasBillable
        {
            get { return __has_billable; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_billable = false;
                __has_billable = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Billable
        {
            get
            {
                return __fld_billable;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_billable = value;
                __has_billable = true;
            }
        }
        public bool HasRate
        {
            get { return __has_rate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = 0D;
                __has_rate = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Rate
        {
            get
            {
                return __fld_rate;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_rate = value;
                __has_rate = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_taskId && !IsValidTaskId(__fld_taskId, onError)) errorCount++;
            if (!__has_name)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Name));
                errorCount++;
            }
            if (__has_description && !IsValidDescription(__fld_description, onError)) errorCount++;
            return errorCount;
        }
        public ITask AsReadOnly()
        {
            if (_readOnly) return this;
            Task copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
            __has_description = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_taskId = false;
            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
            __has_name = false;
            __fld_name = "";
            __has_description = false;
            __fld_description = "";
            __has_billable = false;
            __fld_billable = false;
            __has_rate = false;
            __fld_rate = 0D;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Task value = (Task)base.MemberwiseClone();
            return value;
        }
        public Task Clone()
        {
            return (Task)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITask) MergeFrom((ITask)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITask other)
        {
            if (other.HasTaskId) TaskId = other.TaskId;
            if (other.HasName) Name = other.Name;
            if (other.HasDescription) Description = other.Description;
            if (other.HasBillable) Billable = other.Billable;
            if (other.HasRate) Rate = other.Rate;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "billable", "description", "name", "rate", "task_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Task", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_billable = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_billable = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_description = sbuilder.ToString();
                        __has_description = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_rate = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_rate = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taskId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Task", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_taskId)
            {
                writer.WriteElementString("task_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taskId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
            if (__has_description)
            {
                writer.WriteElementString("description", __fld_description);
            }
            if (__has_billable)
            {
                writer.WriteElementString("billable", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_billable, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_rate)
            {
                writer.WriteElementString("rate", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_rate, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TaskRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaskRequest : global::NClassify.Library.IMessage
    {
        bool HasTask { get; }
        global::Freshbooks.Library.Model.Task Task { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaskRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaskRequest : ITaskRequest, global::NClassify.Library.IBuilder
    {
        private static readonly TaskRequest _defaultInstance = new TaskRequest(false);
        public static TaskRequest DefaultInstance { get { return _defaultInstance; } }
        static TaskRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaskRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaskRequest() : this(true)
        {
        }
        public TaskRequest(ITaskRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Task = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTask(global::Freshbooks.Library.Model.Task value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Task, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Task));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Task, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_task;
        private global::Freshbooks.Library.Model.Task __fld_task;
        #endregion
        #region Instance Members
        public bool HasTask
        {
            get { return __has_task; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_task = global::Freshbooks.Library.Model.Task.DefaultInstance;
                __has_task = false;
            }
        }
        public global::Freshbooks.Library.Model.Task Task
        {
            get
            {
                return __fld_task;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Task");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_task = value;
                __has_task = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_task)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Task, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Task));
                errorCount++;
            }
            return errorCount;
        }
        public ITaskRequest AsReadOnly()
        {
            if (_readOnly) return this;
            TaskRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_task.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_task = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_task = false;
            __fld_task = global::Freshbooks.Library.Model.Task.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaskRequest value = (TaskRequest)base.MemberwiseClone();
            value.__fld_task = (global::Freshbooks.Library.Model.Task)value.__fld_task.Clone();
            return value;
        }
        public TaskRequest Clone()
        {
            return (TaskRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaskRequest) MergeFrom((ITaskRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaskRequest other)
        {
            if (other.HasTask) Task = (global::Freshbooks.Library.Model.Task)other.Task.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "task" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaskRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Task value = __fld_task;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Task.DefaultInstance) ? new global::Freshbooks.Library.Model.Task() : new global::Freshbooks.Library.Model.Task(__fld_task);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_task = value;
                        __has_task = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaskRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_task)
            {
                __fld_task.WriteXml("task", writer);
            }
        }
        #endregion
    }
    #endregion
    #region TaskResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaskResponse : global::NClassify.Library.IMessage
    {
        bool HasTask { get; }
        global::Freshbooks.Library.Model.Task Task { get; }
    }
    [global::System.Xml.Serialization.XmlType("TaskResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaskResponse : ITaskResponse, global::NClassify.Library.IBuilder
    {
        private static readonly TaskResponse _defaultInstance = new TaskResponse(false);
        public static TaskResponse DefaultInstance { get { return _defaultInstance; } }
        static TaskResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TaskResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TaskResponse() : this(true)
        {
        }
        public TaskResponse(ITaskResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Task = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTask(global::Freshbooks.Library.Model.Task value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Task, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Task));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Task, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_task;
        private global::Freshbooks.Library.Model.Task __fld_task;
        #endregion
        #region Instance Members
        public bool HasTask
        {
            get { return __has_task; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_task = global::Freshbooks.Library.Model.Task.DefaultInstance;
                __has_task = false;
            }
        }
        public global::Freshbooks.Library.Model.Task Task
        {
            get
            {
                return __fld_task;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Task");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_task = value;
                __has_task = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_task)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Task, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Task));
                errorCount++;
            }
            return errorCount;
        }
        public ITaskResponse AsReadOnly()
        {
            if (_readOnly) return this;
            TaskResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_task.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_task = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_task = false;
            __fld_task = global::Freshbooks.Library.Model.Task.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TaskResponse value = (TaskResponse)base.MemberwiseClone();
            value.__fld_task = (global::Freshbooks.Library.Model.Task)value.__fld_task.Clone();
            return value;
        }
        public TaskResponse Clone()
        {
            return (TaskResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITaskResponse) MergeFrom((ITaskResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITaskResponse other)
        {
            if (other.HasTask) Task = (global::Freshbooks.Library.Model.Task)other.Task.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "task" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TaskResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Task value = __fld_task;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Task.DefaultInstance) ? new global::Freshbooks.Library.Model.Task() : new global::Freshbooks.Library.Model.Task(__fld_task);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_task = value;
                        __has_task = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TaskResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_task)
            {
                __fld_task.WriteXml("task", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Tasks
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITasks : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Task> TaskList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Tasks")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Tasks : global::Freshbooks.Library.Model.PaginatedResponse, ITasks, global::NClassify.Library.IBuilder
    {
        private static readonly Tasks _defaultInstance = new Tasks(false);
        public static new Tasks DefaultInstance { get { return _defaultInstance; } }
        static Tasks()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Tasks(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Tasks() : this(true)
        {
        }
        public Tasks(ITasks copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            TaskList = 10,
        }
        #endregion
        #region _TaskList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _TaskList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Task>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("TaskList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Task> _contents;
            public _TaskList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Task>();
            }
            public _TaskList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Task> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Task>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Task item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Task)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Task> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Task this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Task value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Task> value)
            {
                foreach (global::Freshbooks.Library.Model.Task item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Task value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Task item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Task item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Task item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Task[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _TaskList Clone()
            {
                return _readOnly ? this : new _TaskList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Task> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidTaskList(global::Freshbooks.Library.Model.Task value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaskList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TaskList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _TaskList __fld_task;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Task> TaskList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Task>(__fld_task);
                return __fld_task;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_task = new _TaskList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Task item in __fld_task)
            {
                if (!IsValidTaskList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_task.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_task = new _TaskList();
        }
        protected override object MemberwiseClone()
        {
            Tasks value = (Tasks)base.MemberwiseClone();
            value.__fld_task = value.__fld_task.Clone();
            return value;
        }
        public new Tasks Clone()
        {
            return (Tasks)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITasks) MergeFrom((ITasks)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ITasks other)
        {
            foreach (global::Freshbooks.Library.Model.Task item in other.TaskList)
                __fld_task.Add((global::Freshbooks.Library.Model.Task)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "task" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Task child = new global::Freshbooks.Library.Model.Task();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_task.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region TasksResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITasksResponse : global::NClassify.Library.IMessage
    {
        bool HasTasks { get; }
        global::Freshbooks.Library.Model.Tasks Tasks { get; }
    }
    [global::System.Xml.Serialization.XmlType("TasksResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TasksResponse : ITasksResponse, global::NClassify.Library.IBuilder
    {
        private static readonly TasksResponse _defaultInstance = new TasksResponse(false);
        public static TasksResponse DefaultInstance { get { return _defaultInstance; } }
        static TasksResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TasksResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TasksResponse() : this(true)
        {
        }
        public TasksResponse(ITasksResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Tasks = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTasks(global::Freshbooks.Library.Model.Tasks value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tasks, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tasks));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Tasks, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_tasks;
        private global::Freshbooks.Library.Model.Tasks __fld_tasks;
        #endregion
        #region Instance Members
        public bool HasTasks
        {
            get { return __has_tasks; }
        }
        public global::Freshbooks.Library.Model.Tasks Tasks
        {
            get
            {
                return __fld_tasks;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tasks");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tasks = value;
                __has_tasks = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_tasks)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tasks, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Tasks));
                errorCount++;
            }
            return errorCount;
        }
        public ITasksResponse AsReadOnly()
        {
            if (_readOnly) return this;
            TasksResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_tasks.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_tasks = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_tasks = false;
            __fld_tasks = global::Freshbooks.Library.Model.Tasks.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TasksResponse value = (TasksResponse)base.MemberwiseClone();
            value.__fld_tasks = (global::Freshbooks.Library.Model.Tasks)value.__fld_tasks.Clone();
            return value;
        }
        public TasksResponse Clone()
        {
            return (TasksResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITasksResponse) MergeFrom((ITasksResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITasksResponse other)
        {
            if (other.HasTasks) Tasks = (global::Freshbooks.Library.Model.Tasks)other.Tasks.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "tasks" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TasksResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Tasks value = __fld_tasks;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Tasks.DefaultInstance) ? new global::Freshbooks.Library.Model.Tasks() : new global::Freshbooks.Library.Model.Tasks(__fld_tasks);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_tasks = value;
                        __has_tasks = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TasksResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region TasksRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITasksRequest : global::NClassify.Library.IMessage
    {
        bool HasProjectId { get; }
        global::Freshbooks.Library.Model.ProjectId ProjectId { get; }
    }
    [global::System.Xml.Serialization.XmlType("TasksRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TasksRequest : global::Freshbooks.Library.Model.PaginatedRequest, ITasksRequest, global::NClassify.Library.IBuilder
    {
        private static readonly TasksRequest _defaultInstance = new TasksRequest(false);
        public static new TasksRequest DefaultInstance { get { return _defaultInstance; } }
        static TasksRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TasksRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public TasksRequest() : this(true)
        {
        }
        public TasksRequest(ITasksRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ProjectId = 10,
        }
        #endregion
        #region Static Data
        public static bool IsValidProjectId(global::Freshbooks.Library.Model.ProjectId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_projectId;
        private global::Freshbooks.Library.Model.ProjectId __fld_projectId;
        #endregion
        #region Instance Members
        public bool HasProjectId
        {
            get { return __has_projectId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
                __has_projectId = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectId ProjectId
        {
            get
            {
                return __fld_projectId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = value;
                __has_projectId = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_projectId && !IsValidProjectId(__fld_projectId, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_projectId = false;
            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
        }
        protected override object MemberwiseClone()
        {
            TasksRequest value = (TasksRequest)base.MemberwiseClone();
            return value;
        }
        public new TasksRequest Clone()
        {
            return (TasksRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITasksRequest) MergeFrom((ITasksRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ITasksRequest other)
        {
            if (other.HasProjectId) ProjectId = other.ProjectId;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "project_id" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_projectId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_projectId)
            {
                writer.WriteElementString("project_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_projectId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TaskService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITaskService
    {
        global::Freshbooks.Library.Model.TaskIdentity Create(global::Freshbooks.Library.Model.TaskRequest taskRequest);
        void Update(global::Freshbooks.Library.Model.TaskRequest taskRequest);
        global::Freshbooks.Library.Model.TaskResponse Get(global::Freshbooks.Library.Model.TaskIdentity taskIdentity);
        void Delete(global::Freshbooks.Library.Model.TaskIdentity taskIdentity);
        global::Freshbooks.Library.Model.TasksResponse List(global::Freshbooks.Library.Model.TasksRequest tasksRequest);
    }
    [global::System.Xml.Serialization.XmlType("TaskService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TaskService : ITaskService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public TaskService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public TaskService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.TaskIdentity Create(global::Freshbooks.Library.Model.TaskRequest taskRequest)
        {
            global::Freshbooks.Library.Model.TaskIdentity response = new global::Freshbooks.Library.Model.TaskIdentity();
            Invoke("create", taskRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.TaskRequest taskRequest)
        {
            Invoke("update", taskRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.TaskResponse Get(global::Freshbooks.Library.Model.TaskIdentity taskIdentity)
        {
            global::Freshbooks.Library.Model.TaskResponse response = new global::Freshbooks.Library.Model.TaskResponse();
            Invoke("get", taskIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.TaskIdentity taskIdentity)
        {
            Invoke("delete", taskIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.TasksResponse List(global::Freshbooks.Library.Model.TasksRequest tasksRequest)
        {
            global::Freshbooks.Library.Model.TasksResponse response = new global::Freshbooks.Library.Model.TasksResponse();
            Invoke("list", tasksRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly ITaskService _dispatch;
            public Dispatch(ITaskService dispatch)
                : this(dispatch, true) { }
            public Dispatch(ITaskService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.TaskRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.TaskIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.TaskIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.TasksRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.TaskRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ITaskService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(ITaskService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(ITaskService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TaskRequest request = new global::Freshbooks.Library.Model.TaskRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.TaskIdentity response = new global::Freshbooks.Library.Model.TaskIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.TaskIdentity request = new global::Freshbooks.Library.Model.TaskIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.TaskIdentity request = new global::Freshbooks.Library.Model.TaskIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.TaskResponse response = new global::Freshbooks.Library.Model.TaskResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.TasksRequest request = new global::Freshbooks.Library.Model.TasksRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.TasksResponse response = new global::Freshbooks.Library.Model.TasksResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.TaskRequest request = new global::Freshbooks.Library.Model.TaskRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ITaskService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
