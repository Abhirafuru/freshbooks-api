// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region TimeEntryIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntryIdentity : global::NClassify.Library.IMessage
    {
        bool HasTimeEntryId { get; }
        global::Freshbooks.Library.Model.TimeEntryId TimeEntryId { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntryIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntryIdentity : ITimeEntryIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntryIdentity _defaultInstance = new TimeEntryIdentity(false);
        public static TimeEntryIdentity DefaultInstance { get { return _defaultInstance; } }
        static TimeEntryIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntryIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntryIdentity() : this(true)
        {
        }
        public TimeEntryIdentity(ITimeEntryIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TimeEntryId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTimeEntryId(global::Freshbooks.Library.Model.TimeEntryId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntryId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_timeEntryId;
        private global::Freshbooks.Library.Model.TimeEntryId __fld_timeEntryId;
        #endregion
        #region Instance Members
        public bool HasTimeEntryId
        {
            get { return __has_timeEntryId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntryId = new global::Freshbooks.Library.Model.TimeEntryId(0UL);
                __has_timeEntryId = false;
            }
        }
        public global::Freshbooks.Library.Model.TimeEntryId TimeEntryId
        {
            get
            {
                return __fld_timeEntryId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntryId = value;
                __has_timeEntryId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_timeEntryId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntryId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TimeEntryId));
                errorCount++;
            }
            return errorCount;
        }
        public ITimeEntryIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            TimeEntryIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_timeEntryId = false;
            __fld_timeEntryId = new global::Freshbooks.Library.Model.TimeEntryId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TimeEntryIdentity value = (TimeEntryIdentity)base.MemberwiseClone();
            return value;
        }
        public TimeEntryIdentity Clone()
        {
            return (TimeEntryIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntryIdentity) MergeFrom((ITimeEntryIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITimeEntryIdentity other)
        {
            if (other.HasTimeEntryId) TimeEntryId = other.TimeEntryId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "time_entry_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TimeEntryIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_timeEntryId = new global::Freshbooks.Library.Model.TimeEntryId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_timeEntryId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TimeEntryIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_timeEntryId)
            {
                writer.WriteElementString("time_entry_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_timeEntryId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TimeEntry
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntry : global::NClassify.Library.IMessage
    {
        bool HasTimeEntryId { get; }
        global::Freshbooks.Library.Model.TimeEntryId TimeEntryId { get; }
        bool HasProjectId { get; }
        global::Freshbooks.Library.Model.ProjectId ProjectId { get; }
        bool HasTaskId { get; }
        global::Freshbooks.Library.Model.TaskId TaskId { get; }
        bool HasStaffId { get; }
        global::Freshbooks.Library.Model.StaffId StaffId { get; }
        bool HasHours { get; }
        global::System.TimeSpan Hours { get; }
        bool HasNotes { get; }
        string Notes { get; }
        bool HasDate { get; }
        global::System.DateTime Date { get; }
        bool HasBilled { get; }
        bool Billed { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntry")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntry : ITimeEntry, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntry _defaultInstance = new TimeEntry(false);
        public static TimeEntry DefaultInstance { get { return _defaultInstance; } }
        static TimeEntry()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntry(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntry() : this(true)
        {
        }
        public TimeEntry(ITimeEntry copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TimeEntryId = 1,
            ProjectId = 2,
            TaskId = 3,
            StaffId = 4,
            Hours = 21,
            Notes = 11,
            Date = 23,
            Billed = 25,
        }
        #endregion
        #region Static Data
        public static bool IsValidTimeEntryId(global::Freshbooks.Library.Model.TimeEntryId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntryId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidProjectId(global::Freshbooks.Library.Model.ProjectId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidTaskId(global::Freshbooks.Library.Model.TaskId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStaffId(global::Freshbooks.Library.Model.StaffId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidNotes(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Notes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Notes));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_timeEntryId;
        private global::Freshbooks.Library.Model.TimeEntryId __fld_timeEntryId;
        private bool __has_projectId;
        private global::Freshbooks.Library.Model.ProjectId __fld_projectId;
        private bool __has_taskId;
        private global::Freshbooks.Library.Model.TaskId __fld_taskId;
        private bool __has_staffId;
        private global::Freshbooks.Library.Model.StaffId __fld_staffId;
        private bool __has_hours;
        private global::System.TimeSpan __fld_hours;
        private bool __has_notes;
        private string __fld_notes;
        private bool __has_date;
        private global::System.DateTime __fld_date;
        private bool __has_billed;
        private bool __fld_billed;
        #endregion
        #region Instance Members
        public bool HasTimeEntryId
        {
            get { return __has_timeEntryId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntryId = new global::Freshbooks.Library.Model.TimeEntryId(0UL);
                __has_timeEntryId = false;
            }
        }
        public global::Freshbooks.Library.Model.TimeEntryId TimeEntryId
        {
            get
            {
                return __fld_timeEntryId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntryId = value;
                __has_timeEntryId = true;
            }
        }
        public bool HasProjectId
        {
            get { return __has_projectId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
                __has_projectId = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectId ProjectId
        {
            get
            {
                return __fld_projectId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = value;
                __has_projectId = true;
            }
        }
        public bool HasTaskId
        {
            get { return __has_taskId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
                __has_taskId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaskId TaskId
        {
            get
            {
                return __fld_taskId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = value;
                __has_taskId = true;
            }
        }
        public bool HasStaffId
        {
            get { return __has_staffId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
                __has_staffId = false;
            }
        }
        public global::Freshbooks.Library.Model.StaffId StaffId
        {
            get
            {
                return __fld_staffId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = value;
                __has_staffId = true;
            }
        }
        public bool HasHours
        {
            get { return __has_hours; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_hours = global::System.TimeSpan.Zero;
                __has_hours = false;
            }
        }
        public global::System.TimeSpan Hours
        {
            get
            {
                return __fld_hours;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_hours = value;
                __has_hours = true;
            }
        }
        public bool HasNotes
        {
            get { return __has_notes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = "";
                __has_notes = false;
            }
        }
        public string Notes
        {
            get
            {
                return __fld_notes;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Notes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = value;
                __has_notes = true;
            }
        }
        public bool HasDate
        {
            get { return __has_date; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = global::System.DateTime.MinValue;
                __has_date = false;
            }
        }
        public global::System.DateTime Date
        {
            get
            {
                return __fld_date;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = value;
                __has_date = true;
            }
        }
        public bool HasBilled
        {
            get { return __has_billed; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Billed
        {
            get
            {
                return __fld_billed;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_billed = value;
                __has_billed = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_timeEntryId && !IsValidTimeEntryId(__fld_timeEntryId, onError)) errorCount++;
            if (!__has_projectId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ProjectId));
                errorCount++;
            }
            if (!__has_taskId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TaskId));
                errorCount++;
            }
            if (__has_staffId && !IsValidStaffId(__fld_staffId, onError)) errorCount++;
            if (__has_notes && !IsValidNotes(__fld_notes, onError)) errorCount++;
            return errorCount;
        }
        public ITimeEntry AsReadOnly()
        {
            if (_readOnly) return this;
            TimeEntry copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_notes = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_timeEntryId = false;
            __fld_timeEntryId = new global::Freshbooks.Library.Model.TimeEntryId(0UL);
            __has_projectId = false;
            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
            __has_taskId = false;
            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
            __has_staffId = false;
            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
            __has_hours = false;
            __fld_hours = global::System.TimeSpan.Zero;
            __has_notes = false;
            __fld_notes = "";
            __has_date = false;
            __fld_date = global::System.DateTime.MinValue;
            __has_billed = false;
            __fld_billed = false;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TimeEntry value = (TimeEntry)base.MemberwiseClone();
            return value;
        }
        public TimeEntry Clone()
        {
            return (TimeEntry)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntry) MergeFrom((ITimeEntry)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITimeEntry other)
        {
            if (other.HasTimeEntryId) TimeEntryId = other.TimeEntryId;
            if (other.HasProjectId) ProjectId = other.ProjectId;
            if (other.HasTaskId) TaskId = other.TaskId;
            if (other.HasStaffId) StaffId = other.StaffId;
            if (other.HasHours) Hours = other.Hours;
            if (other.HasNotes) Notes = other.Notes;
            if (other.HasDate) Date = other.Date;
            if (other.HasBilled) Billed = other.Billed;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "billed", "date", "hours", "notes", "project_id", "staff_id", "task_id", "time_entry_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TimeEntry", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_billed = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_billed = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_date = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_date = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        __fld_hours = global::NClassify.Library.TypeConverter.Instance.ParseTimeSpan(sbuilder.ToString(), "{9:f}", global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_hours = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_notes = sbuilder.ToString();
                        __has_notes = true;
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_projectId = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_staffId = true;
                        }
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taskId = true;
                        }
                        break;
                    }
                    case 7:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_timeEntryId = new global::Freshbooks.Library.Model.TimeEntryId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_timeEntryId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TimeEntry", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_timeEntryId)
            {
                writer.WriteElementString("time_entry_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_timeEntryId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_projectId)
            {
                writer.WriteElementString("project_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_projectId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_taskId)
            {
                writer.WriteElementString("task_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taskId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_staffId)
            {
                writer.WriteElementString("staff_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_staffId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_hours)
            {
                writer.WriteElementString("hours", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_hours, "{9:f}", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_notes)
            {
                writer.WriteElementString("notes", __fld_notes);
            }
            if (__has_date)
            {
                writer.WriteElementString("date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_date, "yyyy-MM-dd", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TimeEntryRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntryRequest : global::NClassify.Library.IMessage
    {
        bool HasTimeEntry { get; }
        global::Freshbooks.Library.Model.TimeEntry TimeEntry { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntryRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntryRequest : ITimeEntryRequest, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntryRequest _defaultInstance = new TimeEntryRequest(false);
        public static TimeEntryRequest DefaultInstance { get { return _defaultInstance; } }
        static TimeEntryRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntryRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntryRequest() : this(true)
        {
        }
        public TimeEntryRequest(ITimeEntryRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TimeEntry = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTimeEntry(global::Freshbooks.Library.Model.TimeEntry value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntry, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TimeEntry));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntry, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_timeEntry;
        private global::Freshbooks.Library.Model.TimeEntry __fld_timeEntry;
        #endregion
        #region Instance Members
        public bool HasTimeEntry
        {
            get { return __has_timeEntry; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntry = global::Freshbooks.Library.Model.TimeEntry.DefaultInstance;
                __has_timeEntry = false;
            }
        }
        public global::Freshbooks.Library.Model.TimeEntry TimeEntry
        {
            get
            {
                return __fld_timeEntry;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("TimeEntry");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntry = value;
                __has_timeEntry = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_timeEntry)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntry, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TimeEntry));
                errorCount++;
            }
            return errorCount;
        }
        public ITimeEntryRequest AsReadOnly()
        {
            if (_readOnly) return this;
            TimeEntryRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_timeEntry.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_timeEntry = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_timeEntry = false;
            __fld_timeEntry = global::Freshbooks.Library.Model.TimeEntry.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TimeEntryRequest value = (TimeEntryRequest)base.MemberwiseClone();
            value.__fld_timeEntry = (global::Freshbooks.Library.Model.TimeEntry)value.__fld_timeEntry.Clone();
            return value;
        }
        public TimeEntryRequest Clone()
        {
            return (TimeEntryRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntryRequest) MergeFrom((ITimeEntryRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITimeEntryRequest other)
        {
            if (other.HasTimeEntry) TimeEntry = (global::Freshbooks.Library.Model.TimeEntry)other.TimeEntry.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "time_entry" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TimeEntryRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TimeEntry value = __fld_timeEntry;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.TimeEntry.DefaultInstance) ? new global::Freshbooks.Library.Model.TimeEntry() : new global::Freshbooks.Library.Model.TimeEntry(__fld_timeEntry);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_timeEntry = value;
                        __has_timeEntry = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TimeEntryRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_timeEntry)
            {
                __fld_timeEntry.WriteXml("time_entry", writer);
            }
        }
        #endregion
    }
    #endregion
    #region TimeEntryResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntryResponse : global::NClassify.Library.IMessage
    {
        bool HasTimeEntry { get; }
        global::Freshbooks.Library.Model.TimeEntry TimeEntry { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntryResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntryResponse : ITimeEntryResponse, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntryResponse _defaultInstance = new TimeEntryResponse(false);
        public static TimeEntryResponse DefaultInstance { get { return _defaultInstance; } }
        static TimeEntryResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntryResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntryResponse() : this(true)
        {
        }
        public TimeEntryResponse(ITimeEntryResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TimeEntry = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTimeEntry(global::Freshbooks.Library.Model.TimeEntry value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntry, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TimeEntry));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntry, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_timeEntry;
        private global::Freshbooks.Library.Model.TimeEntry __fld_timeEntry;
        #endregion
        #region Instance Members
        public bool HasTimeEntry
        {
            get { return __has_timeEntry; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntry = global::Freshbooks.Library.Model.TimeEntry.DefaultInstance;
                __has_timeEntry = false;
            }
        }
        public global::Freshbooks.Library.Model.TimeEntry TimeEntry
        {
            get
            {
                return __fld_timeEntry;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("TimeEntry");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntry = value;
                __has_timeEntry = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_timeEntry)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntry, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TimeEntry));
                errorCount++;
            }
            return errorCount;
        }
        public ITimeEntryResponse AsReadOnly()
        {
            if (_readOnly) return this;
            TimeEntryResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_timeEntry.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_timeEntry = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_timeEntry = false;
            __fld_timeEntry = global::Freshbooks.Library.Model.TimeEntry.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TimeEntryResponse value = (TimeEntryResponse)base.MemberwiseClone();
            value.__fld_timeEntry = (global::Freshbooks.Library.Model.TimeEntry)value.__fld_timeEntry.Clone();
            return value;
        }
        public TimeEntryResponse Clone()
        {
            return (TimeEntryResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntryResponse) MergeFrom((ITimeEntryResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITimeEntryResponse other)
        {
            if (other.HasTimeEntry) TimeEntry = (global::Freshbooks.Library.Model.TimeEntry)other.TimeEntry.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "time_entry" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TimeEntryResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TimeEntry value = __fld_timeEntry;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.TimeEntry.DefaultInstance) ? new global::Freshbooks.Library.Model.TimeEntry() : new global::Freshbooks.Library.Model.TimeEntry(__fld_timeEntry);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_timeEntry = value;
                        __has_timeEntry = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TimeEntryResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_timeEntry)
            {
                __fld_timeEntry.WriteXml("time_entry", writer);
            }
        }
        #endregion
    }
    #endregion
    #region TimeEntries
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntries : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.TimeEntry> TimeEntryList { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntries")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntries : global::Freshbooks.Library.Model.PaginatedResponse, ITimeEntries, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntries _defaultInstance = new TimeEntries(false);
        public static new TimeEntries DefaultInstance { get { return _defaultInstance; } }
        static TimeEntries()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntries(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntries() : this(true)
        {
        }
        public TimeEntries(ITimeEntries copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            TimeEntryList = 10,
        }
        #endregion
        #region _TimeEntryList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _TimeEntryList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.TimeEntry>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("TimeEntryList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.TimeEntry> _contents;
            public _TimeEntryList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.TimeEntry>();
            }
            public _TimeEntryList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.TimeEntry> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.TimeEntry>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.TimeEntry item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.TimeEntry)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.TimeEntry> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.TimeEntry this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.TimeEntry value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.TimeEntry> value)
            {
                foreach (global::Freshbooks.Library.Model.TimeEntry item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.TimeEntry value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.TimeEntry item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.TimeEntry item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.TimeEntry item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.TimeEntry[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _TimeEntryList Clone()
            {
                return _readOnly ? this : new _TimeEntryList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.TimeEntry> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidTimeEntryList(global::Freshbooks.Library.Model.TimeEntry value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntryList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TimeEntryList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntryList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _TimeEntryList __fld_timeEntry;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.TimeEntry> TimeEntryList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.TimeEntry>(__fld_timeEntry);
                return __fld_timeEntry;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntry = new _TimeEntryList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.TimeEntry item in __fld_timeEntry)
            {
                if (!IsValidTimeEntryList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_timeEntry.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_timeEntry = new _TimeEntryList();
        }
        protected override object MemberwiseClone()
        {
            TimeEntries value = (TimeEntries)base.MemberwiseClone();
            value.__fld_timeEntry = value.__fld_timeEntry.Clone();
            return value;
        }
        public new TimeEntries Clone()
        {
            return (TimeEntries)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntries) MergeFrom((ITimeEntries)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ITimeEntries other)
        {
            foreach (global::Freshbooks.Library.Model.TimeEntry item in other.TimeEntryList)
                __fld_timeEntry.Add((global::Freshbooks.Library.Model.TimeEntry)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "time_entry" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TimeEntry child = new global::Freshbooks.Library.Model.TimeEntry();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_timeEntry.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region TimeEntriesResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntriesResponse : global::NClassify.Library.IMessage
    {
        bool HasTimeEntries { get; }
        global::Freshbooks.Library.Model.TimeEntries TimeEntries { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntriesResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntriesResponse : ITimeEntriesResponse, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntriesResponse _defaultInstance = new TimeEntriesResponse(false);
        public static TimeEntriesResponse DefaultInstance { get { return _defaultInstance; } }
        static TimeEntriesResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntriesResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntriesResponse() : this(true)
        {
        }
        public TimeEntriesResponse(ITimeEntriesResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            TimeEntries = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidTimeEntries(global::Freshbooks.Library.Model.TimeEntries value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntries, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.TimeEntries));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntries, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_timeEntries;
        private global::Freshbooks.Library.Model.TimeEntries __fld_timeEntries;
        #endregion
        #region Instance Members
        public bool HasTimeEntries
        {
            get { return __has_timeEntries; }
        }
        public global::Freshbooks.Library.Model.TimeEntries TimeEntries
        {
            get
            {
                return __fld_timeEntries;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("TimeEntries");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeEntries = value;
                __has_timeEntries = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_timeEntries)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.TimeEntries, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.TimeEntries));
                errorCount++;
            }
            return errorCount;
        }
        public ITimeEntriesResponse AsReadOnly()
        {
            if (_readOnly) return this;
            TimeEntriesResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_timeEntries.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_timeEntries = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_timeEntries = false;
            __fld_timeEntries = global::Freshbooks.Library.Model.TimeEntries.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            TimeEntriesResponse value = (TimeEntriesResponse)base.MemberwiseClone();
            value.__fld_timeEntries = (global::Freshbooks.Library.Model.TimeEntries)value.__fld_timeEntries.Clone();
            return value;
        }
        public TimeEntriesResponse Clone()
        {
            return (TimeEntriesResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntriesResponse) MergeFrom((ITimeEntriesResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ITimeEntriesResponse other)
        {
            if (other.HasTimeEntries) TimeEntries = (global::Freshbooks.Library.Model.TimeEntries)other.TimeEntries.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "time_entries" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("TimeEntriesResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TimeEntries value = __fld_timeEntries;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.TimeEntries.DefaultInstance) ? new global::Freshbooks.Library.Model.TimeEntries() : new global::Freshbooks.Library.Model.TimeEntries(__fld_timeEntries);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_timeEntries = value;
                        __has_timeEntries = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("TimeEntriesResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region TimeEntriesRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntriesRequest : global::NClassify.Library.IMessage
    {
        bool HasDateFrom { get; }
        global::System.DateTime DateFrom { get; }
        bool HasDateTo { get; }
        global::System.DateTime DateTo { get; }
        bool HasProjectId { get; }
        global::Freshbooks.Library.Model.ProjectId ProjectId { get; }
        bool HasTaskId { get; }
        global::Freshbooks.Library.Model.TaskId TaskId { get; }
    }
    [global::System.Xml.Serialization.XmlType("TimeEntriesRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntriesRequest : global::Freshbooks.Library.Model.PaginatedRequest, ITimeEntriesRequest, global::NClassify.Library.IBuilder
    {
        private static readonly TimeEntriesRequest _defaultInstance = new TimeEntriesRequest(false);
        public static new TimeEntriesRequest DefaultInstance { get { return _defaultInstance; } }
        static TimeEntriesRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected TimeEntriesRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public TimeEntriesRequest() : this(true)
        {
        }
        public TimeEntriesRequest(ITimeEntriesRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            DateFrom = 10,
            DateTo = 11,
            ProjectId = 12,
            TaskId = 13,
        }
        #endregion
        #region Static Data
        public static bool IsValidProjectId(global::Freshbooks.Library.Model.ProjectId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidTaskId(global::Freshbooks.Library.Model.TaskId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.TaskId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_dateFrom;
        private global::System.DateTime __fld_dateFrom;
        private bool __has_dateTo;
        private global::System.DateTime __fld_dateTo;
        private bool __has_projectId;
        private global::Freshbooks.Library.Model.ProjectId __fld_projectId;
        private bool __has_taskId;
        private global::Freshbooks.Library.Model.TaskId __fld_taskId;
        #endregion
        #region Instance Members
        public bool HasDateFrom
        {
            get { return __has_dateFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = global::System.DateTime.MinValue;
                __has_dateFrom = false;
            }
        }
        public global::System.DateTime DateFrom
        {
            get
            {
                return __fld_dateFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = value;
                __has_dateFrom = true;
            }
        }
        public bool HasDateTo
        {
            get { return __has_dateTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = global::System.DateTime.MinValue;
                __has_dateTo = false;
            }
        }
        public global::System.DateTime DateTo
        {
            get
            {
                return __fld_dateTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = value;
                __has_dateTo = true;
            }
        }
        public bool HasProjectId
        {
            get { return __has_projectId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
                __has_projectId = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectId ProjectId
        {
            get
            {
                return __fld_projectId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = value;
                __has_projectId = true;
            }
        }
        public bool HasTaskId
        {
            get { return __has_taskId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
                __has_taskId = false;
            }
        }
        public global::Freshbooks.Library.Model.TaskId TaskId
        {
            get
            {
                return __fld_taskId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_taskId = value;
                __has_taskId = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_projectId && !IsValidProjectId(__fld_projectId, onError)) errorCount++;
            if (__has_taskId && !IsValidTaskId(__fld_taskId, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_dateFrom = false;
            __fld_dateFrom = global::System.DateTime.MinValue;
            __has_dateTo = false;
            __fld_dateTo = global::System.DateTime.MinValue;
            __has_projectId = false;
            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
            __has_taskId = false;
            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(0UL);
        }
        protected override object MemberwiseClone()
        {
            TimeEntriesRequest value = (TimeEntriesRequest)base.MemberwiseClone();
            return value;
        }
        public new TimeEntriesRequest Clone()
        {
            return (TimeEntriesRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ITimeEntriesRequest) MergeFrom((ITimeEntriesRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ITimeEntriesRequest other)
        {
            if (other.HasDateFrom) DateFrom = other.DateFrom;
            if (other.HasDateTo) DateTo = other.DateTo;
            if (other.HasProjectId) ProjectId = other.ProjectId;
            if (other.HasTaskId) TaskId = other.TaskId;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "date_from", "date_to", "project_id", "task_id" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateFrom = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateTo = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_projectId = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_taskId = new global::Freshbooks.Library.Model.TaskId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_taskId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_dateFrom)
            {
                writer.WriteElementString("date_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTo)
            {
                writer.WriteElementString("date_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_projectId)
            {
                writer.WriteElementString("project_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_projectId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_taskId)
            {
                writer.WriteElementString("task_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_taskId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region TimeEntryService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ITimeEntryService
    {
        global::Freshbooks.Library.Model.TimeEntryIdentity Create(global::Freshbooks.Library.Model.TimeEntryRequest timeEntryRequest);
        void Update(global::Freshbooks.Library.Model.TimeEntryRequest timeEntryRequest);
        global::Freshbooks.Library.Model.TimeEntryResponse Get(global::Freshbooks.Library.Model.TimeEntryIdentity timeEntryIdentity);
        void Delete(global::Freshbooks.Library.Model.TimeEntryIdentity timeEntryIdentity);
        global::Freshbooks.Library.Model.TimeEntriesResponse List(global::Freshbooks.Library.Model.TimeEntriesRequest timeEntriesRequest);
    }
    [global::System.Xml.Serialization.XmlType("TimeEntryService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class TimeEntryService : ITimeEntryService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public TimeEntryService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public TimeEntryService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.TimeEntryIdentity Create(global::Freshbooks.Library.Model.TimeEntryRequest timeEntryRequest)
        {
            global::Freshbooks.Library.Model.TimeEntryIdentity response = new global::Freshbooks.Library.Model.TimeEntryIdentity();
            Invoke("create", timeEntryRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.TimeEntryRequest timeEntryRequest)
        {
            Invoke("update", timeEntryRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.TimeEntryResponse Get(global::Freshbooks.Library.Model.TimeEntryIdentity timeEntryIdentity)
        {
            global::Freshbooks.Library.Model.TimeEntryResponse response = new global::Freshbooks.Library.Model.TimeEntryResponse();
            Invoke("get", timeEntryIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.TimeEntryIdentity timeEntryIdentity)
        {
            Invoke("delete", timeEntryIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.TimeEntriesResponse List(global::Freshbooks.Library.Model.TimeEntriesRequest timeEntriesRequest)
        {
            global::Freshbooks.Library.Model.TimeEntriesResponse response = new global::Freshbooks.Library.Model.TimeEntriesResponse();
            Invoke("list", timeEntriesRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly ITimeEntryService _dispatch;
            public Dispatch(ITimeEntryService dispatch)
                : this(dispatch, true) { }
            public Dispatch(ITimeEntryService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.TimeEntryRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.TimeEntryIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.TimeEntryIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.TimeEntriesRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.TimeEntryRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ITimeEntryService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(ITimeEntryService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(ITimeEntryService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.TimeEntryRequest request = new global::Freshbooks.Library.Model.TimeEntryRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.TimeEntryIdentity response = new global::Freshbooks.Library.Model.TimeEntryIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.TimeEntryIdentity request = new global::Freshbooks.Library.Model.TimeEntryIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.TimeEntryIdentity request = new global::Freshbooks.Library.Model.TimeEntryIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.TimeEntryResponse response = new global::Freshbooks.Library.Model.TimeEntryResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.TimeEntriesRequest request = new global::Freshbooks.Library.Model.TimeEntriesRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.TimeEntriesResponse response = new global::Freshbooks.Library.Model.TimeEntriesResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.TimeEntryRequest request = new global::Freshbooks.Library.Model.TimeEntryRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(ITimeEntryService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
