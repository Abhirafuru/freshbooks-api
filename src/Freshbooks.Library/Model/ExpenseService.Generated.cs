// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region ExpenseIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpenseIdentity : global::NClassify.Library.IMessage
    {
        bool HasExpenseId { get; }
        global::Freshbooks.Library.Model.ExpenseId ExpenseId { get; }
    }
    [global::System.Xml.Serialization.XmlType("ExpenseIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExpenseIdentity : IExpenseIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly ExpenseIdentity _defaultInstance = new ExpenseIdentity(false);
        public static ExpenseIdentity DefaultInstance { get { return _defaultInstance; } }
        static ExpenseIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ExpenseIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ExpenseIdentity() : this(true)
        {
        }
        public ExpenseIdentity(IExpenseIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ExpenseId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidExpenseId(global::Freshbooks.Library.Model.ExpenseId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ExpenseId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_expenseId;
        private global::Freshbooks.Library.Model.ExpenseId __fld_expenseId;
        #endregion
        #region Instance Members
        public bool HasExpenseId
        {
            get { return __has_expenseId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expenseId = new global::Freshbooks.Library.Model.ExpenseId(0UL);
                __has_expenseId = false;
            }
        }
        public global::Freshbooks.Library.Model.ExpenseId ExpenseId
        {
            get
            {
                return __fld_expenseId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expenseId = value;
                __has_expenseId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_expenseId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ExpenseId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ExpenseId));
                errorCount++;
            }
            return errorCount;
        }
        public IExpenseIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            ExpenseIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_expenseId = false;
            __fld_expenseId = new global::Freshbooks.Library.Model.ExpenseId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ExpenseIdentity value = (ExpenseIdentity)base.MemberwiseClone();
            return value;
        }
        public ExpenseIdentity Clone()
        {
            return (ExpenseIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpenseIdentity) MergeFrom((IExpenseIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IExpenseIdentity other)
        {
            if (other.HasExpenseId) ExpenseId = other.ExpenseId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "expense_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ExpenseIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_expenseId = new global::Freshbooks.Library.Model.ExpenseId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_expenseId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ExpenseIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_expenseId)
            {
                writer.WriteElementString("expense_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_expenseId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Expense
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpense : global::NClassify.Library.IMessage
    {
        bool HasExpenseId { get; }
        global::Freshbooks.Library.Model.ExpenseId ExpenseId { get; }
        bool HasStaffId { get; }
        global::Freshbooks.Library.Model.StaffId StaffId { get; }
        bool HasCategoryId { get; }
        global::Freshbooks.Library.Model.CategoryId CategoryId { get; }
        bool HasProjectId { get; }
        global::Freshbooks.Library.Model.ProjectId ProjectId { get; }
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasAmount { get; }
        double Amount { get; }
        bool HasVendor { get; }
        string Vendor { get; }
        bool HasDate { get; }
        global::System.DateTime Date { get; }
        bool HasNotes { get; }
        string Notes { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasStatus { get; }
        string Status { get; }
        bool HasTax1Name { get; }
        string Tax1Name { get; }
        bool HasTax1Percent { get; }
        double Tax1Percent { get; }
        bool HasTax1Amount { get; }
        double Tax1Amount { get; }
        bool HasTax2Name { get; }
        string Tax2Name { get; }
        bool HasTax2Percent { get; }
        double Tax2Percent { get; }
        bool HasTax2Amount { get; }
        double Tax2Amount { get; }
        bool HasCompoundTax { get; }
        double CompoundTax { get; }
        bool HasHasReceipt { get; }
        bool HasReceipt { get; }
    }
    [global::System.Xml.Serialization.XmlType("Expense")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Expense : IExpense, global::NClassify.Library.IBuilder
    {
        private static readonly Expense _defaultInstance = new Expense(false);
        public static Expense DefaultInstance { get { return _defaultInstance; } }
        static Expense()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Expense(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Expense() : this(true)
        {
        }
        public Expense(IExpense copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ExpenseId = 1,
            StaffId = 10,
            CategoryId = 11,
            ProjectId = 12,
            ClientId = 13,
            Amount = 21,
            Vendor = 25,
            Date = 22,
            Notes = 23,
            Folder = 24,
            Status = 26,
            Tax1Name = 30,
            Tax1Percent = 31,
            Tax1Amount = 32,
            Tax2Name = 33,
            Tax2Percent = 34,
            Tax2Amount = 35,
            CompoundTax = 41,
            HasReceipt = 42,
        }
        #endregion
        #region Static Data
        public static bool IsValidExpenseId(global::Freshbooks.Library.Model.ExpenseId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ExpenseId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStaffId(global::Freshbooks.Library.Model.StaffId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidCategoryId(global::Freshbooks.Library.Model.CategoryId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidProjectId(global::Freshbooks.Library.Model.ProjectId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ProjectId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidVendor(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Vendor, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Vendor));
                return false;
            }
            return true;
        }
        public static bool IsValidNotes(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Notes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Notes));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStatus(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Status, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Status));
                return false;
            }
            return true;
        }
        public static bool IsValidTax1Name(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax1Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tax1Name));
                return false;
            }
            return true;
        }
        public static bool IsValidTax2Name(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax2Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tax2Name));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_expenseId;
        private global::Freshbooks.Library.Model.ExpenseId __fld_expenseId;
        private bool __has_staffId;
        private global::Freshbooks.Library.Model.StaffId __fld_staffId;
        private bool __has_categoryId;
        private global::Freshbooks.Library.Model.CategoryId __fld_categoryId;
        private bool __has_projectId;
        private global::Freshbooks.Library.Model.ProjectId __fld_projectId;
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_amount;
        private double __fld_amount;
        private bool __has_vendor;
        private string __fld_vendor;
        private bool __has_date;
        private global::System.DateTime __fld_date;
        private bool __has_notes;
        private string __fld_notes;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_status;
        private string __fld_status;
        private bool __has_tax1Name;
        private string __fld_tax1Name;
        private bool __has_tax1Percent;
        private double __fld_tax1Percent;
        private bool __has_tax1Amount;
        private double __fld_tax1Amount;
        private bool __has_tax2Name;
        private string __fld_tax2Name;
        private bool __has_tax2Percent;
        private double __fld_tax2Percent;
        private bool __has_tax2Amount;
        private double __fld_tax2Amount;
        private bool __has_compoundTax;
        private double __fld_compoundTax;
        private bool __has_hasReceipt;
        private bool __fld_hasReceipt;
        #endregion
        #region Instance Members
        public bool HasExpenseId
        {
            get { return __has_expenseId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expenseId = new global::Freshbooks.Library.Model.ExpenseId(0UL);
                __has_expenseId = false;
            }
        }
        public global::Freshbooks.Library.Model.ExpenseId ExpenseId
        {
            get
            {
                return __fld_expenseId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expenseId = value;
                __has_expenseId = true;
            }
        }
        public bool HasStaffId
        {
            get { return __has_staffId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
                __has_staffId = false;
            }
        }
        public global::Freshbooks.Library.Model.StaffId StaffId
        {
            get
            {
                return __fld_staffId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = value;
                __has_staffId = true;
            }
        }
        public bool HasCategoryId
        {
            get { return __has_categoryId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(0UL);
                __has_categoryId = false;
            }
        }
        public global::Freshbooks.Library.Model.CategoryId CategoryId
        {
            get
            {
                return __fld_categoryId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_categoryId = value;
                __has_categoryId = true;
            }
        }
        public bool HasProjectId
        {
            get { return __has_projectId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
                __has_projectId = false;
            }
        }
        public global::Freshbooks.Library.Model.ProjectId ProjectId
        {
            get
            {
                return __fld_projectId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_projectId = value;
                __has_projectId = true;
            }
        }
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasAmount
        {
            get { return __has_amount; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amount = 0D;
                __has_amount = false;
            }
        }
        public double Amount
        {
            get
            {
                return __fld_amount;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amount = value;
                __has_amount = true;
            }
        }
        public bool HasVendor
        {
            get { return __has_vendor; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vendor = "";
                __has_vendor = false;
            }
        }
        public string Vendor
        {
            get
            {
                return __fld_vendor;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Vendor");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vendor = value;
                __has_vendor = true;
            }
        }
        public bool HasDate
        {
            get { return __has_date; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = global::System.DateTime.MinValue;
                __has_date = false;
            }
        }
        public global::System.DateTime Date
        {
            get
            {
                return __fld_date;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = value;
                __has_date = true;
            }
        }
        public bool HasNotes
        {
            get { return __has_notes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = "";
                __has_notes = false;
            }
        }
        public string Notes
        {
            get
            {
                return __fld_notes;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Notes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = value;
                __has_notes = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasStatus
        {
            get { return __has_status; }
        }
        public string Status
        {
            get
            {
                return __fld_status;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Status");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_status = value;
                __has_status = true;
            }
        }
        public bool HasTax1Name
        {
            get { return __has_tax1Name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Name = "";
                __has_tax1Name = false;
            }
        }
        public string Tax1Name
        {
            get
            {
                return __fld_tax1Name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tax1Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Name = value;
                __has_tax1Name = true;
            }
        }
        public bool HasTax1Percent
        {
            get { return __has_tax1Percent; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Percent = 0D;
                __has_tax1Percent = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Tax1Percent
        {
            get
            {
                return __fld_tax1Percent;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Percent = value;
                __has_tax1Percent = true;
            }
        }
        public bool HasTax1Amount
        {
            get { return __has_tax1Amount; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Amount = 0D;
                __has_tax1Amount = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Tax1Amount
        {
            get
            {
                return __fld_tax1Amount;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Amount = value;
                __has_tax1Amount = true;
            }
        }
        public bool HasTax2Name
        {
            get { return __has_tax2Name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Name = "";
                __has_tax2Name = false;
            }
        }
        public string Tax2Name
        {
            get
            {
                return __fld_tax2Name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tax2Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Name = value;
                __has_tax2Name = true;
            }
        }
        public bool HasTax2Percent
        {
            get { return __has_tax2Percent; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Percent = 0D;
                __has_tax2Percent = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Tax2Percent
        {
            get
            {
                return __fld_tax2Percent;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Percent = value;
                __has_tax2Percent = true;
            }
        }
        public bool HasTax2Amount
        {
            get { return __has_tax2Amount; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Amount = 0D;
                __has_tax2Amount = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Tax2Amount
        {
            get
            {
                return __fld_tax2Amount;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Amount = value;
                __has_tax2Amount = true;
            }
        }
        public bool HasCompoundTax
        {
            get { return __has_compoundTax; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_compoundTax = 0D;
                __has_compoundTax = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double CompoundTax
        {
            get
            {
                return __fld_compoundTax;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_compoundTax = value;
                __has_compoundTax = true;
            }
        }
        public bool HasHasReceipt
        {
            get { return __has_hasReceipt; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_hasReceipt = false;
                __has_hasReceipt = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool HasReceipt
        {
            get
            {
                return __fld_hasReceipt;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_hasReceipt = value;
                __has_hasReceipt = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_expenseId && !IsValidExpenseId(__fld_expenseId, onError)) errorCount++;
            if (!__has_staffId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.StaffId));
                errorCount++;
            }
            if (!__has_categoryId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CategoryId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.CategoryId));
                errorCount++;
            }
            if (__has_projectId && !IsValidProjectId(__fld_projectId, onError)) errorCount++;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_vendor && !IsValidVendor(__fld_vendor, onError)) errorCount++;
            if (__has_notes && !IsValidNotes(__fld_notes, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            if (__has_status && !IsValidStatus(__fld_status, onError)) errorCount++;
            if (__has_tax1Name && !IsValidTax1Name(__fld_tax1Name, onError)) errorCount++;
            if (__has_tax2Name && !IsValidTax2Name(__fld_tax2Name, onError)) errorCount++;
            return errorCount;
        }
        public IExpense AsReadOnly()
        {
            if (_readOnly) return this;
            Expense copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_vendor = true;
            __has_notes = true;
            __has_status = true;
            __has_tax1Name = true;
            __has_tax2Name = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_expenseId = false;
            __fld_expenseId = new global::Freshbooks.Library.Model.ExpenseId(0UL);
            __has_staffId = false;
            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
            __has_categoryId = false;
            __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(0UL);
            __has_projectId = false;
            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(0UL);
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_amount = false;
            __fld_amount = 0D;
            __has_vendor = false;
            __fld_vendor = "";
            __has_date = false;
            __fld_date = global::System.DateTime.MinValue;
            __has_notes = false;
            __fld_notes = "";
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_status = false;
            __fld_status = "";
            __has_tax1Name = false;
            __fld_tax1Name = "";
            __has_tax1Percent = false;
            __fld_tax1Percent = 0D;
            __has_tax1Amount = false;
            __fld_tax1Amount = 0D;
            __has_tax2Name = false;
            __fld_tax2Name = "";
            __has_tax2Percent = false;
            __fld_tax2Percent = 0D;
            __has_tax2Amount = false;
            __fld_tax2Amount = 0D;
            __has_compoundTax = false;
            __fld_compoundTax = 0D;
            __has_hasReceipt = false;
            __fld_hasReceipt = false;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Expense value = (Expense)base.MemberwiseClone();
            return value;
        }
        public Expense Clone()
        {
            return (Expense)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpense) MergeFrom((IExpense)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IExpense other)
        {
            if (other.HasExpenseId) ExpenseId = other.ExpenseId;
            if (other.HasStaffId) StaffId = other.StaffId;
            if (other.HasCategoryId) CategoryId = other.CategoryId;
            if (other.HasProjectId) ProjectId = other.ProjectId;
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasAmount) Amount = other.Amount;
            if (other.HasVendor) Vendor = other.Vendor;
            if (other.HasDate) Date = other.Date;
            if (other.HasNotes) Notes = other.Notes;
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasStatus) Status = other.Status;
            if (other.HasTax1Name) Tax1Name = other.Tax1Name;
            if (other.HasTax1Percent) Tax1Percent = other.Tax1Percent;
            if (other.HasTax1Amount) Tax1Amount = other.Tax1Amount;
            if (other.HasTax2Name) Tax2Name = other.Tax2Name;
            if (other.HasTax2Percent) Tax2Percent = other.Tax2Percent;
            if (other.HasTax2Amount) Tax2Amount = other.Tax2Amount;
            if (other.HasCompoundTax) CompoundTax = other.CompoundTax;
            if (other.HasHasReceipt) HasReceipt = other.HasReceipt;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "amount", "category_id", "client_id", "compound_tax", "date", "expense_id", "folder", "has_receipt", "notes", "project_id", "staff_id", "status", "tax1_amount", "tax1_name", "tax1_percent", "tax2_amount", "tax2_name", "tax2_percent", "vendor" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Expense", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_amount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_amount = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_categoryId = new global::Freshbooks.Library.Model.CategoryId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_categoryId = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_compoundTax = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_compoundTax = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_date = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_date = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_expenseId = new global::Freshbooks.Library.Model.ExpenseId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_expenseId = true;
                        }
                        break;
                    }
                    case 6:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 7:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_hasReceipt = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), "1|0", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_hasReceipt = true;
                        }
                        break;
                    }
                    case 8:
                    {
                        __fld_notes = sbuilder.ToString();
                        __has_notes = true;
                        break;
                    }
                    case 9:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_projectId = new global::Freshbooks.Library.Model.ProjectId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_projectId = true;
                        }
                        break;
                    }
                    case 10:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_staffId = true;
                        }
                        break;
                    }
                    case 11:
                    {
                        __fld_status = sbuilder.ToString();
                        __has_status = true;
                        break;
                    }
                    case 12:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_tax1Amount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_tax1Amount = true;
                        }
                        break;
                    }
                    case 13:
                    {
                        __fld_tax1Name = sbuilder.ToString();
                        __has_tax1Name = true;
                        break;
                    }
                    case 14:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_tax1Percent = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_tax1Percent = true;
                        }
                        break;
                    }
                    case 15:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_tax2Amount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_tax2Amount = true;
                        }
                        break;
                    }
                    case 16:
                    {
                        __fld_tax2Name = sbuilder.ToString();
                        __has_tax2Name = true;
                        break;
                    }
                    case 17:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_tax2Percent = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_tax2Percent = true;
                        }
                        break;
                    }
                    case 18:
                    {
                        __fld_vendor = sbuilder.ToString();
                        __has_vendor = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Expense", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_expenseId)
            {
                writer.WriteElementString("expense_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_expenseId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_staffId)
            {
                writer.WriteElementString("staff_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_staffId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_categoryId)
            {
                writer.WriteElementString("category_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_categoryId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_projectId)
            {
                writer.WriteElementString("project_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_projectId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_amount)
            {
                writer.WriteElementString("amount", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_amount, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_vendor)
            {
                writer.WriteElementString("vendor", __fld_vendor);
            }
            if (__has_date)
            {
                writer.WriteElementString("date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_date, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_notes)
            {
                writer.WriteElementString("notes", __fld_notes);
            }
            if (__has_tax1Name)
            {
                writer.WriteElementString("tax1_name", __fld_tax1Name);
            }
            if (__has_tax1Percent)
            {
                writer.WriteElementString("tax1_percent", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_tax1Percent, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_tax1Amount)
            {
                writer.WriteElementString("tax1_amount", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_tax1Amount, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_tax2Name)
            {
                writer.WriteElementString("tax2_name", __fld_tax2Name);
            }
            if (__has_tax2Percent)
            {
                writer.WriteElementString("tax2_percent", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_tax2Percent, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_tax2Amount)
            {
                writer.WriteElementString("tax2_amount", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_tax2Amount, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_compoundTax)
            {
                writer.WriteElementString("compound_tax", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_compoundTax, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_hasReceipt)
            {
                writer.WriteElementString("has_receipt", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_hasReceipt, "1|0", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region ExpenseRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpenseRequest : global::NClassify.Library.IMessage
    {
        bool HasExpense { get; }
        global::Freshbooks.Library.Model.Expense Expense { get; }
    }
    [global::System.Xml.Serialization.XmlType("ExpenseRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExpenseRequest : IExpenseRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ExpenseRequest _defaultInstance = new ExpenseRequest(false);
        public static ExpenseRequest DefaultInstance { get { return _defaultInstance; } }
        static ExpenseRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ExpenseRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ExpenseRequest() : this(true)
        {
        }
        public ExpenseRequest(IExpenseRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Expense = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidExpense(global::Freshbooks.Library.Model.Expense value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expense, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Expense));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Expense, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_expense;
        private global::Freshbooks.Library.Model.Expense __fld_expense;
        #endregion
        #region Instance Members
        public bool HasExpense
        {
            get { return __has_expense; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expense = global::Freshbooks.Library.Model.Expense.DefaultInstance;
                __has_expense = false;
            }
        }
        public global::Freshbooks.Library.Model.Expense Expense
        {
            get
            {
                return __fld_expense;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Expense");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expense = value;
                __has_expense = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_expense)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expense, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Expense));
                errorCount++;
            }
            return errorCount;
        }
        public IExpenseRequest AsReadOnly()
        {
            if (_readOnly) return this;
            ExpenseRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_expense.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_expense = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_expense = false;
            __fld_expense = global::Freshbooks.Library.Model.Expense.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ExpenseRequest value = (ExpenseRequest)base.MemberwiseClone();
            value.__fld_expense = (global::Freshbooks.Library.Model.Expense)value.__fld_expense.Clone();
            return value;
        }
        public ExpenseRequest Clone()
        {
            return (ExpenseRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpenseRequest) MergeFrom((IExpenseRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IExpenseRequest other)
        {
            if (other.HasExpense) Expense = (global::Freshbooks.Library.Model.Expense)other.Expense.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "expense" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ExpenseRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Expense value = __fld_expense;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Expense.DefaultInstance) ? new global::Freshbooks.Library.Model.Expense() : new global::Freshbooks.Library.Model.Expense(__fld_expense);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_expense = value;
                        __has_expense = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ExpenseRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_expense)
            {
                __fld_expense.WriteXml("expense", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ExpenseResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpenseResponse : global::NClassify.Library.IMessage
    {
        bool HasExpense { get; }
        global::Freshbooks.Library.Model.Expense Expense { get; }
    }
    [global::System.Xml.Serialization.XmlType("ExpenseResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExpenseResponse : IExpenseResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ExpenseResponse _defaultInstance = new ExpenseResponse(false);
        public static ExpenseResponse DefaultInstance { get { return _defaultInstance; } }
        static ExpenseResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ExpenseResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ExpenseResponse() : this(true)
        {
        }
        public ExpenseResponse(IExpenseResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Expense = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidExpense(global::Freshbooks.Library.Model.Expense value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expense, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Expense));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Expense, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_expense;
        private global::Freshbooks.Library.Model.Expense __fld_expense;
        #endregion
        #region Instance Members
        public bool HasExpense
        {
            get { return __has_expense; }
        }
        public global::Freshbooks.Library.Model.Expense Expense
        {
            get
            {
                return __fld_expense;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Expense");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expense = value;
                __has_expense = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_expense)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expense, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Expense));
                errorCount++;
            }
            return errorCount;
        }
        public IExpenseResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ExpenseResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_expense.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_expense = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_expense = false;
            __fld_expense = global::Freshbooks.Library.Model.Expense.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ExpenseResponse value = (ExpenseResponse)base.MemberwiseClone();
            value.__fld_expense = (global::Freshbooks.Library.Model.Expense)value.__fld_expense.Clone();
            return value;
        }
        public ExpenseResponse Clone()
        {
            return (ExpenseResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpenseResponse) MergeFrom((IExpenseResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IExpenseResponse other)
        {
            if (other.HasExpense) Expense = (global::Freshbooks.Library.Model.Expense)other.Expense.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "expense" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ExpenseResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Expense value = __fld_expense;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Expense.DefaultInstance) ? new global::Freshbooks.Library.Model.Expense() : new global::Freshbooks.Library.Model.Expense(__fld_expense);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_expense = value;
                        __has_expense = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ExpenseResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Expenses
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpenses : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Expense> ExpenseList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Expenses")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Expenses : global::Freshbooks.Library.Model.PaginatedResponse, IExpenses, global::NClassify.Library.IBuilder
    {
        private static readonly Expenses _defaultInstance = new Expenses(false);
        public static new Expenses DefaultInstance { get { return _defaultInstance; } }
        static Expenses()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Expenses(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Expenses() : this(true)
        {
        }
        public Expenses(IExpenses copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ExpenseList = 10,
        }
        #endregion
        #region _ExpenseList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ExpenseList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Expense>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ExpenseList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Expense> _contents;
            public _ExpenseList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Expense>();
            }
            public _ExpenseList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Expense> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Expense>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Expense item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Expense)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Expense> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Expense this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Expense value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Expense> value)
            {
                foreach (global::Freshbooks.Library.Model.Expense item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Expense value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Expense item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Expense item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Expense item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Expense[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ExpenseList Clone()
            {
                return _readOnly ? this : new _ExpenseList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Expense> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidExpenseList(global::Freshbooks.Library.Model.Expense value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ExpenseList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ExpenseList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ExpenseList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _ExpenseList __fld_expense;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Expense> ExpenseList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Expense>(__fld_expense);
                return __fld_expense;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expense = new _ExpenseList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Expense item in __fld_expense)
            {
                if (!IsValidExpenseList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_expense.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_expense = new _ExpenseList();
        }
        protected override object MemberwiseClone()
        {
            Expenses value = (Expenses)base.MemberwiseClone();
            value.__fld_expense = value.__fld_expense.Clone();
            return value;
        }
        public new Expenses Clone()
        {
            return (Expenses)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpenses) MergeFrom((IExpenses)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IExpenses other)
        {
            foreach (global::Freshbooks.Library.Model.Expense item in other.ExpenseList)
                __fld_expense.Add((global::Freshbooks.Library.Model.Expense)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "expense" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Expense child = new global::Freshbooks.Library.Model.Expense();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_expense.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region ExpensesResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpensesResponse : global::NClassify.Library.IMessage
    {
        bool HasExpenses { get; }
        global::Freshbooks.Library.Model.Expenses Expenses { get; }
    }
    [global::System.Xml.Serialization.XmlType("ExpensesResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExpensesResponse : IExpensesResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ExpensesResponse _defaultInstance = new ExpensesResponse(false);
        public static ExpensesResponse DefaultInstance { get { return _defaultInstance; } }
        static ExpensesResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ExpensesResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ExpensesResponse() : this(true)
        {
        }
        public ExpensesResponse(IExpensesResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Expenses = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidExpenses(global::Freshbooks.Library.Model.Expenses value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expenses, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Expenses));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Expenses, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_expenses;
        private global::Freshbooks.Library.Model.Expenses __fld_expenses;
        #endregion
        #region Instance Members
        public bool HasExpenses
        {
            get { return __has_expenses; }
        }
        public global::Freshbooks.Library.Model.Expenses Expenses
        {
            get
            {
                return __fld_expenses;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Expenses");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_expenses = value;
                __has_expenses = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_expenses)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Expenses, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Expenses));
                errorCount++;
            }
            return errorCount;
        }
        public IExpensesResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ExpensesResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_expenses.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_expenses = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_expenses = false;
            __fld_expenses = global::Freshbooks.Library.Model.Expenses.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ExpensesResponse value = (ExpensesResponse)base.MemberwiseClone();
            value.__fld_expenses = (global::Freshbooks.Library.Model.Expenses)value.__fld_expenses.Clone();
            return value;
        }
        public ExpensesResponse Clone()
        {
            return (ExpensesResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpensesResponse) MergeFrom((IExpensesResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IExpensesResponse other)
        {
            if (other.HasExpenses) Expenses = (global::Freshbooks.Library.Model.Expenses)other.Expenses.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "expenses" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ExpensesResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Expenses value = __fld_expenses;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Expenses.DefaultInstance) ? new global::Freshbooks.Library.Model.Expenses() : new global::Freshbooks.Library.Model.Expenses(__fld_expenses);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_expenses = value;
                        __has_expenses = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ExpensesResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ExpensesRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpensesRequest : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasDateFrom { get; }
        global::System.DateTime DateFrom { get; }
        bool HasDateTo { get; }
        global::System.DateTime DateTo { get; }
    }
    [global::System.Xml.Serialization.XmlType("ExpensesRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExpensesRequest : global::Freshbooks.Library.Model.PaginatedRequest, IExpensesRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ExpensesRequest _defaultInstance = new ExpensesRequest(false);
        public static new ExpensesRequest DefaultInstance { get { return _defaultInstance; } }
        static ExpensesRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ExpensesRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public ExpensesRequest() : this(true)
        {
        }
        public ExpensesRequest(IExpensesRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientId = 10,
            Folder = 11,
            DateFrom = 12,
            DateTo = 13,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_dateFrom;
        private global::System.DateTime __fld_dateFrom;
        private bool __has_dateTo;
        private global::System.DateTime __fld_dateTo;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasDateFrom
        {
            get { return __has_dateFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = global::System.DateTime.MinValue;
                __has_dateFrom = false;
            }
        }
        public global::System.DateTime DateFrom
        {
            get
            {
                return __fld_dateFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = value;
                __has_dateFrom = true;
            }
        }
        public bool HasDateTo
        {
            get { return __has_dateTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = global::System.DateTime.MinValue;
                __has_dateTo = false;
            }
        }
        public global::System.DateTime DateTo
        {
            get
            {
                return __fld_dateTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = value;
                __has_dateTo = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_dateFrom = false;
            __fld_dateFrom = global::System.DateTime.MinValue;
            __has_dateTo = false;
            __fld_dateTo = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            ExpensesRequest value = (ExpensesRequest)base.MemberwiseClone();
            return value;
        }
        public new ExpensesRequest Clone()
        {
            return (ExpensesRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IExpensesRequest) MergeFrom((IExpensesRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IExpensesRequest other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasDateFrom) DateFrom = other.DateFrom;
            if (other.HasDateTo) DateTo = other.DateTo;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id", "date_from", "date_to", "folder" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateFrom = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateTo = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
            if (__has_dateFrom)
            {
                writer.WriteElementString("date_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTo)
            {
                writer.WriteElementString("date_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region ExpenseService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExpenseService
    {
        global::Freshbooks.Library.Model.ExpenseIdentity Create(global::Freshbooks.Library.Model.ExpenseRequest expenseRequest);
        void Update(global::Freshbooks.Library.Model.ExpenseRequest expenseRequest);
        global::Freshbooks.Library.Model.ExpenseResponse Get(global::Freshbooks.Library.Model.ExpenseIdentity expenseIdentity);
        void Delete(global::Freshbooks.Library.Model.ExpenseIdentity expenseIdentity);
        global::Freshbooks.Library.Model.ExpensesResponse List(global::Freshbooks.Library.Model.ExpensesRequest expensesRequest);
    }
    [global::System.Xml.Serialization.XmlType("ExpenseService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExpenseService : IExpenseService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public ExpenseService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public ExpenseService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.ExpenseIdentity Create(global::Freshbooks.Library.Model.ExpenseRequest expenseRequest)
        {
            global::Freshbooks.Library.Model.ExpenseIdentity response = new global::Freshbooks.Library.Model.ExpenseIdentity();
            Invoke("create", expenseRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.ExpenseRequest expenseRequest)
        {
            Invoke("update", expenseRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ExpenseResponse Get(global::Freshbooks.Library.Model.ExpenseIdentity expenseIdentity)
        {
            global::Freshbooks.Library.Model.ExpenseResponse response = new global::Freshbooks.Library.Model.ExpenseResponse();
            Invoke("get", expenseIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.ExpenseIdentity expenseIdentity)
        {
            Invoke("delete", expenseIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ExpensesResponse List(global::Freshbooks.Library.Model.ExpensesRequest expensesRequest)
        {
            global::Freshbooks.Library.Model.ExpensesResponse response = new global::Freshbooks.Library.Model.ExpensesResponse();
            Invoke("list", expensesRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IExpenseService _dispatch;
            public Dispatch(IExpenseService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IExpenseService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.ExpenseRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.ExpenseIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.ExpenseIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.ExpensesRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.ExpenseRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IExpenseService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IExpenseService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IExpenseService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ExpenseRequest request = new global::Freshbooks.Library.Model.ExpenseRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ExpenseIdentity response = new global::Freshbooks.Library.Model.ExpenseIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.ExpenseIdentity request = new global::Freshbooks.Library.Model.ExpenseIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.ExpenseIdentity request = new global::Freshbooks.Library.Model.ExpenseIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.ExpenseResponse response = new global::Freshbooks.Library.Model.ExpenseResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.ExpensesRequest request = new global::Freshbooks.Library.Model.ExpensesRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ExpensesResponse response = new global::Freshbooks.Library.Model.ExpensesResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.ExpenseRequest request = new global::Freshbooks.Library.Model.ExpenseRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IExpenseService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
