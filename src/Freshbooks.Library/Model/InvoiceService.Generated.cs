// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region InvoiceIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceIdentity : global::NClassify.Library.IMessage
    {
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoiceIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceIdentity : IInvoiceIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly InvoiceIdentity _defaultInstance = new InvoiceIdentity(false);
        public static InvoiceIdentity DefaultInstance { get { return _defaultInstance; } }
        static InvoiceIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoiceIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoiceIdentity() : this(true)
        {
        }
        public InvoiceIdentity(IInvoiceIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            InvoiceId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        #endregion
        #region Instance Members
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_invoiceId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.InvoiceId));
                errorCount++;
            }
            return errorCount;
        }
        public IInvoiceIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            InvoiceIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoiceIdentity value = (InvoiceIdentity)base.MemberwiseClone();
            return value;
        }
        public InvoiceIdentity Clone()
        {
            return (InvoiceIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoiceIdentity) MergeFrom((IInvoiceIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoiceIdentity other)
        {
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoiceIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoiceIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Invoice
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoice : global::NClassify.Library.IMessage
    {
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
        bool HasDate { get; }
        global::System.DateTime Date { get; }
        bool HasAmountOutstanding { get; }
        double AmountOutstanding { get; }
        bool HasReturnUri { get; }
        string ReturnUri { get; }
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
        bool HasUpdated { get; }
        global::System.DateTime Updated { get; }
    }
    [global::System.Xml.Serialization.XmlType("Invoice")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Invoice : global::Freshbooks.Library.Model.ClientBill, IInvoice, global::NClassify.Library.IBuilder
    {
        private static readonly Invoice _defaultInstance = new Invoice(false);
        public static new Invoice DefaultInstance { get { return _defaultInstance; } }
        static Invoice()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Invoice(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Invoice() : this(true)
        {
        }
        public Invoice(IInvoice copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            InvoiceId = 1,
            Date = 21,
            AmountOutstanding = 101,
            ReturnUri = 102,
            RecurringId = 103,
            Updated = 104,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidReturnUri(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ReturnUri, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ReturnUri));
                return false;
            }
            return true;
        }
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        private bool __has_date;
        private global::System.DateTime __fld_date;
        private bool __has_amountOutstanding;
        private double __fld_amountOutstanding;
        private bool __has_returnUri;
        private string __fld_returnUri;
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        private bool __has_updated;
        private global::System.DateTime __fld_updated;
        #endregion
        #region Instance Members
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public bool HasDate
        {
            get { return __has_date; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = global::System.DateTime.MinValue;
                __has_date = false;
            }
        }
        public global::System.DateTime Date
        {
            get
            {
                return __fld_date;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = value;
                __has_date = true;
            }
        }
        public bool HasAmountOutstanding
        {
            get { return __has_amountOutstanding; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double AmountOutstanding
        {
            get
            {
                return __fld_amountOutstanding;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amountOutstanding = value;
                __has_amountOutstanding = true;
            }
        }
        public bool HasReturnUri
        {
            get { return __has_returnUri; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_returnUri = "";
                __has_returnUri = false;
            }
        }
        public string ReturnUri
        {
            get
            {
                return __fld_returnUri;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("ReturnUri");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_returnUri = value;
                __has_returnUri = true;
            }
        }
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public bool HasUpdated
        {
            get { return __has_updated; }
        }
        public global::System.DateTime Updated
        {
            get
            {
                return __fld_updated;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updated = value;
                __has_updated = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_invoiceId && !IsValidInvoiceId(__fld_invoiceId, onError)) errorCount++;
            if (__has_returnUri && !IsValidReturnUri(__fld_returnUri, onError)) errorCount++;
            if (__has_recurringId && !IsValidRecurringId(__fld_recurringId, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
            __has_returnUri = true;
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
            __has_date = false;
            __fld_date = global::System.DateTime.MinValue;
            __has_amountOutstanding = false;
            __fld_amountOutstanding = 0D;
            __has_returnUri = false;
            __fld_returnUri = "";
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
            __has_updated = false;
            __fld_updated = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            Invoice value = (Invoice)base.MemberwiseClone();
            return value;
        }
        public new Invoice Clone()
        {
            return (Invoice)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoice) MergeFrom((IInvoice)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IInvoice other)
        {
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
            if (other.HasDate) Date = other.Date;
            if (other.HasAmountOutstanding) AmountOutstanding = other.AmountOutstanding;
            if (other.HasReturnUri) ReturnUri = other.ReturnUri;
            if (other.HasRecurringId) RecurringId = other.RecurringId;
            if (other.HasUpdated) Updated = other.Updated;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "amount_outstanding", "date", "invoice_id", "recurring_id", "return_uri", "updated" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_amountOutstanding = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_amountOutstanding = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_date = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_date = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        __fld_returnUri = sbuilder.ToString();
                        __has_returnUri = true;
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updated = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updated = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_date)
            {
                writer.WriteElementString("date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_date, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_returnUri)
            {
                writer.WriteElementString("return_uri", __fld_returnUri);
            }
        }
        #endregion
    }
    #endregion
    #region InvoiceLines
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceLines : global::NClassify.Library.IMessage
    {
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
        bool HasLines { get; }
        global::Freshbooks.Library.Model.LineItems Lines { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoiceLines")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceLines : IInvoiceLines, global::NClassify.Library.IBuilder
    {
        private static readonly InvoiceLines _defaultInstance = new InvoiceLines(false);
        public static InvoiceLines DefaultInstance { get { return _defaultInstance; } }
        static InvoiceLines()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoiceLines(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoiceLines() : this(true)
        {
        }
        public InvoiceLines(IInvoiceLines copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            InvoiceId = 1,
            Lines = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidLines(global::Freshbooks.Library.Model.LineItems value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Lines, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Lines));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Lines, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        private bool __has_lines;
        private global::Freshbooks.Library.Model.LineItems __fld_lines;
        #endregion
        #region Instance Members
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public bool HasLines
        {
            get { return __has_lines; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lines = global::Freshbooks.Library.Model.LineItems.DefaultInstance;
                __has_lines = false;
            }
        }
        public global::Freshbooks.Library.Model.LineItems Lines
        {
            get
            {
                return __fld_lines;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Lines");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lines = value;
                __has_lines = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_invoiceId && !IsValidInvoiceId(__fld_invoiceId, onError)) errorCount++;
            if (__has_lines && !IsValidLines(__fld_lines, onError)) errorCount++;
            return errorCount;
        }
        public IInvoiceLines AsReadOnly()
        {
            if (_readOnly) return this;
            InvoiceLines copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_lines.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_lines = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
            __has_lines = false;
            __fld_lines = global::Freshbooks.Library.Model.LineItems.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoiceLines value = (InvoiceLines)base.MemberwiseClone();
            value.__fld_lines = (global::Freshbooks.Library.Model.LineItems)value.__fld_lines.Clone();
            return value;
        }
        public InvoiceLines Clone()
        {
            return (InvoiceLines)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoiceLines) MergeFrom((IInvoiceLines)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoiceLines other)
        {
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
            if (other.HasLines) Lines = (global::Freshbooks.Library.Model.LineItems)other.Lines.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice_id", "lines" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoiceLines", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 1:
                    {
                        global::Freshbooks.Library.Model.LineItems value = __fld_lines;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.LineItems.DefaultInstance) ? new global::Freshbooks.Library.Model.LineItems() : new global::Freshbooks.Library.Model.LineItems(__fld_lines);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_lines = value;
                        __has_lines = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoiceLines", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_lines)
            {
                __fld_lines.WriteXml("lines", writer);
            }
        }
        #endregion
    }
    #endregion
    #region InvoiceLineIds
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceLineIds : global::NClassify.Library.IMessage
    {
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId> LineIdList { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoiceLineIds")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceLineIds : IInvoiceLineIds, global::NClassify.Library.IBuilder
    {
        private static readonly InvoiceLineIds _defaultInstance = new InvoiceLineIds(false);
        public static InvoiceLineIds DefaultInstance { get { return _defaultInstance; } }
        static InvoiceLineIds()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoiceLineIds(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoiceLineIds() : this(true)
        {
        }
        public InvoiceLineIds(IInvoiceLineIds copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            InvoiceId = 1,
            LineIdList = 2,
        }
        #endregion
        #region _LineIdList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _LineIdList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("LineIdList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId> _contents;
            public _LineIdList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId>();
            }
            public _LineIdList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineId> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.LineId this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.LineId value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.LineId> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.LineId value) { Modify.Insert(index, value); }
            public bool Remove(global::Freshbooks.Library.Model.LineId item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.LineId item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.LineId item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.LineId[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _LineIdList Clone()
            {
                return _readOnly ? this : new _LineIdList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.LineId> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidLineIdList(global::Freshbooks.Library.Model.LineId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.LineIdList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        private _LineIdList __fld_lineId;
        #endregion
        #region Instance Members
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineId> LineIdList
        {
            get
            {
                return __fld_lineId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lineId = new _LineIdList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_invoiceId && !IsValidInvoiceId(__fld_invoiceId, onError)) errorCount++;
            foreach (global::Freshbooks.Library.Model.LineId item in __fld_lineId)
            {
                if (!IsValidLineIdList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IInvoiceLineIds AsReadOnly()
        {
            if (_readOnly) return this;
            InvoiceLineIds copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_lineId.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
            __fld_lineId = new _LineIdList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoiceLineIds value = (InvoiceLineIds)base.MemberwiseClone();
            value.__fld_lineId = value.__fld_lineId.Clone();
            return value;
        }
        public InvoiceLineIds Clone()
        {
            return (InvoiceLineIds)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoiceLineIds) MergeFrom((IInvoiceLineIds)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoiceLineIds other)
        {
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
            __fld_lineId.AddRange(other.LineIdList);
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice_id", "line_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoiceLineIds", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_lineId.Add(new global::Freshbooks.Library.Model.LineId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture)));
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoiceLineIds", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::Freshbooks.Library.Model.LineId item in __fld_lineId)
            {
                writer.WriteElementString("line_id", global::NClassify.Library.TypeConverter.Instance.ToString(item.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region InvoiceRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceRequest : global::NClassify.Library.IMessage
    {
        bool HasInvoice { get; }
        global::Freshbooks.Library.Model.Invoice Invoice { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoiceRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceRequest : IInvoiceRequest, global::NClassify.Library.IBuilder
    {
        private static readonly InvoiceRequest _defaultInstance = new InvoiceRequest(false);
        public static InvoiceRequest DefaultInstance { get { return _defaultInstance; } }
        static InvoiceRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoiceRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoiceRequest() : this(true)
        {
        }
        public InvoiceRequest(IInvoiceRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Invoice = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoice(global::Freshbooks.Library.Model.Invoice value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Invoice, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Invoice));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Invoice, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoice;
        private global::Freshbooks.Library.Model.Invoice __fld_invoice;
        #endregion
        #region Instance Members
        public bool HasInvoice
        {
            get { return __has_invoice; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoice = global::Freshbooks.Library.Model.Invoice.DefaultInstance;
                __has_invoice = false;
            }
        }
        public global::Freshbooks.Library.Model.Invoice Invoice
        {
            get
            {
                return __fld_invoice;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Invoice");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoice = value;
                __has_invoice = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_invoice)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Invoice, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Invoice));
                errorCount++;
            }
            return errorCount;
        }
        public IInvoiceRequest AsReadOnly()
        {
            if (_readOnly) return this;
            InvoiceRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_invoice.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_invoice = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoice = false;
            __fld_invoice = global::Freshbooks.Library.Model.Invoice.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoiceRequest value = (InvoiceRequest)base.MemberwiseClone();
            value.__fld_invoice = (global::Freshbooks.Library.Model.Invoice)value.__fld_invoice.Clone();
            return value;
        }
        public InvoiceRequest Clone()
        {
            return (InvoiceRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoiceRequest) MergeFrom((IInvoiceRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoiceRequest other)
        {
            if (other.HasInvoice) Invoice = (global::Freshbooks.Library.Model.Invoice)other.Invoice.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoiceRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Invoice value = __fld_invoice;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Invoice.DefaultInstance) ? new global::Freshbooks.Library.Model.Invoice() : new global::Freshbooks.Library.Model.Invoice(__fld_invoice);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_invoice = value;
                        __has_invoice = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoiceRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_invoice)
            {
                __fld_invoice.WriteXml("invoice", writer);
            }
        }
        #endregion
    }
    #endregion
    #region InvoiceResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceResponse : global::NClassify.Library.IMessage
    {
        bool HasInvoice { get; }
        global::Freshbooks.Library.Model.Invoice Invoice { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoiceResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceResponse : IInvoiceResponse, global::NClassify.Library.IBuilder
    {
        private static readonly InvoiceResponse _defaultInstance = new InvoiceResponse(false);
        public static InvoiceResponse DefaultInstance { get { return _defaultInstance; } }
        static InvoiceResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoiceResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoiceResponse() : this(true)
        {
        }
        public InvoiceResponse(IInvoiceResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Invoice = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoice(global::Freshbooks.Library.Model.Invoice value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Invoice, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Invoice));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Invoice, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoice;
        private global::Freshbooks.Library.Model.Invoice __fld_invoice;
        #endregion
        #region Instance Members
        public bool HasInvoice
        {
            get { return __has_invoice; }
        }
        public global::Freshbooks.Library.Model.Invoice Invoice
        {
            get
            {
                return __fld_invoice;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Invoice");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoice = value;
                __has_invoice = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_invoice)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Invoice, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Invoice));
                errorCount++;
            }
            return errorCount;
        }
        public IInvoiceResponse AsReadOnly()
        {
            if (_readOnly) return this;
            InvoiceResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_invoice.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_invoice = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoice = false;
            __fld_invoice = global::Freshbooks.Library.Model.Invoice.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoiceResponse value = (InvoiceResponse)base.MemberwiseClone();
            value.__fld_invoice = (global::Freshbooks.Library.Model.Invoice)value.__fld_invoice.Clone();
            return value;
        }
        public InvoiceResponse Clone()
        {
            return (InvoiceResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoiceResponse) MergeFrom((IInvoiceResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoiceResponse other)
        {
            if (other.HasInvoice) Invoice = (global::Freshbooks.Library.Model.Invoice)other.Invoice.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoiceResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Invoice value = __fld_invoice;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Invoice.DefaultInstance) ? new global::Freshbooks.Library.Model.Invoice() : new global::Freshbooks.Library.Model.Invoice(__fld_invoice);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_invoice = value;
                        __has_invoice = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoiceResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Invoices
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoices : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Invoice> InvoiceList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Invoices")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Invoices : global::Freshbooks.Library.Model.PaginatedResponse, IInvoices, global::NClassify.Library.IBuilder
    {
        private static readonly Invoices _defaultInstance = new Invoices(false);
        public static new Invoices DefaultInstance { get { return _defaultInstance; } }
        static Invoices()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Invoices(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Invoices() : this(true)
        {
        }
        public Invoices(IInvoices copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            InvoiceList = 10,
        }
        #endregion
        #region _InvoiceList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _InvoiceList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Invoice>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("InvoiceList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Invoice> _contents;
            public _InvoiceList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Invoice>();
            }
            public _InvoiceList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Invoice> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Invoice>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Invoice item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Invoice)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Invoice> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Invoice this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Invoice value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Invoice> value)
            {
                foreach (global::Freshbooks.Library.Model.Invoice item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Invoice value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Invoice item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Invoice item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Invoice item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Invoice[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _InvoiceList Clone()
            {
                return _readOnly ? this : new _InvoiceList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Invoice> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoiceList(global::Freshbooks.Library.Model.Invoice value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.InvoiceList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _InvoiceList __fld_invoice;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Invoice> InvoiceList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Invoice>(__fld_invoice);
                return __fld_invoice;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoice = new _InvoiceList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Invoice item in __fld_invoice)
            {
                if (!IsValidInvoiceList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_invoice.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_invoice = new _InvoiceList();
        }
        protected override object MemberwiseClone()
        {
            Invoices value = (Invoices)base.MemberwiseClone();
            value.__fld_invoice = value.__fld_invoice.Clone();
            return value;
        }
        public new Invoices Clone()
        {
            return (Invoices)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoices) MergeFrom((IInvoices)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IInvoices other)
        {
            foreach (global::Freshbooks.Library.Model.Invoice item in other.InvoiceList)
                __fld_invoice.Add((global::Freshbooks.Library.Model.Invoice)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Invoice child = new global::Freshbooks.Library.Model.Invoice();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_invoice.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region InvoicesResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoicesResponse : global::NClassify.Library.IMessage
    {
        bool HasInvoices { get; }
        global::Freshbooks.Library.Model.Invoices Invoices { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoicesResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoicesResponse : IInvoicesResponse, global::NClassify.Library.IBuilder
    {
        private static readonly InvoicesResponse _defaultInstance = new InvoicesResponse(false);
        public static InvoicesResponse DefaultInstance { get { return _defaultInstance; } }
        static InvoicesResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoicesResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoicesResponse() : this(true)
        {
        }
        public InvoicesResponse(IInvoicesResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Invoices = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoices(global::Freshbooks.Library.Model.Invoices value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Invoices, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Invoices));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Invoices, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoices;
        private global::Freshbooks.Library.Model.Invoices __fld_invoices;
        #endregion
        #region Instance Members
        public bool HasInvoices
        {
            get { return __has_invoices; }
        }
        public global::Freshbooks.Library.Model.Invoices Invoices
        {
            get
            {
                return __fld_invoices;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Invoices");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoices = value;
                __has_invoices = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_invoices)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Invoices, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Invoices));
                errorCount++;
            }
            return errorCount;
        }
        public IInvoicesResponse AsReadOnly()
        {
            if (_readOnly) return this;
            InvoicesResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_invoices.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_invoices = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoices = false;
            __fld_invoices = global::Freshbooks.Library.Model.Invoices.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoicesResponse value = (InvoicesResponse)base.MemberwiseClone();
            value.__fld_invoices = (global::Freshbooks.Library.Model.Invoices)value.__fld_invoices.Clone();
            return value;
        }
        public InvoicesResponse Clone()
        {
            return (InvoicesResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoicesResponse) MergeFrom((IInvoicesResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoicesResponse other)
        {
            if (other.HasInvoices) Invoices = (global::Freshbooks.Library.Model.Invoices)other.Invoices.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoices" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoicesResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Invoices value = __fld_invoices;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Invoices.DefaultInstance) ? new global::Freshbooks.Library.Model.Invoices() : new global::Freshbooks.Library.Model.Invoices(__fld_invoices);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_invoices = value;
                        __has_invoices = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoicesResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region InvoicesRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoicesRequest : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasRecurringId { get; }
        global::Freshbooks.Library.Model.RecurringId RecurringId { get; }
        bool HasStatus { get; }
        string Status { get; }
        bool HasNumber { get; }
        string Number { get; }
        bool HasDateFrom { get; }
        global::System.DateTime DateFrom { get; }
        bool HasDateTo { get; }
        global::System.DateTime DateTo { get; }
        bool HasUpdatedFrom { get; }
        global::System.DateTime UpdatedFrom { get; }
        bool HasUpdatedTo { get; }
        global::System.DateTime UpdatedTo { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoicesRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoicesRequest : global::Freshbooks.Library.Model.PaginatedRequest, IInvoicesRequest, global::NClassify.Library.IBuilder
    {
        private static readonly InvoicesRequest _defaultInstance = new InvoicesRequest(false);
        public static new InvoicesRequest DefaultInstance { get { return _defaultInstance; } }
        static InvoicesRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoicesRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public InvoicesRequest() : this(true)
        {
        }
        public InvoicesRequest(IInvoicesRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientId = 10,
            RecurringId = 11,
            Status = 12,
            Number = 13,
            DateFrom = 14,
            DateTo = 15,
            UpdatedFrom = 16,
            UpdatedTo = 17,
            Folder = 18,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidRecurringId(global::Freshbooks.Library.Model.RecurringId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.RecurringId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStatus(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Status, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Status));
                return false;
            }
            return true;
        }
        public static bool IsValidNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Number, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Number));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_recurringId;
        private global::Freshbooks.Library.Model.RecurringId __fld_recurringId;
        private bool __has_status;
        private string __fld_status;
        private bool __has_number;
        private string __fld_number;
        private bool __has_dateFrom;
        private global::System.DateTime __fld_dateFrom;
        private bool __has_dateTo;
        private global::System.DateTime __fld_dateTo;
        private bool __has_updatedFrom;
        private global::System.DateTime __fld_updatedFrom;
        private bool __has_updatedTo;
        private global::System.DateTime __fld_updatedTo;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasRecurringId
        {
            get { return __has_recurringId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
                __has_recurringId = false;
            }
        }
        public global::Freshbooks.Library.Model.RecurringId RecurringId
        {
            get
            {
                return __fld_recurringId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_recurringId = value;
                __has_recurringId = true;
            }
        }
        public bool HasStatus
        {
            get { return __has_status; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_status = "";
                __has_status = false;
            }
        }
        public string Status
        {
            get
            {
                return __fld_status;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Status");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_status = value;
                __has_status = true;
            }
        }
        public bool HasNumber
        {
            get { return __has_number; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = "";
                __has_number = false;
            }
        }
        public string Number
        {
            get
            {
                return __fld_number;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Number");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = value;
                __has_number = true;
            }
        }
        public bool HasDateFrom
        {
            get { return __has_dateFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = global::System.DateTime.MinValue;
                __has_dateFrom = false;
            }
        }
        public global::System.DateTime DateFrom
        {
            get
            {
                return __fld_dateFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = value;
                __has_dateFrom = true;
            }
        }
        public bool HasDateTo
        {
            get { return __has_dateTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = global::System.DateTime.MinValue;
                __has_dateTo = false;
            }
        }
        public global::System.DateTime DateTo
        {
            get
            {
                return __fld_dateTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = value;
                __has_dateTo = true;
            }
        }
        public bool HasUpdatedFrom
        {
            get { return __has_updatedFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = global::System.DateTime.MinValue;
                __has_updatedFrom = false;
            }
        }
        public global::System.DateTime UpdatedFrom
        {
            get
            {
                return __fld_updatedFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = value;
                __has_updatedFrom = true;
            }
        }
        public bool HasUpdatedTo
        {
            get { return __has_updatedTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = global::System.DateTime.MinValue;
                __has_updatedTo = false;
            }
        }
        public global::System.DateTime UpdatedTo
        {
            get
            {
                return __fld_updatedTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = value;
                __has_updatedTo = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_recurringId && !IsValidRecurringId(__fld_recurringId, onError)) errorCount++;
            if (__has_status && !IsValidStatus(__fld_status, onError)) errorCount++;
            if (__has_number && !IsValidNumber(__fld_number, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
            __has_status = true;
            __has_number = true;
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_recurringId = false;
            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(0UL);
            __has_status = false;
            __fld_status = "";
            __has_number = false;
            __fld_number = "";
            __has_dateFrom = false;
            __fld_dateFrom = global::System.DateTime.MinValue;
            __has_dateTo = false;
            __fld_dateTo = global::System.DateTime.MinValue;
            __has_updatedFrom = false;
            __fld_updatedFrom = global::System.DateTime.MinValue;
            __has_updatedTo = false;
            __fld_updatedTo = global::System.DateTime.MinValue;
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
        }
        protected override object MemberwiseClone()
        {
            InvoicesRequest value = (InvoicesRequest)base.MemberwiseClone();
            return value;
        }
        public new InvoicesRequest Clone()
        {
            return (InvoicesRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoicesRequest) MergeFrom((IInvoicesRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IInvoicesRequest other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasRecurringId) RecurringId = other.RecurringId;
            if (other.HasStatus) Status = other.Status;
            if (other.HasNumber) Number = other.Number;
            if (other.HasDateFrom) DateFrom = other.DateFrom;
            if (other.HasDateTo) DateTo = other.DateTo;
            if (other.HasUpdatedFrom) UpdatedFrom = other.UpdatedFrom;
            if (other.HasUpdatedTo) UpdatedTo = other.UpdatedTo;
            if (other.HasFolder) Folder = other.Folder;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id", "date_from", "date_to", "folder", "number", "recurring_id", "status", "updated_from", "updated_to" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateFrom = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateTo = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_number = sbuilder.ToString();
                        __has_number = true;
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_recurringId = new global::Freshbooks.Library.Model.RecurringId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_recurringId = true;
                        }
                        break;
                    }
                    case 6:
                    {
                        __fld_status = sbuilder.ToString();
                        __has_status = true;
                        break;
                    }
                    case 7:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedFrom = true;
                        }
                        break;
                    }
                    case 8:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedTo = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_recurringId)
            {
                writer.WriteElementString("recurring_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_recurringId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_status)
            {
                writer.WriteElementString("status", __fld_status);
            }
            if (__has_number)
            {
                writer.WriteElementString("number", __fld_number);
            }
            if (__has_dateFrom)
            {
                writer.WriteElementString("date_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTo)
            {
                writer.WriteElementString("date_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedFrom)
            {
                writer.WriteElementString("updated_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedTo)
            {
                writer.WriteElementString("updated_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
        }
        #endregion
    }
    #endregion
    #region InvoiceEmailRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceEmailRequest : global::NClassify.Library.IMessage
    {
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
        bool HasSubject { get; }
        string Subject { get; }
        bool HasMessage { get; }
        string Message { get; }
    }
    [global::System.Xml.Serialization.XmlType("InvoiceEmailRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceEmailRequest : IInvoiceEmailRequest, global::NClassify.Library.IBuilder
    {
        private static readonly InvoiceEmailRequest _defaultInstance = new InvoiceEmailRequest(false);
        public static InvoiceEmailRequest DefaultInstance { get { return _defaultInstance; } }
        static InvoiceEmailRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected InvoiceEmailRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public InvoiceEmailRequest() : this(true)
        {
        }
        public InvoiceEmailRequest(IInvoiceEmailRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            InvoiceId = 1,
            Subject = 2,
            Message = 3,
        }
        #endregion
        #region Static Data
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSubject(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Subject, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Subject));
                return false;
            }
            return true;
        }
        public static bool IsValidMessage(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Message, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Message));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        private bool __has_subject;
        private string __fld_subject;
        private bool __has_message;
        private string __fld_message;
        #endregion
        #region Instance Members
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public bool HasSubject
        {
            get { return __has_subject; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_subject = "";
                __has_subject = false;
            }
        }
        public string Subject
        {
            get
            {
                return __fld_subject;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Subject");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_subject = value;
                __has_subject = true;
            }
        }
        public bool HasMessage
        {
            get { return __has_message; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_message = "";
                __has_message = false;
            }
        }
        public string Message
        {
            get
            {
                return __fld_message;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Message");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_message = value;
                __has_message = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_invoiceId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.InvoiceId));
                errorCount++;
            }
            if (!__has_subject)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Subject, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Subject));
                errorCount++;
            }
            if (!__has_message)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Message, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Message));
                errorCount++;
            }
            return errorCount;
        }
        public IInvoiceEmailRequest AsReadOnly()
        {
            if (_readOnly) return this;
            InvoiceEmailRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_subject = true;
            __has_message = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
            __has_subject = false;
            __fld_subject = "";
            __has_message = false;
            __fld_message = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            InvoiceEmailRequest value = (InvoiceEmailRequest)base.MemberwiseClone();
            return value;
        }
        public InvoiceEmailRequest Clone()
        {
            return (InvoiceEmailRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IInvoiceEmailRequest) MergeFrom((IInvoiceEmailRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IInvoiceEmailRequest other)
        {
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
            if (other.HasSubject) Subject = other.Subject;
            if (other.HasMessage) Message = other.Message;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "invoice_id", "message", "subject" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("InvoiceEmailRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_message = sbuilder.ToString();
                        __has_message = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_subject = sbuilder.ToString();
                        __has_subject = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("InvoiceEmailRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_subject)
            {
                writer.WriteElementString("subject", __fld_subject);
            }
            if (__has_message)
            {
                writer.WriteElementString("message", __fld_message);
            }
        }
        #endregion
    }
    #endregion
    #region InvoiceService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IInvoiceService
    {
        global::Freshbooks.Library.Model.InvoiceIdentity Create(global::Freshbooks.Library.Model.InvoiceRequest invoiceRequest);
        void Update(global::Freshbooks.Library.Model.InvoiceRequest invoiceRequest);
        global::Freshbooks.Library.Model.InvoiceResponse Get(global::Freshbooks.Library.Model.InvoiceIdentity invoiceIdentity);
        void Delete(global::Freshbooks.Library.Model.InvoiceIdentity invoiceIdentity);
        global::Freshbooks.Library.Model.InvoicesResponse List(global::Freshbooks.Library.Model.InvoicesRequest invoicesRequest);
        void SendByEmail(global::Freshbooks.Library.Model.InvoiceEmailRequest invoiceEmailRequest);
        void SendBySnailMail(global::Freshbooks.Library.Model.InvoiceIdentity invoiceIdentity);
        global::Freshbooks.Library.Model.InvoiceLineIds LinesAdd(global::Freshbooks.Library.Model.InvoiceLines invoiceLines);
        void LinesUpdate(global::Freshbooks.Library.Model.InvoiceLines invoiceLines);
        void LinesDelete(global::Freshbooks.Library.Model.InvoiceLineIds invoiceLineIds);
    }
    [global::System.Xml.Serialization.XmlType("InvoiceService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class InvoiceService : IInvoiceService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public InvoiceService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public InvoiceService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.InvoiceIdentity Create(global::Freshbooks.Library.Model.InvoiceRequest invoiceRequest)
        {
            global::Freshbooks.Library.Model.InvoiceIdentity response = new global::Freshbooks.Library.Model.InvoiceIdentity();
            Invoke("create", invoiceRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.InvoiceRequest invoiceRequest)
        {
            Invoke("update", invoiceRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.InvoiceResponse Get(global::Freshbooks.Library.Model.InvoiceIdentity invoiceIdentity)
        {
            global::Freshbooks.Library.Model.InvoiceResponse response = new global::Freshbooks.Library.Model.InvoiceResponse();
            Invoke("get", invoiceIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.InvoiceIdentity invoiceIdentity)
        {
            Invoke("delete", invoiceIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.InvoicesResponse List(global::Freshbooks.Library.Model.InvoicesRequest invoicesRequest)
        {
            global::Freshbooks.Library.Model.InvoicesResponse response = new global::Freshbooks.Library.Model.InvoicesResponse();
            Invoke("list", invoicesRequest, response);
            return response;
        }
        public void SendByEmail(global::Freshbooks.Library.Model.InvoiceEmailRequest invoiceEmailRequest)
        {
            Invoke("sendByEmail", invoiceEmailRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public void SendBySnailMail(global::Freshbooks.Library.Model.InvoiceIdentity invoiceIdentity)
        {
            Invoke("sendBySnailMail", invoiceIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.InvoiceLineIds LinesAdd(global::Freshbooks.Library.Model.InvoiceLines invoiceLines)
        {
            global::Freshbooks.Library.Model.InvoiceLineIds response = new global::Freshbooks.Library.Model.InvoiceLineIds();
            Invoke("lines.add", invoiceLines, response);
            return response;
        }
        public void LinesUpdate(global::Freshbooks.Library.Model.InvoiceLines invoiceLines)
        {
            Invoke("lines.update", invoiceLines, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public void LinesDelete(global::Freshbooks.Library.Model.InvoiceLineIds invoiceLineIds)
        {
            Invoke("lines.delete", invoiceLineIds, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IInvoiceService _dispatch;
            public Dispatch(IInvoiceService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IInvoiceService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "lines.add", "lines.delete", "lines.update", "list", "sendByEmail", "sendBySnailMail", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.InvoiceRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.InvoiceIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.InvoiceIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.LinesAdd((global::Freshbooks.Library.Model.InvoiceLines)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.LinesDelete((global::Freshbooks.Library.Model.InvoiceLineIds)(object)request);
                        break;
                    }
                    case 5:
                    {
                        _dispatch.LinesUpdate((global::Freshbooks.Library.Model.InvoiceLines)(object)request);
                        break;
                    }
                    case 6:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.InvoicesRequest)(object)request));
                        break;
                    }
                    case 7:
                    {
                        _dispatch.SendByEmail((global::Freshbooks.Library.Model.InvoiceEmailRequest)(object)request);
                        break;
                    }
                    case 8:
                    {
                        _dispatch.SendBySnailMail((global::Freshbooks.Library.Model.InvoiceIdentity)(object)request);
                        break;
                    }
                    case 9:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.InvoiceRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IInvoiceService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IInvoiceService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IInvoiceService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "lines.add", "lines.delete", "lines.update", "list", "sendByEmail", "sendBySnailMail", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.InvoiceRequest request = new global::Freshbooks.Library.Model.InvoiceRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.InvoiceIdentity response = new global::Freshbooks.Library.Model.InvoiceIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.InvoiceIdentity request = new global::Freshbooks.Library.Model.InvoiceIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.InvoiceIdentity request = new global::Freshbooks.Library.Model.InvoiceIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.InvoiceResponse response = new global::Freshbooks.Library.Model.InvoiceResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.InvoiceLines request = new global::Freshbooks.Library.Model.InvoiceLines();
                        readInput(request);
                        global::Freshbooks.Library.Model.InvoiceLineIds response = new global::Freshbooks.Library.Model.InvoiceLineIds();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.InvoiceLineIds request = new global::Freshbooks.Library.Model.InvoiceLineIds();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 5:
                    {
                        global::Freshbooks.Library.Model.InvoiceLines request = new global::Freshbooks.Library.Model.InvoiceLines();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 6:
                    {
                        global::Freshbooks.Library.Model.InvoicesRequest request = new global::Freshbooks.Library.Model.InvoicesRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.InvoicesResponse response = new global::Freshbooks.Library.Model.InvoicesResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 7:
                    {
                        global::Freshbooks.Library.Model.InvoiceEmailRequest request = new global::Freshbooks.Library.Model.InvoiceEmailRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 8:
                    {
                        global::Freshbooks.Library.Model.InvoiceIdentity request = new global::Freshbooks.Library.Model.InvoiceIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 9:
                    {
                        global::Freshbooks.Library.Model.InvoiceRequest request = new global::Freshbooks.Library.Model.InvoiceRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IInvoiceService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
