// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region ClientContact
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientContact : global::NClassify.Library.IMessage
    {
        bool HasContactId { get; }
        global::Freshbooks.Library.Model.ContactId ContactId { get; }
        bool HasUsername { get; }
        string Username { get; }
        bool HasFirstName { get; }
        string FirstName { get; }
        bool HasLastName { get; }
        string LastName { get; }
        bool HasEmail { get; }
        string Email { get; }
        bool HasPhone1 { get; }
        string Phone1 { get; }
        bool HasPhone2 { get; }
        string Phone2 { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientContact")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientContact : IClientContact, global::NClassify.Library.IBuilder
    {
        private static readonly ClientContact _defaultInstance = new ClientContact(false);
        public static ClientContact DefaultInstance { get { return _defaultInstance; } }
        static ClientContact()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientContact(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientContact() : this(true)
        {
        }
        public ClientContact(IClientContact copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ContactId = 7,
            Username = 1,
            FirstName = 2,
            LastName = 3,
            Email = 4,
            Phone1 = 5,
            Phone2 = 6,
        }
        #endregion
        #region Static Data
        public static bool IsValidContactId(global::Freshbooks.Library.Model.ContactId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ContactId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidUsername(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Username, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Username));
                return false;
            }
            return true;
        }
        public static bool IsValidFirstName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.FirstName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.FirstName));
                return false;
            }
            return true;
        }
        public static bool IsValidLastName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.LastName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.LastName));
                return false;
            }
            return true;
        }
        public static bool IsValidEmail(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Email, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Email));
                return false;
            }
            return true;
        }
        public static bool IsValidPhone1(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Phone1, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Phone1));
                return false;
            }
            return true;
        }
        public static bool IsValidPhone2(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Phone2, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Phone2));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_contactId;
        private global::Freshbooks.Library.Model.ContactId __fld_contactId;
        private bool __has_username;
        private string __fld_username;
        private bool __has_firstName;
        private string __fld_firstName;
        private bool __has_lastName;
        private string __fld_lastName;
        private bool __has_email;
        private string __fld_email;
        private bool __has_phone1;
        private string __fld_phone1;
        private bool __has_phone2;
        private string __fld_phone2;
        #endregion
        #region Instance Members
        public bool HasContactId
        {
            get { return __has_contactId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contactId = new global::Freshbooks.Library.Model.ContactId(0UL);
                __has_contactId = false;
            }
        }
        public global::Freshbooks.Library.Model.ContactId ContactId
        {
            get
            {
                return __fld_contactId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contactId = value;
                __has_contactId = true;
            }
        }
        public bool HasUsername
        {
            get { return __has_username; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = "";
                __has_username = false;
            }
        }
        public string Username
        {
            get
            {
                return __fld_username;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Username");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = value;
                __has_username = true;
            }
        }
        public bool HasFirstName
        {
            get { return __has_firstName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = "";
                __has_firstName = false;
            }
        }
        public string FirstName
        {
            get
            {
                return __fld_firstName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("FirstName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = value;
                __has_firstName = true;
            }
        }
        public bool HasLastName
        {
            get { return __has_lastName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = "";
                __has_lastName = false;
            }
        }
        public string LastName
        {
            get
            {
                return __fld_lastName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("LastName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = value;
                __has_lastName = true;
            }
        }
        public bool HasEmail
        {
            get { return __has_email; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = "";
                __has_email = false;
            }
        }
        public string Email
        {
            get
            {
                return __fld_email;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Email");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = value;
                __has_email = true;
            }
        }
        public bool HasPhone1
        {
            get { return __has_phone1; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_phone1 = "";
                __has_phone1 = false;
            }
        }
        public string Phone1
        {
            get
            {
                return __fld_phone1;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Phone1");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_phone1 = value;
                __has_phone1 = true;
            }
        }
        public bool HasPhone2
        {
            get { return __has_phone2; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_phone2 = "";
                __has_phone2 = false;
            }
        }
        public string Phone2
        {
            get
            {
                return __fld_phone2;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Phone2");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_phone2 = value;
                __has_phone2 = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_contactId && !IsValidContactId(__fld_contactId, onError)) errorCount++;
            if (__has_username && !IsValidUsername(__fld_username, onError)) errorCount++;
            if (__has_firstName && !IsValidFirstName(__fld_firstName, onError)) errorCount++;
            if (__has_lastName && !IsValidLastName(__fld_lastName, onError)) errorCount++;
            if (__has_email && !IsValidEmail(__fld_email, onError)) errorCount++;
            if (__has_phone1 && !IsValidPhone1(__fld_phone1, onError)) errorCount++;
            if (__has_phone2 && !IsValidPhone2(__fld_phone2, onError)) errorCount++;
            return errorCount;
        }
        public IClientContact AsReadOnly()
        {
            if (_readOnly) return this;
            ClientContact copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_username = true;
            __has_firstName = true;
            __has_lastName = true;
            __has_email = true;
            __has_phone1 = true;
            __has_phone2 = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_contactId = false;
            __fld_contactId = new global::Freshbooks.Library.Model.ContactId(0UL);
            __has_username = false;
            __fld_username = "";
            __has_firstName = false;
            __fld_firstName = "";
            __has_lastName = false;
            __fld_lastName = "";
            __has_email = false;
            __fld_email = "";
            __has_phone1 = false;
            __fld_phone1 = "";
            __has_phone2 = false;
            __fld_phone2 = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientContact value = (ClientContact)base.MemberwiseClone();
            return value;
        }
        public ClientContact Clone()
        {
            return (ClientContact)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientContact) MergeFrom((IClientContact)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientContact other)
        {
            if (other.HasContactId) ContactId = other.ContactId;
            if (other.HasUsername) Username = other.Username;
            if (other.HasFirstName) FirstName = other.FirstName;
            if (other.HasLastName) LastName = other.LastName;
            if (other.HasEmail) Email = other.Email;
            if (other.HasPhone1) Phone1 = other.Phone1;
            if (other.HasPhone2) Phone2 = other.Phone2;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "contact_id", "email", "first_name", "last_name", "phone1", "phone2", "username" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientContact", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_contactId = new global::Freshbooks.Library.Model.ContactId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_contactId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_email = sbuilder.ToString();
                        __has_email = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_firstName = sbuilder.ToString();
                        __has_firstName = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_lastName = sbuilder.ToString();
                        __has_lastName = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_phone1 = sbuilder.ToString();
                        __has_phone1 = true;
                        break;
                    }
                    case 5:
                    {
                        __fld_phone2 = sbuilder.ToString();
                        __has_phone2 = true;
                        break;
                    }
                    case 6:
                    {
                        __fld_username = sbuilder.ToString();
                        __has_username = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientContact", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_contactId)
            {
                writer.WriteElementString("contact_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_contactId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_username)
            {
                writer.WriteElementString("username", __fld_username);
            }
            if (__has_firstName)
            {
                writer.WriteElementString("first_name", __fld_firstName);
            }
            if (__has_lastName)
            {
                writer.WriteElementString("last_name", __fld_lastName);
            }
            if (__has_email)
            {
                writer.WriteElementString("email", __fld_email);
            }
            if (__has_phone1)
            {
                writer.WriteElementString("phone1", __fld_phone1);
            }
            if (__has_phone2)
            {
                writer.WriteElementString("phone2", __fld_phone2);
            }
        }
        #endregion
    }
    #endregion
    #region ClientContacts
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientContacts : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientContact> ContactList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientContacts")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientContacts : IClientContacts, global::NClassify.Library.IBuilder
    {
        private static readonly ClientContacts _defaultInstance = new ClientContacts(false);
        public static ClientContacts DefaultInstance { get { return _defaultInstance; } }
        static ClientContacts()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientContacts(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientContacts() : this(true)
        {
        }
        public ClientContacts(IClientContacts copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ContactList = 1,
        }
        #endregion
        #region _ContactList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ContactList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientContact>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ContactList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientContact> _contents;
            public _ContactList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientContact>();
            }
            public _ContactList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientContact> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientContact>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.ClientContact item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.ClientContact)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientContact> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.ClientContact this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.ClientContact value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.ClientContact> value)
            {
                foreach (global::Freshbooks.Library.Model.ClientContact item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.ClientContact value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.ClientContact item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.ClientContact item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.ClientContact item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.ClientContact[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ContactList Clone()
            {
                return _readOnly ? this : new _ContactList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.ClientContact> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidContactList(global::Freshbooks.Library.Model.ClientContact value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ContactList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ContactList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ContactList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _ContactList __fld_contact;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientContact> ContactList
        {
            get
            {
                return __fld_contact;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contact = new _ContactList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.ClientContact item in __fld_contact)
            {
                if (!IsValidContactList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IClientContacts AsReadOnly()
        {
            if (_readOnly) return this;
            ClientContacts copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_contact.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_contact = new _ContactList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientContacts value = (ClientContacts)base.MemberwiseClone();
            value.__fld_contact = value.__fld_contact.Clone();
            return value;
        }
        public ClientContacts Clone()
        {
            return (ClientContacts)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientContacts) MergeFrom((IClientContacts)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientContacts other)
        {
            foreach (global::Freshbooks.Library.Model.ClientContact item in other.ContactList)
                __fld_contact.Add((global::Freshbooks.Library.Model.ClientContact)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "contact" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientContacts", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ClientContact child = new global::Freshbooks.Library.Model.ClientContact();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_contact.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientContacts", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (global::Freshbooks.Library.Model.ClientContact item in __fld_contact)
            {
                item.WriteXml("contact", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ClientCredit
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientCredit : global::NClassify.Library.IMessage
    {
        bool HasCurrency { get; }
        global::Freshbooks.Library.Model.CurrencyCode Currency { get; }
        global::System.Collections.Generic.IList<double> CreditList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientCredit")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientCredit : IClientCredit, global::NClassify.Library.IBuilder
    {
        private static readonly ClientCredit _defaultInstance = new ClientCredit(false);
        public static ClientCredit DefaultInstance { get { return _defaultInstance; } }
        static ClientCredit()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientCredit(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientCredit() : this(true)
        {
        }
        public ClientCredit(IClientCredit copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Currency = 2,
            CreditList = 1,
        }
        #endregion
        #region _CreditList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _CreditList : global::System.Collections.Generic.IList<double>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("CreditList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<double> _contents;
            public _CreditList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<double>();
            }
            public _CreditList(global::System.Collections.Generic.IList<double> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<double>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<double> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public double this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(double value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<double> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, double value) { Modify.Insert(index, value); }
            public bool Remove(double item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(double item) { return _contents.Contains(item); }
            public int IndexOf(double item) { return _contents.IndexOf(item); }
            public void CopyTo(double[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _CreditList Clone()
            {
                return _readOnly ? this : new _CreditList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<double> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidCurrency(global::Freshbooks.Library.Model.CurrencyCode value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Currency, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_currency;
        private global::Freshbooks.Library.Model.CurrencyCode __fld_currency;
        private _CreditList __fld_credit;
        #endregion
        #region Instance Members
        public bool HasCurrency
        {
            get { return __has_currency; }
        }
        public global::Freshbooks.Library.Model.CurrencyCode Currency
        {
            get
            {
                return __fld_currency;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currency = value;
                __has_currency = true;
            }
        }
        public global::System.Collections.Generic.IList<double> CreditList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<double>(__fld_credit);
                return __fld_credit;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_credit = new _CreditList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_currency && !IsValidCurrency(__fld_currency, onError)) errorCount++;
            return errorCount;
        }
        public IClientCredit AsReadOnly()
        {
            if (_readOnly) return this;
            ClientCredit copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_credit.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_currency = false;
            __fld_currency = new global::Freshbooks.Library.Model.CurrencyCode("");
            __fld_credit = new _CreditList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientCredit value = (ClientCredit)base.MemberwiseClone();
            value.__fld_credit = value.__fld_credit.Clone();
            return value;
        }
        public ClientCredit Clone()
        {
            return (ClientCredit)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientCredit) MergeFrom((IClientCredit)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientCredit other)
        {
            if (other.HasCurrency) Currency = other.Currency;
            __fld_credit.AddRange(other.CreditList);
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "credit", "currency" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientCredit", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_credit.Add(global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 1:
                    {
                        __fld_currency = new global::Freshbooks.Library.Model.CurrencyCode(sbuilder.ToString());
                        __has_currency = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientCredit", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ClientCredits
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientCredits : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientCredit> CreditList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientCredits")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientCredits : IClientCredits, global::NClassify.Library.IBuilder
    {
        private static readonly ClientCredits _defaultInstance = new ClientCredits(false);
        public static ClientCredits DefaultInstance { get { return _defaultInstance; } }
        static ClientCredits()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientCredits(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientCredits() : this(true)
        {
        }
        public ClientCredits(IClientCredits copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            CreditList = 1,
        }
        #endregion
        #region _CreditList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _CreditList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientCredit>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("CreditList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientCredit> _contents;
            public _CreditList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientCredit>();
            }
            public _CreditList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientCredit> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientCredit>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.ClientCredit item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.ClientCredit)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ClientCredit> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.ClientCredit this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.ClientCredit value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.ClientCredit> value)
            {
                foreach (global::Freshbooks.Library.Model.ClientCredit item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.ClientCredit value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.ClientCredit item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.ClientCredit item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.ClientCredit item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.ClientCredit[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _CreditList Clone()
            {
                return _readOnly ? this : new _CreditList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.ClientCredit> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidCreditList(global::Freshbooks.Library.Model.ClientCredit value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CreditList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.CreditList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CreditList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _CreditList __fld_credit;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ClientCredit> CreditList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.ClientCredit>(__fld_credit);
                return __fld_credit;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_credit = new _CreditList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.ClientCredit item in __fld_credit)
            {
                if (!IsValidCreditList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IClientCredits AsReadOnly()
        {
            if (_readOnly) return this;
            ClientCredits copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_credit.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_credit = new _CreditList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientCredits value = (ClientCredits)base.MemberwiseClone();
            value.__fld_credit = value.__fld_credit.Clone();
            return value;
        }
        public ClientCredits Clone()
        {
            return (ClientCredits)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientCredits) MergeFrom((IClientCredits)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientCredits other)
        {
            foreach (global::Freshbooks.Library.Model.ClientCredit item in other.CreditList)
                __fld_credit.Add((global::Freshbooks.Library.Model.ClientCredit)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "credit" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientCredits", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ClientCredit child = new global::Freshbooks.Library.Model.ClientCredit();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_credit.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientCredits", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ClientIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientIdentity : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientIdentity : IClientIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly ClientIdentity _defaultInstance = new ClientIdentity(false);
        public static ClientIdentity DefaultInstance { get { return _defaultInstance; } }
        static ClientIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientIdentity() : this(true)
        {
        }
        public ClientIdentity(IClientIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ClientId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_clientId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ClientId));
                errorCount++;
            }
            return errorCount;
        }
        public IClientIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            ClientIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientIdentity value = (ClientIdentity)base.MemberwiseClone();
            return value;
        }
        public ClientIdentity Clone()
        {
            return (ClientIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientIdentity) MergeFrom((IClientIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientIdentity other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Client
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClient : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasFirstName { get; }
        string FirstName { get; }
        bool HasLastName { get; }
        string LastName { get; }
        bool HasOrganization { get; }
        string Organization { get; }
        bool HasEmail { get; }
        string Email { get; }
        bool HasUsername { get; }
        string Username { get; }
        bool HasContacts { get; }
        global::Freshbooks.Library.Model.ClientContacts Contacts { get; }
        bool HasCredits { get; }
        global::Freshbooks.Library.Model.ClientCredits Credits { get; }
        bool HasWorkPhone { get; }
        string WorkPhone { get; }
        bool HasHomePhone { get; }
        string HomePhone { get; }
        bool HasMobile { get; }
        string Mobile { get; }
        bool HasFax { get; }
        string Fax { get; }
        bool HasLanguage { get; }
        string Language { get; }
        bool HasCurrencyCode { get; }
        string CurrencyCode { get; }
        bool HasNotes { get; }
        string Notes { get; }
        bool HasPStreet1 { get; }
        string PStreet1 { get; }
        bool HasPStreet2 { get; }
        string PStreet2 { get; }
        bool HasPCity { get; }
        string PCity { get; }
        bool HasPState { get; }
        string PState { get; }
        bool HasPCountry { get; }
        string PCountry { get; }
        bool HasPCode { get; }
        string PCode { get; }
        bool HasSStreet1 { get; }
        string SStreet1 { get; }
        bool HasSStreet2 { get; }
        string SStreet2 { get; }
        bool HasSCity { get; }
        string SCity { get; }
        bool HasSState { get; }
        string SState { get; }
        bool HasSCountry { get; }
        string SCountry { get; }
        bool HasSCode { get; }
        string SCode { get; }
        bool HasVatName { get; }
        string VatName { get; }
        bool HasVatNumber { get; }
        string VatNumber { get; }
        bool HasLinks { get; }
        global::Freshbooks.Library.Model.Links Links { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasUpdated { get; }
        global::System.DateTime Updated { get; }
    }
    [global::System.Xml.Serialization.XmlType("Client")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Client : IClient, global::NClassify.Library.IBuilder
    {
        private static readonly Client _defaultInstance = new Client(false);
        public static Client DefaultInstance { get { return _defaultInstance; } }
        static Client()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Client(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Client() : this(true)
        {
        }
        public Client(IClient copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ClientId = 1,
            FirstName = 3,
            LastName = 4,
            Organization = 5,
            Email = 6,
            Username = 7,
            Password = 8,
            Contacts = 10,
            Credits = 17,
            WorkPhone = 11,
            HomePhone = 12,
            Mobile = 13,
            Fax = 14,
            Language = 15,
            CurrencyCode = 16,
            Notes = 18,
            PStreet1 = 21,
            PStreet2 = 22,
            PCity = 23,
            PState = 24,
            PCountry = 25,
            PCode = 26,
            SStreet1 = 31,
            SStreet2 = 32,
            SCity = 33,
            SState = 34,
            SCountry = 35,
            SCode = 36,
            VatName = 40,
            VatNumber = 41,
            Links = 38,
            Folder = 44,
            Updated = 45,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidFirstName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.FirstName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.FirstName));
                return false;
            }
            return true;
        }
        public static bool IsValidLastName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.LastName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.LastName));
                return false;
            }
            return true;
        }
        public static bool IsValidOrganization(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Organization, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Organization));
                return false;
            }
            return true;
        }
        public static bool IsValidEmail(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Email, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Email));
                return false;
            }
            return true;
        }
        public static bool IsValidUsername(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Username, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Username));
                return false;
            }
            return true;
        }
        public static bool IsValidPassword(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Password, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Password));
                return false;
            }
            return true;
        }
        public static bool IsValidContacts(global::Freshbooks.Library.Model.ClientContacts value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Contacts, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Contacts));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Contacts, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidCredits(global::Freshbooks.Library.Model.ClientCredits value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Credits, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Credits));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Credits, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidWorkPhone(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.WorkPhone, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.WorkPhone));
                return false;
            }
            return true;
        }
        public static bool IsValidHomePhone(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.HomePhone, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.HomePhone));
                return false;
            }
            return true;
        }
        public static bool IsValidMobile(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Mobile, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Mobile));
                return false;
            }
            return true;
        }
        public static bool IsValidFax(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Fax, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Fax));
                return false;
            }
            return true;
        }
        public static bool IsValidLanguage(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Language, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Language));
                return false;
            }
            return true;
        }
        public static bool IsValidCurrencyCode(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.CurrencyCode, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.CurrencyCode));
                return false;
            }
            return true;
        }
        public static bool IsValidNotes(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Notes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Notes));
                return false;
            }
            return true;
        }
        public static bool IsValidPStreet1(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PStreet1, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PStreet1));
                return false;
            }
            return true;
        }
        public static bool IsValidPStreet2(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PStreet2, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PStreet2));
                return false;
            }
            return true;
        }
        public static bool IsValidPCity(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PCity, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PCity));
                return false;
            }
            return true;
        }
        public static bool IsValidPState(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PState, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PState));
                return false;
            }
            return true;
        }
        public static bool IsValidPCountry(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PCountry, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PCountry));
                return false;
            }
            return true;
        }
        public static bool IsValidPCode(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PCode, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PCode));
                return false;
            }
            return true;
        }
        public static bool IsValidSStreet1(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SStreet1, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SStreet1));
                return false;
            }
            return true;
        }
        public static bool IsValidSStreet2(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SStreet2, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SStreet2));
                return false;
            }
            return true;
        }
        public static bool IsValidSCity(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SCity, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SCity));
                return false;
            }
            return true;
        }
        public static bool IsValidSState(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SState, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SState));
                return false;
            }
            return true;
        }
        public static bool IsValidSCountry(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SCountry, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SCountry));
                return false;
            }
            return true;
        }
        public static bool IsValidSCode(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SCode, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SCode));
                return false;
            }
            return true;
        }
        public static bool IsValidVatName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.VatName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.VatName));
                return false;
            }
            return true;
        }
        public static bool IsValidVatNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.VatNumber, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.VatNumber));
                return false;
            }
            return true;
        }
        public static bool IsValidLinks(global::Freshbooks.Library.Model.Links value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Links, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Links));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Links, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_firstName;
        private string __fld_firstName;
        private bool __has_lastName;
        private string __fld_lastName;
        private bool __has_organization;
        private string __fld_organization;
        private bool __has_email;
        private string __fld_email;
        private bool __has_username;
        private string __fld_username;
        private bool __has_password;
        private string __fld_password;
        private bool __has_contacts;
        private global::Freshbooks.Library.Model.ClientContacts __fld_contacts;
        private bool __has_credits;
        private global::Freshbooks.Library.Model.ClientCredits __fld_credits;
        private bool __has_workPhone;
        private string __fld_workPhone;
        private bool __has_homePhone;
        private string __fld_homePhone;
        private bool __has_mobile;
        private string __fld_mobile;
        private bool __has_fax;
        private string __fld_fax;
        private bool __has_language;
        private string __fld_language;
        private bool __has_currencyCode;
        private string __fld_currencyCode;
        private bool __has_notes;
        private string __fld_notes;
        private bool __has_pStreet1;
        private string __fld_pStreet1;
        private bool __has_pStreet2;
        private string __fld_pStreet2;
        private bool __has_pCity;
        private string __fld_pCity;
        private bool __has_pState;
        private string __fld_pState;
        private bool __has_pCountry;
        private string __fld_pCountry;
        private bool __has_pCode;
        private string __fld_pCode;
        private bool __has_sStreet1;
        private string __fld_sStreet1;
        private bool __has_sStreet2;
        private string __fld_sStreet2;
        private bool __has_sCity;
        private string __fld_sCity;
        private bool __has_sState;
        private string __fld_sState;
        private bool __has_sCountry;
        private string __fld_sCountry;
        private bool __has_sCode;
        private string __fld_sCode;
        private bool __has_vatName;
        private string __fld_vatName;
        private bool __has_vatNumber;
        private string __fld_vatNumber;
        private bool __has_links;
        private global::Freshbooks.Library.Model.Links __fld_links;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_updated;
        private global::System.DateTime __fld_updated;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasFirstName
        {
            get { return __has_firstName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = "";
                __has_firstName = false;
            }
        }
        public string FirstName
        {
            get
            {
                return __fld_firstName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("FirstName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = value;
                __has_firstName = true;
            }
        }
        public bool HasLastName
        {
            get { return __has_lastName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = "";
                __has_lastName = false;
            }
        }
        public string LastName
        {
            get
            {
                return __fld_lastName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("LastName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = value;
                __has_lastName = true;
            }
        }
        public bool HasOrganization
        {
            get { return __has_organization; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_organization = "";
                __has_organization = false;
            }
        }
        public string Organization
        {
            get
            {
                return __fld_organization;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Organization");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_organization = value;
                __has_organization = true;
            }
        }
        public bool HasEmail
        {
            get { return __has_email; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = "";
                __has_email = false;
            }
        }
        public string Email
        {
            get
            {
                return __fld_email;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Email");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = value;
                __has_email = true;
            }
        }
        public bool HasUsername
        {
            get { return __has_username; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = "";
                __has_username = false;
            }
        }
        public string Username
        {
            get
            {
                return __fld_username;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Username");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = value;
                __has_username = true;
            }
        }
        public bool HasPassword
        {
            get { return __has_password; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_password = "";
                __has_password = false;
            }
        }
        public string Password
        {
            private get
            {
                return __fld_password;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Password");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_password = value;
                __has_password = true;
            }
        }
        public bool HasContacts
        {
            get { return __has_contacts; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contacts = global::Freshbooks.Library.Model.ClientContacts.DefaultInstance;
                __has_contacts = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientContacts Contacts
        {
            get
            {
                return __fld_contacts;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Contacts");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contacts = value;
                __has_contacts = true;
            }
        }
        public bool HasCredits
        {
            get { return __has_credits; }
        }
        public global::Freshbooks.Library.Model.ClientCredits Credits
        {
            get
            {
                return __fld_credits;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Credits");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_credits = value;
                __has_credits = true;
            }
        }
        public bool HasWorkPhone
        {
            get { return __has_workPhone; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_workPhone = "";
                __has_workPhone = false;
            }
        }
        public string WorkPhone
        {
            get
            {
                return __fld_workPhone;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("WorkPhone");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_workPhone = value;
                __has_workPhone = true;
            }
        }
        public bool HasHomePhone
        {
            get { return __has_homePhone; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_homePhone = "";
                __has_homePhone = false;
            }
        }
        public string HomePhone
        {
            get
            {
                return __fld_homePhone;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("HomePhone");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_homePhone = value;
                __has_homePhone = true;
            }
        }
        public bool HasMobile
        {
            get { return __has_mobile; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mobile = "";
                __has_mobile = false;
            }
        }
        public string Mobile
        {
            get
            {
                return __fld_mobile;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Mobile");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mobile = value;
                __has_mobile = true;
            }
        }
        public bool HasFax
        {
            get { return __has_fax; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_fax = "";
                __has_fax = false;
            }
        }
        public string Fax
        {
            get
            {
                return __fld_fax;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Fax");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_fax = value;
                __has_fax = true;
            }
        }
        public bool HasLanguage
        {
            get { return __has_language; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_language = "";
                __has_language = false;
            }
        }
        public string Language
        {
            get
            {
                return __fld_language;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Language");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_language = value;
                __has_language = true;
            }
        }
        public bool HasCurrencyCode
        {
            get { return __has_currencyCode; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currencyCode = "";
                __has_currencyCode = false;
            }
        }
        public string CurrencyCode
        {
            get
            {
                return __fld_currencyCode;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("CurrencyCode");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currencyCode = value;
                __has_currencyCode = true;
            }
        }
        public bool HasNotes
        {
            get { return __has_notes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = "";
                __has_notes = false;
            }
        }
        public string Notes
        {
            get
            {
                return __fld_notes;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Notes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = value;
                __has_notes = true;
            }
        }
        public bool HasPStreet1
        {
            get { return __has_pStreet1; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet1 = "";
                __has_pStreet1 = false;
            }
        }
        public string PStreet1
        {
            get
            {
                return __fld_pStreet1;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PStreet1");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet1 = value;
                __has_pStreet1 = true;
            }
        }
        public bool HasPStreet2
        {
            get { return __has_pStreet2; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet2 = "";
                __has_pStreet2 = false;
            }
        }
        public string PStreet2
        {
            get
            {
                return __fld_pStreet2;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PStreet2");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet2 = value;
                __has_pStreet2 = true;
            }
        }
        public bool HasPCity
        {
            get { return __has_pCity; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCity = "";
                __has_pCity = false;
            }
        }
        public string PCity
        {
            get
            {
                return __fld_pCity;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PCity");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCity = value;
                __has_pCity = true;
            }
        }
        public bool HasPState
        {
            get { return __has_pState; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pState = "";
                __has_pState = false;
            }
        }
        public string PState
        {
            get
            {
                return __fld_pState;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PState");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pState = value;
                __has_pState = true;
            }
        }
        public bool HasPCountry
        {
            get { return __has_pCountry; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCountry = "";
                __has_pCountry = false;
            }
        }
        public string PCountry
        {
            get
            {
                return __fld_pCountry;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PCountry");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCountry = value;
                __has_pCountry = true;
            }
        }
        public bool HasPCode
        {
            get { return __has_pCode; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCode = "";
                __has_pCode = false;
            }
        }
        public string PCode
        {
            get
            {
                return __fld_pCode;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PCode");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCode = value;
                __has_pCode = true;
            }
        }
        public bool HasSStreet1
        {
            get { return __has_sStreet1; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sStreet1 = "";
                __has_sStreet1 = false;
            }
        }
        public string SStreet1
        {
            get
            {
                return __fld_sStreet1;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SStreet1");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sStreet1 = value;
                __has_sStreet1 = true;
            }
        }
        public bool HasSStreet2
        {
            get { return __has_sStreet2; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sStreet2 = "";
                __has_sStreet2 = false;
            }
        }
        public string SStreet2
        {
            get
            {
                return __fld_sStreet2;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SStreet2");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sStreet2 = value;
                __has_sStreet2 = true;
            }
        }
        public bool HasSCity
        {
            get { return __has_sCity; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sCity = "";
                __has_sCity = false;
            }
        }
        public string SCity
        {
            get
            {
                return __fld_sCity;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SCity");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sCity = value;
                __has_sCity = true;
            }
        }
        public bool HasSState
        {
            get { return __has_sState; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sState = "";
                __has_sState = false;
            }
        }
        public string SState
        {
            get
            {
                return __fld_sState;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SState");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sState = value;
                __has_sState = true;
            }
        }
        public bool HasSCountry
        {
            get { return __has_sCountry; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sCountry = "";
                __has_sCountry = false;
            }
        }
        public string SCountry
        {
            get
            {
                return __fld_sCountry;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SCountry");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sCountry = value;
                __has_sCountry = true;
            }
        }
        public bool HasSCode
        {
            get { return __has_sCode; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sCode = "";
                __has_sCode = false;
            }
        }
        public string SCode
        {
            get
            {
                return __fld_sCode;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SCode");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sCode = value;
                __has_sCode = true;
            }
        }
        public bool HasVatName
        {
            get { return __has_vatName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatName = "";
                __has_vatName = false;
            }
        }
        public string VatName
        {
            get
            {
                return __fld_vatName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("VatName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatName = value;
                __has_vatName = true;
            }
        }
        public bool HasVatNumber
        {
            get { return __has_vatNumber; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatNumber = "";
                __has_vatNumber = false;
            }
        }
        public string VatNumber
        {
            get
            {
                return __fld_vatNumber;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("VatNumber");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatNumber = value;
                __has_vatNumber = true;
            }
        }
        public bool HasLinks
        {
            get { return __has_links; }
        }
        public global::Freshbooks.Library.Model.Links Links
        {
            get
            {
                return __fld_links;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Links");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_links = value;
                __has_links = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasUpdated
        {
            get { return __has_updated; }
        }
        public global::System.DateTime Updated
        {
            get
            {
                return __fld_updated;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updated = value;
                __has_updated = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (!__has_firstName)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.FirstName, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.FirstName));
                errorCount++;
            }
            if (!__has_lastName)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.LastName, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.LastName));
                errorCount++;
            }
            if (!__has_organization)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Organization, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Organization));
                errorCount++;
            }
            if (!__has_email)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Email, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Email));
                errorCount++;
            }
            if (__has_username && !IsValidUsername(__fld_username, onError)) errorCount++;
            if (__has_password && !IsValidPassword(__fld_password, onError)) errorCount++;
            if (__has_contacts && !IsValidContacts(__fld_contacts, onError)) errorCount++;
            if (__has_credits && !IsValidCredits(__fld_credits, onError)) errorCount++;
            if (__has_workPhone && !IsValidWorkPhone(__fld_workPhone, onError)) errorCount++;
            if (__has_homePhone && !IsValidHomePhone(__fld_homePhone, onError)) errorCount++;
            if (__has_mobile && !IsValidMobile(__fld_mobile, onError)) errorCount++;
            if (__has_fax && !IsValidFax(__fld_fax, onError)) errorCount++;
            if (__has_language && !IsValidLanguage(__fld_language, onError)) errorCount++;
            if (__has_currencyCode && !IsValidCurrencyCode(__fld_currencyCode, onError)) errorCount++;
            if (__has_notes && !IsValidNotes(__fld_notes, onError)) errorCount++;
            if (__has_pStreet1 && !IsValidPStreet1(__fld_pStreet1, onError)) errorCount++;
            if (__has_pStreet2 && !IsValidPStreet2(__fld_pStreet2, onError)) errorCount++;
            if (__has_pCity && !IsValidPCity(__fld_pCity, onError)) errorCount++;
            if (__has_pState && !IsValidPState(__fld_pState, onError)) errorCount++;
            if (__has_pCountry && !IsValidPCountry(__fld_pCountry, onError)) errorCount++;
            if (__has_pCode && !IsValidPCode(__fld_pCode, onError)) errorCount++;
            if (__has_sStreet1 && !IsValidSStreet1(__fld_sStreet1, onError)) errorCount++;
            if (__has_sStreet2 && !IsValidSStreet2(__fld_sStreet2, onError)) errorCount++;
            if (__has_sCity && !IsValidSCity(__fld_sCity, onError)) errorCount++;
            if (__has_sState && !IsValidSState(__fld_sState, onError)) errorCount++;
            if (__has_sCountry && !IsValidSCountry(__fld_sCountry, onError)) errorCount++;
            if (__has_sCode && !IsValidSCode(__fld_sCode, onError)) errorCount++;
            if (__has_vatName && !IsValidVatName(__fld_vatName, onError)) errorCount++;
            if (__has_vatNumber && !IsValidVatNumber(__fld_vatNumber, onError)) errorCount++;
            if (__has_links && !IsValidLinks(__fld_links, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            return errorCount;
        }
        public IClient AsReadOnly()
        {
            if (_readOnly) return this;
            Client copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_contacts.MakeReadOnly();
            __fld_credits.MakeReadOnly();
            __fld_links.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_firstName = true;
            __has_lastName = true;
            __has_organization = true;
            __has_email = true;
            __has_username = true;
            __has_password = true;
            __has_contacts = true;
            __has_credits = true;
            __has_workPhone = true;
            __has_homePhone = true;
            __has_mobile = true;
            __has_fax = true;
            __has_language = true;
            __has_currencyCode = true;
            __has_notes = true;
            __has_pStreet1 = true;
            __has_pStreet2 = true;
            __has_pCity = true;
            __has_pState = true;
            __has_pCountry = true;
            __has_pCode = true;
            __has_sStreet1 = true;
            __has_sStreet2 = true;
            __has_sCity = true;
            __has_sState = true;
            __has_sCountry = true;
            __has_sCode = true;
            __has_vatName = true;
            __has_vatNumber = true;
            __has_links = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_firstName = false;
            __fld_firstName = "";
            __has_lastName = false;
            __fld_lastName = "";
            __has_organization = false;
            __fld_organization = "";
            __has_email = false;
            __fld_email = "";
            __has_username = false;
            __fld_username = "";
            __has_password = false;
            __fld_password = "";
            __has_contacts = false;
            __fld_contacts = global::Freshbooks.Library.Model.ClientContacts.DefaultInstance;
            __has_credits = false;
            __fld_credits = global::Freshbooks.Library.Model.ClientCredits.DefaultInstance;
            __has_workPhone = false;
            __fld_workPhone = "";
            __has_homePhone = false;
            __fld_homePhone = "";
            __has_mobile = false;
            __fld_mobile = "";
            __has_fax = false;
            __fld_fax = "";
            __has_language = false;
            __fld_language = "";
            __has_currencyCode = false;
            __fld_currencyCode = "";
            __has_notes = false;
            __fld_notes = "";
            __has_pStreet1 = false;
            __fld_pStreet1 = "";
            __has_pStreet2 = false;
            __fld_pStreet2 = "";
            __has_pCity = false;
            __fld_pCity = "";
            __has_pState = false;
            __fld_pState = "";
            __has_pCountry = false;
            __fld_pCountry = "";
            __has_pCode = false;
            __fld_pCode = "";
            __has_sStreet1 = false;
            __fld_sStreet1 = "";
            __has_sStreet2 = false;
            __fld_sStreet2 = "";
            __has_sCity = false;
            __fld_sCity = "";
            __has_sState = false;
            __fld_sState = "";
            __has_sCountry = false;
            __fld_sCountry = "";
            __has_sCode = false;
            __fld_sCode = "";
            __has_vatName = false;
            __fld_vatName = "";
            __has_vatNumber = false;
            __fld_vatNumber = "";
            __has_links = false;
            __fld_links = global::Freshbooks.Library.Model.Links.DefaultInstance;
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_updated = false;
            __fld_updated = global::System.DateTime.MinValue;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Client value = (Client)base.MemberwiseClone();
            value.__fld_contacts = (global::Freshbooks.Library.Model.ClientContacts)value.__fld_contacts.Clone();
            value.__fld_credits = (global::Freshbooks.Library.Model.ClientCredits)value.__fld_credits.Clone();
            value.__fld_links = (global::Freshbooks.Library.Model.Links)value.__fld_links.Clone();
            return value;
        }
        public Client Clone()
        {
            return (Client)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClient) MergeFrom((IClient)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClient other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasFirstName) FirstName = other.FirstName;
            if (other.HasLastName) LastName = other.LastName;
            if (other.HasOrganization) Organization = other.Organization;
            if (other.HasEmail) Email = other.Email;
            if (other.HasUsername) Username = other.Username;
            if (other.HasContacts) Contacts = (global::Freshbooks.Library.Model.ClientContacts)other.Contacts.Clone();
            if (other.HasCredits) Credits = (global::Freshbooks.Library.Model.ClientCredits)other.Credits.Clone();
            if (other.HasWorkPhone) WorkPhone = other.WorkPhone;
            if (other.HasHomePhone) HomePhone = other.HomePhone;
            if (other.HasMobile) Mobile = other.Mobile;
            if (other.HasFax) Fax = other.Fax;
            if (other.HasLanguage) Language = other.Language;
            if (other.HasCurrencyCode) CurrencyCode = other.CurrencyCode;
            if (other.HasNotes) Notes = other.Notes;
            if (other.HasPStreet1) PStreet1 = other.PStreet1;
            if (other.HasPStreet2) PStreet2 = other.PStreet2;
            if (other.HasPCity) PCity = other.PCity;
            if (other.HasPState) PState = other.PState;
            if (other.HasPCountry) PCountry = other.PCountry;
            if (other.HasPCode) PCode = other.PCode;
            if (other.HasSStreet1) SStreet1 = other.SStreet1;
            if (other.HasSStreet2) SStreet2 = other.SStreet2;
            if (other.HasSCity) SCity = other.SCity;
            if (other.HasSState) SState = other.SState;
            if (other.HasSCountry) SCountry = other.SCountry;
            if (other.HasSCode) SCode = other.SCode;
            if (other.HasVatName) VatName = other.VatName;
            if (other.HasVatNumber) VatNumber = other.VatNumber;
            if (other.HasLinks) Links = (global::Freshbooks.Library.Model.Links)other.Links.Clone();
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasUpdated) Updated = other.Updated;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id", "contacts", "credits", "currency_code", "email", "fax", "first_name", "folder", "home_phone", "language", "last_name", "links", "mobile", "notes", "organization", "p_city", "p_code", "p_country", "p_state", "p_street1", "p_street2", "s_city", "s_code", "s_country", "s_state", "s_street1", "s_street2", "updated", "username", "vat_name", "vat_number", "work_phone" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Client", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 1:
                    {
                        global::Freshbooks.Library.Model.ClientContacts value = __fld_contacts;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.ClientContacts.DefaultInstance) ? new global::Freshbooks.Library.Model.ClientContacts() : new global::Freshbooks.Library.Model.ClientContacts(__fld_contacts);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_contacts = value;
                        __has_contacts = true;
                        break;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.ClientCredits value = __fld_credits;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.ClientCredits.DefaultInstance) ? new global::Freshbooks.Library.Model.ClientCredits() : new global::Freshbooks.Library.Model.ClientCredits(__fld_credits);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_credits = value;
                        __has_credits = true;
                        break;
                    }
                    case 11:
                    {
                        global::Freshbooks.Library.Model.Links value = __fld_links;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Links.DefaultInstance) ? new global::Freshbooks.Library.Model.Links() : new global::Freshbooks.Library.Model.Links(__fld_links);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_links = value;
                        __has_links = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        __fld_currencyCode = sbuilder.ToString();
                        __has_currencyCode = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_email = sbuilder.ToString();
                        __has_email = true;
                        break;
                    }
                    case 5:
                    {
                        __fld_fax = sbuilder.ToString();
                        __has_fax = true;
                        break;
                    }
                    case 6:
                    {
                        __fld_firstName = sbuilder.ToString();
                        __has_firstName = true;
                        break;
                    }
                    case 7:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 8:
                    {
                        __fld_homePhone = sbuilder.ToString();
                        __has_homePhone = true;
                        break;
                    }
                    case 9:
                    {
                        __fld_language = sbuilder.ToString();
                        __has_language = true;
                        break;
                    }
                    case 10:
                    {
                        __fld_lastName = sbuilder.ToString();
                        __has_lastName = true;
                        break;
                    }
                    case 12:
                    {
                        __fld_mobile = sbuilder.ToString();
                        __has_mobile = true;
                        break;
                    }
                    case 13:
                    {
                        __fld_notes = sbuilder.ToString();
                        __has_notes = true;
                        break;
                    }
                    case 14:
                    {
                        __fld_organization = sbuilder.ToString();
                        __has_organization = true;
                        break;
                    }
                    case 15:
                    {
                        __fld_pCity = sbuilder.ToString();
                        __has_pCity = true;
                        break;
                    }
                    case 16:
                    {
                        __fld_pCode = sbuilder.ToString();
                        __has_pCode = true;
                        break;
                    }
                    case 17:
                    {
                        __fld_pCountry = sbuilder.ToString();
                        __has_pCountry = true;
                        break;
                    }
                    case 18:
                    {
                        __fld_pState = sbuilder.ToString();
                        __has_pState = true;
                        break;
                    }
                    case 19:
                    {
                        __fld_pStreet1 = sbuilder.ToString();
                        __has_pStreet1 = true;
                        break;
                    }
                    case 20:
                    {
                        __fld_pStreet2 = sbuilder.ToString();
                        __has_pStreet2 = true;
                        break;
                    }
                    case 21:
                    {
                        __fld_sCity = sbuilder.ToString();
                        __has_sCity = true;
                        break;
                    }
                    case 22:
                    {
                        __fld_sCode = sbuilder.ToString();
                        __has_sCode = true;
                        break;
                    }
                    case 23:
                    {
                        __fld_sCountry = sbuilder.ToString();
                        __has_sCountry = true;
                        break;
                    }
                    case 24:
                    {
                        __fld_sState = sbuilder.ToString();
                        __has_sState = true;
                        break;
                    }
                    case 25:
                    {
                        __fld_sStreet1 = sbuilder.ToString();
                        __has_sStreet1 = true;
                        break;
                    }
                    case 26:
                    {
                        __fld_sStreet2 = sbuilder.ToString();
                        __has_sStreet2 = true;
                        break;
                    }
                    case 27:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updated = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updated = true;
                        }
                        break;
                    }
                    case 28:
                    {
                        __fld_username = sbuilder.ToString();
                        __has_username = true;
                        break;
                    }
                    case 29:
                    {
                        __fld_vatName = sbuilder.ToString();
                        __has_vatName = true;
                        break;
                    }
                    case 30:
                    {
                        __fld_vatNumber = sbuilder.ToString();
                        __has_vatNumber = true;
                        break;
                    }
                    case 31:
                    {
                        __fld_workPhone = sbuilder.ToString();
                        __has_workPhone = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Client", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_firstName)
            {
                writer.WriteElementString("first_name", __fld_firstName);
            }
            if (__has_lastName)
            {
                writer.WriteElementString("last_name", __fld_lastName);
            }
            if (__has_organization)
            {
                writer.WriteElementString("organization", __fld_organization);
            }
            if (__has_email)
            {
                writer.WriteElementString("email", __fld_email);
            }
            if (__has_username)
            {
                writer.WriteElementString("username", __fld_username);
            }
            if (__has_password)
            {
                writer.WriteElementString("password", __fld_password);
            }
            if (__has_contacts)
            {
                __fld_contacts.WriteXml("contacts", writer);
            }
            if (__has_workPhone)
            {
                writer.WriteElementString("work_phone", __fld_workPhone);
            }
            if (__has_homePhone)
            {
                writer.WriteElementString("home_phone", __fld_homePhone);
            }
            if (__has_mobile)
            {
                writer.WriteElementString("mobile", __fld_mobile);
            }
            if (__has_fax)
            {
                writer.WriteElementString("fax", __fld_fax);
            }
            if (__has_language)
            {
                writer.WriteElementString("language", __fld_language);
            }
            if (__has_currencyCode)
            {
                writer.WriteElementString("currency_code", __fld_currencyCode);
            }
            if (__has_notes)
            {
                writer.WriteElementString("notes", __fld_notes);
            }
            if (__has_pStreet1)
            {
                writer.WriteElementString("p_street1", __fld_pStreet1);
            }
            if (__has_pStreet2)
            {
                writer.WriteElementString("p_street2", __fld_pStreet2);
            }
            if (__has_pCity)
            {
                writer.WriteElementString("p_city", __fld_pCity);
            }
            if (__has_pState)
            {
                writer.WriteElementString("p_state", __fld_pState);
            }
            if (__has_pCountry)
            {
                writer.WriteElementString("p_country", __fld_pCountry);
            }
            if (__has_pCode)
            {
                writer.WriteElementString("p_code", __fld_pCode);
            }
            if (__has_sStreet1)
            {
                writer.WriteElementString("s_street1", __fld_sStreet1);
            }
            if (__has_sStreet2)
            {
                writer.WriteElementString("s_street2", __fld_sStreet2);
            }
            if (__has_sCity)
            {
                writer.WriteElementString("s_city", __fld_sCity);
            }
            if (__has_sState)
            {
                writer.WriteElementString("s_state", __fld_sState);
            }
            if (__has_sCountry)
            {
                writer.WriteElementString("s_country", __fld_sCountry);
            }
            if (__has_sCode)
            {
                writer.WriteElementString("s_code", __fld_sCode);
            }
            if (__has_vatName)
            {
                writer.WriteElementString("vat_name", __fld_vatName);
            }
            if (__has_vatNumber)
            {
                writer.WriteElementString("vat_number", __fld_vatNumber);
            }
        }
        #endregion
    }
    #endregion
    #region ClientRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientRequest : global::NClassify.Library.IMessage
    {
        bool HasClient { get; }
        global::Freshbooks.Library.Model.Client Client { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientRequest : IClientRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ClientRequest _defaultInstance = new ClientRequest(false);
        public static ClientRequest DefaultInstance { get { return _defaultInstance; } }
        static ClientRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientRequest() : this(true)
        {
        }
        public ClientRequest(IClientRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Client = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidClient(global::Freshbooks.Library.Model.Client value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Client, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Client));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Client, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_client;
        private global::Freshbooks.Library.Model.Client __fld_client;
        #endregion
        #region Instance Members
        public bool HasClient
        {
            get { return __has_client; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_client = global::Freshbooks.Library.Model.Client.DefaultInstance;
                __has_client = false;
            }
        }
        public global::Freshbooks.Library.Model.Client Client
        {
            get
            {
                return __fld_client;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Client");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_client = value;
                __has_client = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_client)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Client, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Client));
                errorCount++;
            }
            return errorCount;
        }
        public IClientRequest AsReadOnly()
        {
            if (_readOnly) return this;
            ClientRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_client.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_client = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_client = false;
            __fld_client = global::Freshbooks.Library.Model.Client.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientRequest value = (ClientRequest)base.MemberwiseClone();
            value.__fld_client = (global::Freshbooks.Library.Model.Client)value.__fld_client.Clone();
            return value;
        }
        public ClientRequest Clone()
        {
            return (ClientRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientRequest) MergeFrom((IClientRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientRequest other)
        {
            if (other.HasClient) Client = (global::Freshbooks.Library.Model.Client)other.Client.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Client value = __fld_client;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Client.DefaultInstance) ? new global::Freshbooks.Library.Model.Client() : new global::Freshbooks.Library.Model.Client(__fld_client);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_client = value;
                        __has_client = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_client)
            {
                __fld_client.WriteXml("client", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ClientResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientResponse : global::NClassify.Library.IMessage
    {
        bool HasClient { get; }
        global::Freshbooks.Library.Model.Client Client { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientResponse : IClientResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ClientResponse _defaultInstance = new ClientResponse(false);
        public static ClientResponse DefaultInstance { get { return _defaultInstance; } }
        static ClientResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientResponse() : this(true)
        {
        }
        public ClientResponse(IClientResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Client = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidClient(global::Freshbooks.Library.Model.Client value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Client, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Client));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Client, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_client;
        private global::Freshbooks.Library.Model.Client __fld_client;
        #endregion
        #region Instance Members
        public bool HasClient
        {
            get { return __has_client; }
        }
        public global::Freshbooks.Library.Model.Client Client
        {
            get
            {
                return __fld_client;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Client");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_client = value;
                __has_client = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_client)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Client, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Client));
                errorCount++;
            }
            return errorCount;
        }
        public IClientResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ClientResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_client.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_client = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_client = false;
            __fld_client = global::Freshbooks.Library.Model.Client.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientResponse value = (ClientResponse)base.MemberwiseClone();
            value.__fld_client = (global::Freshbooks.Library.Model.Client)value.__fld_client.Clone();
            return value;
        }
        public ClientResponse Clone()
        {
            return (ClientResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientResponse) MergeFrom((IClientResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientResponse other)
        {
            if (other.HasClient) Client = (global::Freshbooks.Library.Model.Client)other.Client.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Client value = __fld_client;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Client.DefaultInstance) ? new global::Freshbooks.Library.Model.Client() : new global::Freshbooks.Library.Model.Client(__fld_client);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_client = value;
                        __has_client = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Clients
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClients : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Client> ClientList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Clients")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Clients : global::Freshbooks.Library.Model.PaginatedResponse, IClients, global::NClassify.Library.IBuilder
    {
        private static readonly Clients _defaultInstance = new Clients(false);
        public static new Clients DefaultInstance { get { return _defaultInstance; } }
        static Clients()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Clients(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Clients() : this(true)
        {
        }
        public Clients(IClients copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientList = 10,
        }
        #endregion
        #region _ClientList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ClientList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Client>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ClientList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Client> _contents;
            public _ClientList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Client>();
            }
            public _ClientList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Client> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Client>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Client item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Client)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Client> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Client this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Client value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Client> value)
            {
                foreach (global::Freshbooks.Library.Model.Client item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Client value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Client item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Client item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Client item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Client[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ClientList Clone()
            {
                return _readOnly ? this : new _ClientList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Client> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidClientList(global::Freshbooks.Library.Model.Client value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ClientList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ClientList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _ClientList __fld_client;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Client> ClientList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Client>(__fld_client);
                return __fld_client;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_client = new _ClientList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Client item in __fld_client)
            {
                if (!IsValidClientList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_client.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_client = new _ClientList();
        }
        protected override object MemberwiseClone()
        {
            Clients value = (Clients)base.MemberwiseClone();
            value.__fld_client = value.__fld_client.Clone();
            return value;
        }
        public new Clients Clone()
        {
            return (Clients)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClients) MergeFrom((IClients)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IClients other)
        {
            foreach (global::Freshbooks.Library.Model.Client item in other.ClientList)
                __fld_client.Add((global::Freshbooks.Library.Model.Client)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Client child = new global::Freshbooks.Library.Model.Client();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_client.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region ClientsResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientsResponse : global::NClassify.Library.IMessage
    {
        bool HasClients { get; }
        global::Freshbooks.Library.Model.Clients Clients { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientsResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientsResponse : IClientsResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ClientsResponse _defaultInstance = new ClientsResponse(false);
        public static ClientsResponse DefaultInstance { get { return _defaultInstance; } }
        static ClientsResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientsResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientsResponse() : this(true)
        {
        }
        public ClientsResponse(IClientsResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Clients = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidClients(global::Freshbooks.Library.Model.Clients value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Clients, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Clients));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Clients, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_clients;
        private global::Freshbooks.Library.Model.Clients __fld_clients;
        #endregion
        #region Instance Members
        public bool HasClients
        {
            get { return __has_clients; }
        }
        public global::Freshbooks.Library.Model.Clients Clients
        {
            get
            {
                return __fld_clients;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Clients");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clients = value;
                __has_clients = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_clients)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Clients, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Clients));
                errorCount++;
            }
            return errorCount;
        }
        public IClientsResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ClientsResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_clients.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_clients = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_clients = false;
            __fld_clients = global::Freshbooks.Library.Model.Clients.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientsResponse value = (ClientsResponse)base.MemberwiseClone();
            value.__fld_clients = (global::Freshbooks.Library.Model.Clients)value.__fld_clients.Clone();
            return value;
        }
        public ClientsResponse Clone()
        {
            return (ClientsResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientsResponse) MergeFrom((IClientsResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientsResponse other)
        {
            if (other.HasClients) Clients = (global::Freshbooks.Library.Model.Clients)other.Clients.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "clients" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientsResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Clients value = __fld_clients;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Clients.DefaultInstance) ? new global::Freshbooks.Library.Model.Clients() : new global::Freshbooks.Library.Model.Clients(__fld_clients);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_clients = value;
                        __has_clients = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientsResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ClientsRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientsRequest : global::NClassify.Library.IMessage
    {
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasEmail { get; }
        string Email { get; }
        bool HasUsername { get; }
        string Username { get; }
        bool HasUpdatedFrom { get; }
        global::System.DateTime UpdatedFrom { get; }
        bool HasUpdatedTo { get; }
        global::System.DateTime UpdatedTo { get; }
        bool HasNotes { get; }
        string Notes { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientsRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientsRequest : global::Freshbooks.Library.Model.PaginatedRequest, IClientsRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ClientsRequest _defaultInstance = new ClientsRequest(false);
        public static new ClientsRequest DefaultInstance { get { return _defaultInstance; } }
        static ClientsRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientsRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public ClientsRequest() : this(true)
        {
        }
        public ClientsRequest(IClientsRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            Folder = 10,
            Email = 11,
            Username = 12,
            UpdatedFrom = 13,
            UpdatedTo = 14,
            Notes = 15,
        }
        #endregion
        #region Static Data
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidEmail(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Email, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Email));
                return false;
            }
            return true;
        }
        public static bool IsValidUsername(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Username, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Username));
                return false;
            }
            return true;
        }
        public static bool IsValidNotes(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Notes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Notes));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_email;
        private string __fld_email;
        private bool __has_username;
        private string __fld_username;
        private bool __has_updatedFrom;
        private global::System.DateTime __fld_updatedFrom;
        private bool __has_updatedTo;
        private global::System.DateTime __fld_updatedTo;
        private bool __has_notes;
        private string __fld_notes;
        #endregion
        #region Instance Members
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasEmail
        {
            get { return __has_email; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = "";
                __has_email = false;
            }
        }
        public string Email
        {
            get
            {
                return __fld_email;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Email");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_email = value;
                __has_email = true;
            }
        }
        public bool HasUsername
        {
            get { return __has_username; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = "";
                __has_username = false;
            }
        }
        public string Username
        {
            get
            {
                return __fld_username;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Username");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_username = value;
                __has_username = true;
            }
        }
        public bool HasUpdatedFrom
        {
            get { return __has_updatedFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = global::System.DateTime.MinValue;
                __has_updatedFrom = false;
            }
        }
        public global::System.DateTime UpdatedFrom
        {
            get
            {
                return __fld_updatedFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = value;
                __has_updatedFrom = true;
            }
        }
        public bool HasUpdatedTo
        {
            get { return __has_updatedTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = global::System.DateTime.MinValue;
                __has_updatedTo = false;
            }
        }
        public global::System.DateTime UpdatedTo
        {
            get
            {
                return __fld_updatedTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = value;
                __has_updatedTo = true;
            }
        }
        public bool HasNotes
        {
            get { return __has_notes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = "";
                __has_notes = false;
            }
        }
        public string Notes
        {
            get
            {
                return __fld_notes;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Notes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = value;
                __has_notes = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            if (__has_email && !IsValidEmail(__fld_email, onError)) errorCount++;
            if (__has_username && !IsValidUsername(__fld_username, onError)) errorCount++;
            if (__has_notes && !IsValidNotes(__fld_notes, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
            __has_email = true;
            __has_username = true;
            __has_notes = true;
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_email = false;
            __fld_email = "";
            __has_username = false;
            __fld_username = "";
            __has_updatedFrom = false;
            __fld_updatedFrom = global::System.DateTime.MinValue;
            __has_updatedTo = false;
            __fld_updatedTo = global::System.DateTime.MinValue;
            __has_notes = false;
            __fld_notes = "";
        }
        protected override object MemberwiseClone()
        {
            ClientsRequest value = (ClientsRequest)base.MemberwiseClone();
            return value;
        }
        public new ClientsRequest Clone()
        {
            return (ClientsRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientsRequest) MergeFrom((IClientsRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IClientsRequest other)
        {
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasEmail) Email = other.Email;
            if (other.HasUsername) Username = other.Username;
            if (other.HasUpdatedFrom) UpdatedFrom = other.UpdatedFrom;
            if (other.HasUpdatedTo) UpdatedTo = other.UpdatedTo;
            if (other.HasNotes) Notes = other.Notes;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "email", "folder", "notes", "updated_from", "updated_to", "username" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_email = sbuilder.ToString();
                        __has_email = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_notes = sbuilder.ToString();
                        __has_notes = true;
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedFrom = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedTo = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        __fld_username = sbuilder.ToString();
                        __has_username = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
            if (__has_email)
            {
                writer.WriteElementString("email", __fld_email);
            }
            if (__has_username)
            {
                writer.WriteElementString("username", __fld_username);
            }
            if (__has_updatedFrom)
            {
                writer.WriteElementString("updated_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedTo)
            {
                writer.WriteElementString("updated_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_notes)
            {
                writer.WriteElementString("notes", __fld_notes);
            }
        }
        #endregion
    }
    #endregion
    #region ClientService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientService
    {
        global::Freshbooks.Library.Model.ClientIdentity Create(global::Freshbooks.Library.Model.ClientRequest clientRequest);
        void Update(global::Freshbooks.Library.Model.ClientRequest clientRequest);
        global::Freshbooks.Library.Model.ClientResponse Get(global::Freshbooks.Library.Model.ClientIdentity clientIdentity);
        void Delete(global::Freshbooks.Library.Model.ClientIdentity clientIdentity);
        global::Freshbooks.Library.Model.ClientsResponse List(global::Freshbooks.Library.Model.ClientsRequest clientsRequest);
    }
    [global::System.Xml.Serialization.XmlType("ClientService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientService : IClientService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public ClientService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public ClientService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.ClientIdentity Create(global::Freshbooks.Library.Model.ClientRequest clientRequest)
        {
            global::Freshbooks.Library.Model.ClientIdentity response = new global::Freshbooks.Library.Model.ClientIdentity();
            Invoke("create", clientRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.ClientRequest clientRequest)
        {
            Invoke("update", clientRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ClientResponse Get(global::Freshbooks.Library.Model.ClientIdentity clientIdentity)
        {
            global::Freshbooks.Library.Model.ClientResponse response = new global::Freshbooks.Library.Model.ClientResponse();
            Invoke("get", clientIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.ClientIdentity clientIdentity)
        {
            Invoke("delete", clientIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ClientsResponse List(global::Freshbooks.Library.Model.ClientsRequest clientsRequest)
        {
            global::Freshbooks.Library.Model.ClientsResponse response = new global::Freshbooks.Library.Model.ClientsResponse();
            Invoke("list", clientsRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IClientService _dispatch;
            public Dispatch(IClientService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IClientService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.ClientRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.ClientIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.ClientIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.ClientsRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.ClientRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IClientService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IClientService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IClientService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ClientRequest request = new global::Freshbooks.Library.Model.ClientRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ClientIdentity response = new global::Freshbooks.Library.Model.ClientIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.ClientIdentity request = new global::Freshbooks.Library.Model.ClientIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.ClientIdentity request = new global::Freshbooks.Library.Model.ClientIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.ClientResponse response = new global::Freshbooks.Library.Model.ClientResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.ClientsRequest request = new global::Freshbooks.Library.Model.ClientsRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ClientsResponse response = new global::Freshbooks.Library.Model.ClientsResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.ClientRequest request = new global::Freshbooks.Library.Model.ClientRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IClientService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
