// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region EstimateIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimateIdentity : global::NClassify.Library.IMessage
    {
        bool HasEstimateId { get; }
        global::Freshbooks.Library.Model.EstimateId EstimateId { get; }
    }
    [global::System.Xml.Serialization.XmlType("EstimateIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimateIdentity : IEstimateIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly EstimateIdentity _defaultInstance = new EstimateIdentity(false);
        public static EstimateIdentity DefaultInstance { get { return _defaultInstance; } }
        static EstimateIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected EstimateIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public EstimateIdentity() : this(true)
        {
        }
        public EstimateIdentity(IEstimateIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            EstimateId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimateId(global::Freshbooks.Library.Model.EstimateId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_estimateId;
        private global::Freshbooks.Library.Model.EstimateId __fld_estimateId;
        #endregion
        #region Instance Members
        public bool HasEstimateId
        {
            get { return __has_estimateId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(0UL);
                __has_estimateId = false;
            }
        }
        public global::Freshbooks.Library.Model.EstimateId EstimateId
        {
            get
            {
                return __fld_estimateId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimateId = value;
                __has_estimateId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_estimateId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.EstimateId));
                errorCount++;
            }
            return errorCount;
        }
        public IEstimateIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            EstimateIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_estimateId = false;
            __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            EstimateIdentity value = (EstimateIdentity)base.MemberwiseClone();
            return value;
        }
        public EstimateIdentity Clone()
        {
            return (EstimateIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimateIdentity) MergeFrom((IEstimateIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IEstimateIdentity other)
        {
            if (other.HasEstimateId) EstimateId = other.EstimateId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "estimate_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("EstimateIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_estimateId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("EstimateIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_estimateId)
            {
                writer.WriteElementString("estimate_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_estimateId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Estimate
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimate : global::NClassify.Library.IMessage
    {
        bool HasEstimateId { get; }
        global::Freshbooks.Library.Model.EstimateId EstimateId { get; }
        bool HasDate { get; }
        global::System.DateTime Date { get; }
    }
    [global::System.Xml.Serialization.XmlType("Estimate")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Estimate : global::Freshbooks.Library.Model.ClientBill, IEstimate, global::NClassify.Library.IBuilder
    {
        private static readonly Estimate _defaultInstance = new Estimate(false);
        public static new Estimate DefaultInstance { get { return _defaultInstance; } }
        static Estimate()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Estimate(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Estimate() : this(true)
        {
        }
        public Estimate(IEstimate copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            EstimateId = 1,
            Date = 21,
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimateId(global::Freshbooks.Library.Model.EstimateId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_estimateId;
        private global::Freshbooks.Library.Model.EstimateId __fld_estimateId;
        private bool __has_date;
        private global::System.DateTime __fld_date;
        #endregion
        #region Instance Members
        public bool HasEstimateId
        {
            get { return __has_estimateId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(0UL);
                __has_estimateId = false;
            }
        }
        public global::Freshbooks.Library.Model.EstimateId EstimateId
        {
            get
            {
                return __fld_estimateId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimateId = value;
                __has_estimateId = true;
            }
        }
        public bool HasDate
        {
            get { return __has_date; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = global::System.DateTime.MinValue;
                __has_date = false;
            }
        }
        public global::System.DateTime Date
        {
            get
            {
                return __fld_date;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = value;
                __has_date = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_estimateId && !IsValidEstimateId(__fld_estimateId, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_estimateId = false;
            __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(0UL);
            __has_date = false;
            __fld_date = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            Estimate value = (Estimate)base.MemberwiseClone();
            return value;
        }
        public new Estimate Clone()
        {
            return (Estimate)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimate) MergeFrom((IEstimate)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IEstimate other)
        {
            if (other.HasEstimateId) EstimateId = other.EstimateId;
            if (other.HasDate) Date = other.Date;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "date", "estimate_id" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_date = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_date = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_estimateId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_estimateId)
            {
                writer.WriteElementString("estimate_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_estimateId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_date)
            {
                writer.WriteElementString("date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_date, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region EstimateRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimateRequest : global::NClassify.Library.IMessage
    {
        bool HasEstimate { get; }
        global::Freshbooks.Library.Model.Estimate Estimate { get; }
    }
    [global::System.Xml.Serialization.XmlType("EstimateRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimateRequest : IEstimateRequest, global::NClassify.Library.IBuilder
    {
        private static readonly EstimateRequest _defaultInstance = new EstimateRequest(false);
        public static EstimateRequest DefaultInstance { get { return _defaultInstance; } }
        static EstimateRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected EstimateRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public EstimateRequest() : this(true)
        {
        }
        public EstimateRequest(IEstimateRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Estimate = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimate(global::Freshbooks.Library.Model.Estimate value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Estimate, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Estimate));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Estimate, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_estimate;
        private global::Freshbooks.Library.Model.Estimate __fld_estimate;
        #endregion
        #region Instance Members
        public bool HasEstimate
        {
            get { return __has_estimate; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimate = global::Freshbooks.Library.Model.Estimate.DefaultInstance;
                __has_estimate = false;
            }
        }
        public global::Freshbooks.Library.Model.Estimate Estimate
        {
            get
            {
                return __fld_estimate;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Estimate");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimate = value;
                __has_estimate = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_estimate)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Estimate, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Estimate));
                errorCount++;
            }
            return errorCount;
        }
        public IEstimateRequest AsReadOnly()
        {
            if (_readOnly) return this;
            EstimateRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_estimate.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_estimate = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_estimate = false;
            __fld_estimate = global::Freshbooks.Library.Model.Estimate.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            EstimateRequest value = (EstimateRequest)base.MemberwiseClone();
            value.__fld_estimate = (global::Freshbooks.Library.Model.Estimate)value.__fld_estimate.Clone();
            return value;
        }
        public EstimateRequest Clone()
        {
            return (EstimateRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimateRequest) MergeFrom((IEstimateRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IEstimateRequest other)
        {
            if (other.HasEstimate) Estimate = (global::Freshbooks.Library.Model.Estimate)other.Estimate.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "estimate" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("EstimateRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Estimate value = __fld_estimate;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Estimate.DefaultInstance) ? new global::Freshbooks.Library.Model.Estimate() : new global::Freshbooks.Library.Model.Estimate(__fld_estimate);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_estimate = value;
                        __has_estimate = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("EstimateRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_estimate)
            {
                __fld_estimate.WriteXml("estimate", writer);
            }
        }
        #endregion
    }
    #endregion
    #region EstimateResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimateResponse : global::NClassify.Library.IMessage
    {
        bool HasEstimate { get; }
        global::Freshbooks.Library.Model.Estimate Estimate { get; }
    }
    [global::System.Xml.Serialization.XmlType("EstimateResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimateResponse : IEstimateResponse, global::NClassify.Library.IBuilder
    {
        private static readonly EstimateResponse _defaultInstance = new EstimateResponse(false);
        public static EstimateResponse DefaultInstance { get { return _defaultInstance; } }
        static EstimateResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected EstimateResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public EstimateResponse() : this(true)
        {
        }
        public EstimateResponse(IEstimateResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Estimate = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimate(global::Freshbooks.Library.Model.Estimate value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Estimate, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Estimate));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Estimate, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_estimate;
        private global::Freshbooks.Library.Model.Estimate __fld_estimate;
        #endregion
        #region Instance Members
        public bool HasEstimate
        {
            get { return __has_estimate; }
        }
        public global::Freshbooks.Library.Model.Estimate Estimate
        {
            get
            {
                return __fld_estimate;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Estimate");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimate = value;
                __has_estimate = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_estimate)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Estimate, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Estimate));
                errorCount++;
            }
            return errorCount;
        }
        public IEstimateResponse AsReadOnly()
        {
            if (_readOnly) return this;
            EstimateResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_estimate.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_estimate = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_estimate = false;
            __fld_estimate = global::Freshbooks.Library.Model.Estimate.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            EstimateResponse value = (EstimateResponse)base.MemberwiseClone();
            value.__fld_estimate = (global::Freshbooks.Library.Model.Estimate)value.__fld_estimate.Clone();
            return value;
        }
        public EstimateResponse Clone()
        {
            return (EstimateResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimateResponse) MergeFrom((IEstimateResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IEstimateResponse other)
        {
            if (other.HasEstimate) Estimate = (global::Freshbooks.Library.Model.Estimate)other.Estimate.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "estimate" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("EstimateResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Estimate value = __fld_estimate;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Estimate.DefaultInstance) ? new global::Freshbooks.Library.Model.Estimate() : new global::Freshbooks.Library.Model.Estimate(__fld_estimate);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_estimate = value;
                        __has_estimate = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("EstimateResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Estimates
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimates : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Estimate> EstimateList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Estimates")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Estimates : global::Freshbooks.Library.Model.PaginatedResponse, IEstimates, global::NClassify.Library.IBuilder
    {
        private static readonly Estimates _defaultInstance = new Estimates(false);
        public static new Estimates DefaultInstance { get { return _defaultInstance; } }
        static Estimates()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Estimates(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Estimates() : this(true)
        {
        }
        public Estimates(IEstimates copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            EstimateList = 10,
        }
        #endregion
        #region _EstimateList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _EstimateList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Estimate>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("EstimateList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Estimate> _contents;
            public _EstimateList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Estimate>();
            }
            public _EstimateList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Estimate> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Estimate>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Estimate item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Estimate)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Estimate> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Estimate this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Estimate value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Estimate> value)
            {
                foreach (global::Freshbooks.Library.Model.Estimate item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Estimate value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Estimate item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Estimate item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Estimate item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Estimate[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _EstimateList Clone()
            {
                return _readOnly ? this : new _EstimateList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Estimate> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimateList(global::Freshbooks.Library.Model.Estimate value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.EstimateList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _EstimateList __fld_estimate;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Estimate> EstimateList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Estimate>(__fld_estimate);
                return __fld_estimate;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimate = new _EstimateList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Estimate item in __fld_estimate)
            {
                if (!IsValidEstimateList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_estimate.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_estimate = new _EstimateList();
        }
        protected override object MemberwiseClone()
        {
            Estimates value = (Estimates)base.MemberwiseClone();
            value.__fld_estimate = value.__fld_estimate.Clone();
            return value;
        }
        public new Estimates Clone()
        {
            return (Estimates)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimates) MergeFrom((IEstimates)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IEstimates other)
        {
            foreach (global::Freshbooks.Library.Model.Estimate item in other.EstimateList)
                __fld_estimate.Add((global::Freshbooks.Library.Model.Estimate)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "estimate" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Estimate child = new global::Freshbooks.Library.Model.Estimate();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_estimate.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region EstimatesResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimatesResponse : global::NClassify.Library.IMessage
    {
        bool HasEstimates { get; }
        global::Freshbooks.Library.Model.Estimates Estimates { get; }
    }
    [global::System.Xml.Serialization.XmlType("EstimatesResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimatesResponse : IEstimatesResponse, global::NClassify.Library.IBuilder
    {
        private static readonly EstimatesResponse _defaultInstance = new EstimatesResponse(false);
        public static EstimatesResponse DefaultInstance { get { return _defaultInstance; } }
        static EstimatesResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected EstimatesResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public EstimatesResponse() : this(true)
        {
        }
        public EstimatesResponse(IEstimatesResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Estimates = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimates(global::Freshbooks.Library.Model.Estimates value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Estimates, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Estimates));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Estimates, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_estimates;
        private global::Freshbooks.Library.Model.Estimates __fld_estimates;
        #endregion
        #region Instance Members
        public bool HasEstimates
        {
            get { return __has_estimates; }
        }
        public global::Freshbooks.Library.Model.Estimates Estimates
        {
            get
            {
                return __fld_estimates;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Estimates");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimates = value;
                __has_estimates = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_estimates)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Estimates, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Estimates));
                errorCount++;
            }
            return errorCount;
        }
        public IEstimatesResponse AsReadOnly()
        {
            if (_readOnly) return this;
            EstimatesResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_estimates.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_estimates = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_estimates = false;
            __fld_estimates = global::Freshbooks.Library.Model.Estimates.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            EstimatesResponse value = (EstimatesResponse)base.MemberwiseClone();
            value.__fld_estimates = (global::Freshbooks.Library.Model.Estimates)value.__fld_estimates.Clone();
            return value;
        }
        public EstimatesResponse Clone()
        {
            return (EstimatesResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimatesResponse) MergeFrom((IEstimatesResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IEstimatesResponse other)
        {
            if (other.HasEstimates) Estimates = (global::Freshbooks.Library.Model.Estimates)other.Estimates.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "estimates" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("EstimatesResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Estimates value = __fld_estimates;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Estimates.DefaultInstance) ? new global::Freshbooks.Library.Model.Estimates() : new global::Freshbooks.Library.Model.Estimates(__fld_estimates);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_estimates = value;
                        __has_estimates = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("EstimatesResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region EstimatesRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimatesRequest : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasDateFrom { get; }
        global::System.DateTime DateFrom { get; }
        bool HasDateTo { get; }
        global::System.DateTime DateTo { get; }
    }
    [global::System.Xml.Serialization.XmlType("EstimatesRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimatesRequest : global::Freshbooks.Library.Model.PaginatedRequest, IEstimatesRequest, global::NClassify.Library.IBuilder
    {
        private static readonly EstimatesRequest _defaultInstance = new EstimatesRequest(false);
        public static new EstimatesRequest DefaultInstance { get { return _defaultInstance; } }
        static EstimatesRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected EstimatesRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public EstimatesRequest() : this(true)
        {
        }
        public EstimatesRequest(IEstimatesRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientId = 10,
            Folder = 11,
            DateFrom = 12,
            DateTo = 13,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_dateFrom;
        private global::System.DateTime __fld_dateFrom;
        private bool __has_dateTo;
        private global::System.DateTime __fld_dateTo;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasDateFrom
        {
            get { return __has_dateFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = global::System.DateTime.MinValue;
                __has_dateFrom = false;
            }
        }
        public global::System.DateTime DateFrom
        {
            get
            {
                return __fld_dateFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = value;
                __has_dateFrom = true;
            }
        }
        public bool HasDateTo
        {
            get { return __has_dateTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = global::System.DateTime.MinValue;
                __has_dateTo = false;
            }
        }
        public global::System.DateTime DateTo
        {
            get
            {
                return __fld_dateTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = value;
                __has_dateTo = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_dateFrom = false;
            __fld_dateFrom = global::System.DateTime.MinValue;
            __has_dateTo = false;
            __fld_dateTo = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            EstimatesRequest value = (EstimatesRequest)base.MemberwiseClone();
            return value;
        }
        public new EstimatesRequest Clone()
        {
            return (EstimatesRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimatesRequest) MergeFrom((IEstimatesRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IEstimatesRequest other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasDateFrom) DateFrom = other.DateFrom;
            if (other.HasDateTo) DateTo = other.DateTo;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id", "date_from", "date_to", "folder" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateFrom = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateTo = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
            if (__has_dateFrom)
            {
                writer.WriteElementString("date_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTo)
            {
                writer.WriteElementString("date_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region EstimateEmailRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimateEmailRequest : global::NClassify.Library.IMessage
    {
        bool HasEstimateId { get; }
        global::Freshbooks.Library.Model.EstimateId EstimateId { get; }
        bool HasSubject { get; }
        string Subject { get; }
        bool HasMessage { get; }
        string Message { get; }
    }
    [global::System.Xml.Serialization.XmlType("EstimateEmailRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimateEmailRequest : IEstimateEmailRequest, global::NClassify.Library.IBuilder
    {
        private static readonly EstimateEmailRequest _defaultInstance = new EstimateEmailRequest(false);
        public static EstimateEmailRequest DefaultInstance { get { return _defaultInstance; } }
        static EstimateEmailRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected EstimateEmailRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public EstimateEmailRequest() : this(true)
        {
        }
        public EstimateEmailRequest(IEstimateEmailRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            EstimateId = 1,
            Subject = 2,
            Message = 3,
        }
        #endregion
        #region Static Data
        public static bool IsValidEstimateId(global::Freshbooks.Library.Model.EstimateId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSubject(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Subject, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Subject));
                return false;
            }
            return true;
        }
        public static bool IsValidMessage(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Message, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Message));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_estimateId;
        private global::Freshbooks.Library.Model.EstimateId __fld_estimateId;
        private bool __has_subject;
        private string __fld_subject;
        private bool __has_message;
        private string __fld_message;
        #endregion
        #region Instance Members
        public bool HasEstimateId
        {
            get { return __has_estimateId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(0UL);
                __has_estimateId = false;
            }
        }
        public global::Freshbooks.Library.Model.EstimateId EstimateId
        {
            get
            {
                return __fld_estimateId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_estimateId = value;
                __has_estimateId = true;
            }
        }
        public bool HasSubject
        {
            get { return __has_subject; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_subject = "";
                __has_subject = false;
            }
        }
        public string Subject
        {
            get
            {
                return __fld_subject;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Subject");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_subject = value;
                __has_subject = true;
            }
        }
        public bool HasMessage
        {
            get { return __has_message; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_message = "";
                __has_message = false;
            }
        }
        public string Message
        {
            get
            {
                return __fld_message;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Message");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_message = value;
                __has_message = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_estimateId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.EstimateId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.EstimateId));
                errorCount++;
            }
            if (!__has_subject)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Subject, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Subject));
                errorCount++;
            }
            if (!__has_message)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Message, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Message));
                errorCount++;
            }
            return errorCount;
        }
        public IEstimateEmailRequest AsReadOnly()
        {
            if (_readOnly) return this;
            EstimateEmailRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_subject = true;
            __has_message = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_estimateId = false;
            __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(0UL);
            __has_subject = false;
            __fld_subject = "";
            __has_message = false;
            __fld_message = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            EstimateEmailRequest value = (EstimateEmailRequest)base.MemberwiseClone();
            return value;
        }
        public EstimateEmailRequest Clone()
        {
            return (EstimateEmailRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IEstimateEmailRequest) MergeFrom((IEstimateEmailRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IEstimateEmailRequest other)
        {
            if (other.HasEstimateId) EstimateId = other.EstimateId;
            if (other.HasSubject) Subject = other.Subject;
            if (other.HasMessage) Message = other.Message;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "estimate_id", "message", "subject" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("EstimateEmailRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_estimateId = new global::Freshbooks.Library.Model.EstimateId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_estimateId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_message = sbuilder.ToString();
                        __has_message = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_subject = sbuilder.ToString();
                        __has_subject = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("EstimateEmailRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_estimateId)
            {
                writer.WriteElementString("estimate_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_estimateId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_subject)
            {
                writer.WriteElementString("subject", __fld_subject);
            }
            if (__has_message)
            {
                writer.WriteElementString("message", __fld_message);
            }
        }
        #endregion
    }
    #endregion
    #region EstimateService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IEstimateService
    {
        global::Freshbooks.Library.Model.EstimateIdentity Create(global::Freshbooks.Library.Model.EstimateRequest estimateRequest);
        void Update(global::Freshbooks.Library.Model.EstimateRequest estimateRequest);
        global::Freshbooks.Library.Model.EstimateResponse Get(global::Freshbooks.Library.Model.EstimateIdentity estimateIdentity);
        void Delete(global::Freshbooks.Library.Model.EstimateIdentity estimateIdentity);
        global::Freshbooks.Library.Model.EstimatesResponse List(global::Freshbooks.Library.Model.EstimatesRequest estimatesRequest);
        void SendByEmail(global::Freshbooks.Library.Model.EstimateEmailRequest estimateEmailRequest);
    }
    [global::System.Xml.Serialization.XmlType("EstimateService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class EstimateService : IEstimateService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public EstimateService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public EstimateService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.EstimateIdentity Create(global::Freshbooks.Library.Model.EstimateRequest estimateRequest)
        {
            global::Freshbooks.Library.Model.EstimateIdentity response = new global::Freshbooks.Library.Model.EstimateIdentity();
            Invoke("create", estimateRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.EstimateRequest estimateRequest)
        {
            Invoke("update", estimateRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.EstimateResponse Get(global::Freshbooks.Library.Model.EstimateIdentity estimateIdentity)
        {
            global::Freshbooks.Library.Model.EstimateResponse response = new global::Freshbooks.Library.Model.EstimateResponse();
            Invoke("get", estimateIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.EstimateIdentity estimateIdentity)
        {
            Invoke("delete", estimateIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.EstimatesResponse List(global::Freshbooks.Library.Model.EstimatesRequest estimatesRequest)
        {
            global::Freshbooks.Library.Model.EstimatesResponse response = new global::Freshbooks.Library.Model.EstimatesResponse();
            Invoke("list", estimatesRequest, response);
            return response;
        }
        public void SendByEmail(global::Freshbooks.Library.Model.EstimateEmailRequest estimateEmailRequest)
        {
            Invoke("sendByEmail", estimateEmailRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IEstimateService _dispatch;
            public Dispatch(IEstimateService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IEstimateService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "sendByEmail", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.EstimateRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.EstimateIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.EstimateIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.EstimatesRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.SendByEmail((global::Freshbooks.Library.Model.EstimateEmailRequest)(object)request);
                        break;
                    }
                    case 5:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.EstimateRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IEstimateService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IEstimateService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IEstimateService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "sendByEmail", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.EstimateRequest request = new global::Freshbooks.Library.Model.EstimateRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.EstimateIdentity response = new global::Freshbooks.Library.Model.EstimateIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.EstimateIdentity request = new global::Freshbooks.Library.Model.EstimateIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.EstimateIdentity request = new global::Freshbooks.Library.Model.EstimateIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.EstimateResponse response = new global::Freshbooks.Library.Model.EstimateResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.EstimatesRequest request = new global::Freshbooks.Library.Model.EstimatesRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.EstimatesResponse response = new global::Freshbooks.Library.Model.EstimatesResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.EstimateEmailRequest request = new global::Freshbooks.Library.Model.EstimateEmailRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 5:
                    {
                        global::Freshbooks.Library.Model.EstimateRequest request = new global::Freshbooks.Library.Model.EstimateRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IEstimateService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
