// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region url
    [global::System.Xml.Serialization.XmlType("url")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct Url : global::System.IEquatable<Url>, global::System.IComparable<Url>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        private static readonly global::System.Text.RegularExpressions.Regex __valid_value = new global::System.Text.RegularExpressions.Regex("^https?\\://.+", global::System.Text.RegularExpressions.RegexOptions.Singleline | global::System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        private static bool IsValidUri(string value)
        {
            global::System.Uri tmp;
            return global::System.Uri.TryCreate(value, global::System.UriKind.Absolute, out tmp);
        }
        public static bool IsValidValue(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Value));
                return false;
            }
            if (value.Length < 8)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeLongerThan, TypeFields.Value, 8));
                return false;
            }
            if (value.Length > 2048)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeShorterThan, TypeFields.Value, 2048));
                return false;
            }
            if (!__valid_value.IsMatch(value.ToString()))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustMatchFormat, TypeFields.Value, "^https?\\://.+"));
                return false;
            }
            if (!(IsValidUri(value)))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.InvalidField, TypeFields.Value));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public Url(string value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is Url ? Equals((Url)obj) : base.Equals(obj);
        }
        public bool Equals(Url other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(Url other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator Url(string value)
        {
            return new Url(value);
        }
        public static explicit operator string(Url value)
        {
            return value.Value;
        }
        public static bool operator ==(Url x, Url y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(Url x, Url y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region currency_code
    [global::System.Xml.Serialization.XmlType("currency_code")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct CurrencyCode : global::System.IEquatable<CurrencyCode>, global::System.IComparable<CurrencyCode>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        private static readonly global::System.Text.RegularExpressions.Regex __valid_value = new global::System.Text.RegularExpressions.Regex("[A-Z]{3}", global::System.Text.RegularExpressions.RegexOptions.Singleline);
        public static bool IsValidValue(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Value));
                return false;
            }
            if (!__valid_value.IsMatch(value.ToString()))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustMatchFormat, TypeFields.Value, "[A-Z]{3}"));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public CurrencyCode(string value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is CurrencyCode ? Equals((CurrencyCode)obj) : base.Equals(obj);
        }
        public bool Equals(CurrencyCode other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(CurrencyCode other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator CurrencyCode(string value)
        {
            return new CurrencyCode(value);
        }
        public static explicit operator string(CurrencyCode value)
        {
            return value.Value;
        }
        public static bool operator ==(CurrencyCode x, CurrencyCode y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(CurrencyCode x, CurrencyCode y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region folder_type
    [global::System.Xml.Serialization.XmlType("folder_type")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct FolderType : global::System.IEquatable<FolderType>, global::System.IComparable<FolderType>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        private static readonly string[] __in_value = new string[] {"active", "archived", "deleted"};
        public static bool IsValidValue(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Value));
                return false;
            }
            if (global::System.Array.BinarySearch(__in_value, value) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeOneOf, TypeFields.Value, string.Join(", ", __in_value)));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public FolderType(string value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is FolderType ? Equals((FolderType)obj) : base.Equals(obj);
        }
        public bool Equals(FolderType other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(FolderType other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator FolderType(string value)
        {
            return new FolderType(value);
        }
        public static explicit operator string(FolderType value)
        {
            return value.Value;
        }
        public static bool operator ==(FolderType x, FolderType y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(FolderType x, FolderType y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region callback_id
    [global::System.Xml.Serialization.XmlType("callback_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct CallbackId : global::System.IEquatable<CallbackId>, global::System.IComparable<CallbackId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public CallbackId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is CallbackId ? Equals((CallbackId)obj) : base.Equals(obj);
        }
        public bool Equals(CallbackId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(CallbackId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator CallbackId(ulong value)
        {
            return new CallbackId(value);
        }
        public static explicit operator ulong(CallbackId value)
        {
            return value.Value;
        }
        public static bool operator ==(CallbackId x, CallbackId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(CallbackId x, CallbackId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region category_id
    [global::System.Xml.Serialization.XmlType("category_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct CategoryId : global::System.IEquatable<CategoryId>, global::System.IComparable<CategoryId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public CategoryId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is CategoryId ? Equals((CategoryId)obj) : base.Equals(obj);
        }
        public bool Equals(CategoryId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(CategoryId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator CategoryId(ulong value)
        {
            return new CategoryId(value);
        }
        public static explicit operator ulong(CategoryId value)
        {
            return value.Value;
        }
        public static bool operator ==(CategoryId x, CategoryId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(CategoryId x, CategoryId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region client_id
    [global::System.Xml.Serialization.XmlType("client_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct ClientId : global::System.IEquatable<ClientId>, global::System.IComparable<ClientId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public ClientId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is ClientId ? Equals((ClientId)obj) : base.Equals(obj);
        }
        public bool Equals(ClientId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(ClientId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator ClientId(ulong value)
        {
            return new ClientId(value);
        }
        public static explicit operator ulong(ClientId value)
        {
            return value.Value;
        }
        public static bool operator ==(ClientId x, ClientId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(ClientId x, ClientId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region contact_id
    [global::System.Xml.Serialization.XmlType("contact_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct ContactId : global::System.IEquatable<ContactId>, global::System.IComparable<ContactId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public ContactId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is ContactId ? Equals((ContactId)obj) : base.Equals(obj);
        }
        public bool Equals(ContactId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(ContactId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator ContactId(ulong value)
        {
            return new ContactId(value);
        }
        public static explicit operator ulong(ContactId value)
        {
            return value.Value;
        }
        public static bool operator ==(ContactId x, ContactId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(ContactId x, ContactId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region estimate_id
    [global::System.Xml.Serialization.XmlType("estimate_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct EstimateId : global::System.IEquatable<EstimateId>, global::System.IComparable<EstimateId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public EstimateId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is EstimateId ? Equals((EstimateId)obj) : base.Equals(obj);
        }
        public bool Equals(EstimateId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(EstimateId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator EstimateId(ulong value)
        {
            return new EstimateId(value);
        }
        public static explicit operator ulong(EstimateId value)
        {
            return value.Value;
        }
        public static bool operator ==(EstimateId x, EstimateId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(EstimateId x, EstimateId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region expense_id
    [global::System.Xml.Serialization.XmlType("expense_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct ExpenseId : global::System.IEquatable<ExpenseId>, global::System.IComparable<ExpenseId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public ExpenseId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is ExpenseId ? Equals((ExpenseId)obj) : base.Equals(obj);
        }
        public bool Equals(ExpenseId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(ExpenseId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator ExpenseId(ulong value)
        {
            return new ExpenseId(value);
        }
        public static explicit operator ulong(ExpenseId value)
        {
            return value.Value;
        }
        public static bool operator ==(ExpenseId x, ExpenseId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(ExpenseId x, ExpenseId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region invoice_id
    [global::System.Xml.Serialization.XmlType("invoice_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct InvoiceId : global::System.IEquatable<InvoiceId>, global::System.IComparable<InvoiceId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public InvoiceId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is InvoiceId ? Equals((InvoiceId)obj) : base.Equals(obj);
        }
        public bool Equals(InvoiceId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(InvoiceId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator InvoiceId(ulong value)
        {
            return new InvoiceId(value);
        }
        public static explicit operator ulong(InvoiceId value)
        {
            return value.Value;
        }
        public static bool operator ==(InvoiceId x, InvoiceId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(InvoiceId x, InvoiceId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region item_id
    [global::System.Xml.Serialization.XmlType("item_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct ItemId : global::System.IEquatable<ItemId>, global::System.IComparable<ItemId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public ItemId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is ItemId ? Equals((ItemId)obj) : base.Equals(obj);
        }
        public bool Equals(ItemId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(ItemId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator ItemId(ulong value)
        {
            return new ItemId(value);
        }
        public static explicit operator ulong(ItemId value)
        {
            return value.Value;
        }
        public static bool operator ==(ItemId x, ItemId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(ItemId x, ItemId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region line_id
    [global::System.Xml.Serialization.XmlType("line_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct LineId : global::System.IEquatable<LineId>, global::System.IComparable<LineId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public LineId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is LineId ? Equals((LineId)obj) : base.Equals(obj);
        }
        public bool Equals(LineId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(LineId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator LineId(ulong value)
        {
            return new LineId(value);
        }
        public static explicit operator ulong(LineId value)
        {
            return value.Value;
        }
        public static bool operator ==(LineId x, LineId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(LineId x, LineId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region payment_id
    [global::System.Xml.Serialization.XmlType("payment_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct PaymentId : global::System.IEquatable<PaymentId>, global::System.IComparable<PaymentId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public PaymentId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is PaymentId ? Equals((PaymentId)obj) : base.Equals(obj);
        }
        public bool Equals(PaymentId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(PaymentId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator PaymentId(ulong value)
        {
            return new PaymentId(value);
        }
        public static explicit operator ulong(PaymentId value)
        {
            return value.Value;
        }
        public static bool operator ==(PaymentId x, PaymentId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(PaymentId x, PaymentId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region project_id
    [global::System.Xml.Serialization.XmlType("project_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct ProjectId : global::System.IEquatable<ProjectId>, global::System.IComparable<ProjectId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public ProjectId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is ProjectId ? Equals((ProjectId)obj) : base.Equals(obj);
        }
        public bool Equals(ProjectId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(ProjectId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator ProjectId(ulong value)
        {
            return new ProjectId(value);
        }
        public static explicit operator ulong(ProjectId value)
        {
            return value.Value;
        }
        public static bool operator ==(ProjectId x, ProjectId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(ProjectId x, ProjectId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region recurring_id
    [global::System.Xml.Serialization.XmlType("recurring_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct RecurringId : global::System.IEquatable<RecurringId>, global::System.IComparable<RecurringId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public RecurringId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is RecurringId ? Equals((RecurringId)obj) : base.Equals(obj);
        }
        public bool Equals(RecurringId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(RecurringId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator RecurringId(ulong value)
        {
            return new RecurringId(value);
        }
        public static explicit operator ulong(RecurringId value)
        {
            return value.Value;
        }
        public static bool operator ==(RecurringId x, RecurringId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(RecurringId x, RecurringId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region staff_id
    [global::System.Xml.Serialization.XmlType("staff_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct StaffId : global::System.IEquatable<StaffId>, global::System.IComparable<StaffId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public StaffId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is StaffId ? Equals((StaffId)obj) : base.Equals(obj);
        }
        public bool Equals(StaffId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(StaffId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator StaffId(ulong value)
        {
            return new StaffId(value);
        }
        public static explicit operator ulong(StaffId value)
        {
            return value.Value;
        }
        public static bool operator ==(StaffId x, StaffId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(StaffId x, StaffId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region task_id
    [global::System.Xml.Serialization.XmlType("task_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct TaskId : global::System.IEquatable<TaskId>, global::System.IComparable<TaskId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public TaskId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is TaskId ? Equals((TaskId)obj) : base.Equals(obj);
        }
        public bool Equals(TaskId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(TaskId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator TaskId(ulong value)
        {
            return new TaskId(value);
        }
        public static explicit operator ulong(TaskId value)
        {
            return value.Value;
        }
        public static bool operator ==(TaskId x, TaskId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(TaskId x, TaskId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region tax_id
    [global::System.Xml.Serialization.XmlType("tax_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct TaxId : global::System.IEquatable<TaxId>, global::System.IComparable<TaxId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public TaxId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is TaxId ? Equals((TaxId)obj) : base.Equals(obj);
        }
        public bool Equals(TaxId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(TaxId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator TaxId(ulong value)
        {
            return new TaxId(value);
        }
        public static explicit operator ulong(TaxId value)
        {
            return value.Value;
        }
        public static bool operator ==(TaxId x, TaxId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(TaxId x, TaxId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region time_entry_id
    [global::System.Xml.Serialization.XmlType("time_entry_id")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct TimeEntryId : global::System.IEquatable<TimeEntryId>, global::System.IComparable<TimeEntryId>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(ulong value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1UL) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1UL));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private ulong __fld_value;
        public TimeEntryId(ulong value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public ulong Value
        {
            get
            {
                if (!__has_value) return 0UL;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is TimeEntryId ? Equals((TimeEntryId)obj) : base.Equals(obj);
        }
        public bool Equals(TimeEntryId other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(TimeEntryId other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator TimeEntryId(ulong value)
        {
            return new TimeEntryId(value);
        }
        public static explicit operator ulong(TimeEntryId value)
        {
            return value.Value;
        }
        public static bool operator ==(TimeEntryId x, TimeEntryId y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(TimeEntryId x, TimeEntryId y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region ErrorResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IErrorResponse : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<string> ErrorList { get; }
        bool HasCode { get; }
        long Code { get; }
    }
    [global::System.Xml.Serialization.XmlType("ErrorResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ErrorResponse : IErrorResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ErrorResponse _defaultInstance = new ErrorResponse(false);
        public static ErrorResponse DefaultInstance { get { return _defaultInstance; } }
        static ErrorResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ErrorResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ErrorResponse() : this(true)
        {
        }
        public ErrorResponse(IErrorResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ErrorList = 1,
            Code = 2,
        }
        #endregion
        #region _ErrorList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ErrorList : global::System.Collections.Generic.IList<string>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ErrorList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<string> _contents;
            public _ErrorList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>();
            }
            public _ErrorList(global::System.Collections.Generic.IList<string> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>(AssertNotNull(contents).Count);
                foreach (string item in contents)
                {
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<string> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public string this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(string value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<string> value)
            {
                foreach (string item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, string value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(string item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(string item) { return _contents.Contains(item); }
            public int IndexOf(string item) { return _contents.IndexOf(item); }
            public void CopyTo(string[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ErrorList Clone()
            {
                return _readOnly ? this : new _ErrorList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<string> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidErrorList(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ErrorList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ErrorList));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _ErrorList __fld_error;
        private bool __has_code;
        private long __fld_code;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<string> ErrorList
        {
            get
            {
                return __fld_error;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_error = new _ErrorList(value, false);
            }
        }
        public bool HasCode
        {
            get { return __has_code; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_code = 0L;
                __has_code = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0L)]
        public long Code
        {
            get
            {
                return __fld_code;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_code = value;
                __has_code = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (string item in __fld_error)
            {
                if (!IsValidErrorList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IErrorResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ErrorResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_error.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_error = new _ErrorList();
            __has_code = false;
            __fld_code = 0L;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ErrorResponse value = (ErrorResponse)base.MemberwiseClone();
            value.__fld_error = value.__fld_error.Clone();
            return value;
        }
        public ErrorResponse Clone()
        {
            return (ErrorResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IErrorResponse) MergeFrom((IErrorResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IErrorResponse other)
        {
            __fld_error.AddRange(other.ErrorList);
            if (other.HasCode) Code = other.Code;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "code", "error" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ErrorResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_code = global::NClassify.Library.TypeConverter.Instance.ParseInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_code = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_error.Add(sbuilder.ToString());
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ErrorResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (string item in __fld_error)
            {
                writer.WriteElementString("error", item);
            }
            if (__has_code)
            {
                writer.WriteElementString("code", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_code, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region PaginatedRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaginatedRequest : global::NClassify.Library.IMessage
    {
        bool HasPage { get; }
        uint Page { get; }
        bool HasPerPage { get; }
        uint PerPage { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaginatedRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaginatedRequest : IPaginatedRequest, global::NClassify.Library.IBuilder
    {
        private static readonly PaginatedRequest _defaultInstance = new PaginatedRequest(false);
        public static PaginatedRequest DefaultInstance { get { return _defaultInstance; } }
        static PaginatedRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaginatedRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaginatedRequest() : this(true)
        {
        }
        public PaginatedRequest(IPaginatedRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Page = 1,
            PerPage = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidPage(uint value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1U) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Page, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Page, 1U));
                return false;
            }
            return true;
        }
        public static bool IsValidPerPage(uint value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1U) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PerPage, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.PerPage, 1U));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_page;
        private uint __fld_page;
        private bool __has_perPage;
        private uint __fld_perPage;
        #endregion
        #region Instance Members
        public bool HasPage
        {
            get { return __has_page; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_page = 0U;
                __has_page = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0U)]
        public uint Page
        {
            get
            {
                return __fld_page;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_page = value;
                __has_page = true;
            }
        }
        public bool HasPerPage
        {
            get { return __has_perPage; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_perPage = 0U;
                __has_perPage = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0U)]
        public uint PerPage
        {
            get
            {
                return __fld_perPage;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_perPage = value;
                __has_perPage = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_page && !IsValidPage(__fld_page, onError)) errorCount++;
            if (__has_perPage && !IsValidPerPage(__fld_perPage, onError)) errorCount++;
            return errorCount;
        }
        public IPaginatedRequest AsReadOnly()
        {
            if (_readOnly) return this;
            PaginatedRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_page = false;
            __fld_page = 0U;
            __has_perPage = false;
            __fld_perPage = 0U;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaginatedRequest value = (PaginatedRequest)base.MemberwiseClone();
            return value;
        }
        public PaginatedRequest Clone()
        {
            return (PaginatedRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaginatedRequest) MergeFrom((IPaginatedRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaginatedRequest other)
        {
            if (other.HasPage) Page = other.Page;
            if (other.HasPerPage) PerPage = other.PerPage;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "page", "per_page" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaginatedRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_page = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_page = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_perPage = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_perPage = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaginatedRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_page)
            {
                writer.WriteElementString("page", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_page, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_perPage)
            {
                writer.WriteElementString("per_page", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_perPage, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region PaginatedResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaginatedResponse : global::NClassify.Library.IMessage
    {
        bool HasPage { get; }
        uint Page { get; }
        bool HasPerPage { get; }
        uint PerPage { get; }
        bool HasPages { get; }
        uint Pages { get; }
        bool HasTotal { get; }
        uint Total { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaginatedResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaginatedResponse : IPaginatedResponse, global::NClassify.Library.IBuilder
    {
        private static readonly PaginatedResponse _defaultInstance = new PaginatedResponse(false);
        public static PaginatedResponse DefaultInstance { get { return _defaultInstance; } }
        static PaginatedResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaginatedResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaginatedResponse() : this(true)
        {
        }
        public PaginatedResponse(IPaginatedResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Page = 1,
            PerPage = 2,
            Pages = 3,
            Total = 4,
        }
        #endregion
        #region Static Data
        public static bool IsValidPage(uint value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1U) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Page, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Page, 1U));
                return false;
            }
            return true;
        }
        public static bool IsValidPerPage(uint value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1U) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PerPage, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.PerPage, 1U));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_page;
        private uint __fld_page;
        private bool __has_perPage;
        private uint __fld_perPage;
        private bool __has_pages;
        private uint __fld_pages;
        private bool __has_total;
        private uint __fld_total;
        #endregion
        #region Instance Members
        public bool HasPage
        {
            get { return __has_page; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0U)]
        public uint Page
        {
            get
            {
                return __fld_page;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_page = value;
                __has_page = true;
            }
        }
        public bool HasPerPage
        {
            get { return __has_perPage; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0U)]
        public uint PerPage
        {
            get
            {
                return __fld_perPage;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_perPage = value;
                __has_perPage = true;
            }
        }
        public bool HasPages
        {
            get { return __has_pages; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0U)]
        public uint Pages
        {
            get
            {
                return __fld_pages;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pages = value;
                __has_pages = true;
            }
        }
        public bool HasTotal
        {
            get { return __has_total; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0U)]
        public uint Total
        {
            get
            {
                return __fld_total;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_total = value;
                __has_total = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_page && !IsValidPage(__fld_page, onError)) errorCount++;
            if (__has_perPage && !IsValidPerPage(__fld_perPage, onError)) errorCount++;
            return errorCount;
        }
        public IPaginatedResponse AsReadOnly()
        {
            if (_readOnly) return this;
            PaginatedResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_page = false;
            __fld_page = 0U;
            __has_perPage = false;
            __fld_perPage = 0U;
            __has_pages = false;
            __fld_pages = 0U;
            __has_total = false;
            __fld_total = 0U;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaginatedResponse value = (PaginatedResponse)base.MemberwiseClone();
            return value;
        }
        public PaginatedResponse Clone()
        {
            return (PaginatedResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaginatedResponse) MergeFrom((IPaginatedResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaginatedResponse other)
        {
            if (other.HasPage) Page = other.Page;
            if (other.HasPerPage) PerPage = other.PerPage;
            if (other.HasPages) Pages = other.Pages;
            if (other.HasTotal) Total = other.Total;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "page", "pages", "per_page", "total" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaginatedResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_page = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_page = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_pages = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_pages = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_perPage = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_perPage = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_total = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_total = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaginatedResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ClientBill
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IClientBill : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasContacts { get; }
        global::Freshbooks.Library.Model.ContactIdentities Contacts { get; }
        bool HasNumber { get; }
        string Number { get; }
        bool HasStaffId { get; }
        global::Freshbooks.Library.Model.StaffId StaffId { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
        bool HasStatus { get; }
        string Status { get; }
        bool HasAmount { get; }
        double Amount { get; }
        bool HasPoNumber { get; }
        string PoNumber { get; }
        bool HasDiscount { get; }
        double Discount { get; }
        bool HasCurrencyCode { get; }
        global::Freshbooks.Library.Model.CurrencyCode CurrencyCode { get; }
        bool HasLanguage { get; }
        string Language { get; }
        bool HasNotes { get; }
        string Notes { get; }
        bool HasTerms { get; }
        string Terms { get; }
        bool HasFirstName { get; }
        string FirstName { get; }
        bool HasLastName { get; }
        string LastName { get; }
        bool HasOrganization { get; }
        string Organization { get; }
        bool HasPStreet1 { get; }
        string PStreet1 { get; }
        bool HasPStreet2 { get; }
        string PStreet2 { get; }
        bool HasPCity { get; }
        string PCity { get; }
        bool HasPState { get; }
        string PState { get; }
        bool HasPCountry { get; }
        string PCountry { get; }
        bool HasPCode { get; }
        string PCode { get; }
        bool HasVatName { get; }
        string VatName { get; }
        bool HasVatNumber { get; }
        string VatNumber { get; }
        bool HasLinks { get; }
        global::Freshbooks.Library.Model.Links Links { get; }
        bool HasLines { get; }
        global::Freshbooks.Library.Model.LineItems Lines { get; }
    }
    [global::System.Xml.Serialization.XmlType("ClientBill")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ClientBill : IClientBill, global::NClassify.Library.IBuilder
    {
        private static readonly ClientBill _defaultInstance = new ClientBill(false);
        public static ClientBill DefaultInstance { get { return _defaultInstance; } }
        static ClientBill()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ClientBill(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ClientBill() : this(true)
        {
        }
        public ClientBill(IClientBill copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ClientId = 2,
            Contacts = 3,
            Number = 11,
            StaffId = 12,
            Folder = 13,
            Status = 14,
            Amount = 15,
            PoNumber = 22,
            Discount = 23,
            CurrencyCode = 24,
            Language = 25,
            Notes = 26,
            Terms = 27,
            FirstName = 31,
            LastName = 32,
            Organization = 33,
            PStreet1 = 41,
            PStreet2 = 42,
            PCity = 43,
            PState = 44,
            PCountry = 45,
            PCode = 46,
            VatName = 51,
            VatNumber = 52,
            Links = 61,
            Lines = 62,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidContacts(global::Freshbooks.Library.Model.ContactIdentities value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Contacts, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Contacts));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Contacts, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Number, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Number));
                return false;
            }
            return true;
        }
        public static bool IsValidStaffId(global::Freshbooks.Library.Model.StaffId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.StaffId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStatus(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Status, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Status));
                return false;
            }
            return true;
        }
        public static bool IsValidPoNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PoNumber, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PoNumber));
                return false;
            }
            return true;
        }
        public static bool IsValidCurrencyCode(global::Freshbooks.Library.Model.CurrencyCode value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CurrencyCode, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidLanguage(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Language, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Language));
                return false;
            }
            return true;
        }
        public static bool IsValidNotes(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Notes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Notes));
                return false;
            }
            return true;
        }
        public static bool IsValidTerms(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Terms, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Terms));
                return false;
            }
            return true;
        }
        public static bool IsValidFirstName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.FirstName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.FirstName));
                return false;
            }
            return true;
        }
        public static bool IsValidLastName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.LastName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.LastName));
                return false;
            }
            return true;
        }
        public static bool IsValidOrganization(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Organization, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Organization));
                return false;
            }
            return true;
        }
        public static bool IsValidPStreet1(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PStreet1, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PStreet1));
                return false;
            }
            return true;
        }
        public static bool IsValidPStreet2(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PStreet2, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PStreet2));
                return false;
            }
            return true;
        }
        public static bool IsValidPCity(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PCity, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PCity));
                return false;
            }
            return true;
        }
        public static bool IsValidPState(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PState, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PState));
                return false;
            }
            return true;
        }
        public static bool IsValidPCountry(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PCountry, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PCountry));
                return false;
            }
            return true;
        }
        public static bool IsValidPCode(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PCode, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PCode));
                return false;
            }
            return true;
        }
        public static bool IsValidVatName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.VatName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.VatName));
                return false;
            }
            return true;
        }
        public static bool IsValidVatNumber(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.VatNumber, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.VatNumber));
                return false;
            }
            return true;
        }
        public static bool IsValidLinks(global::Freshbooks.Library.Model.Links value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Links, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Links));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Links, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidLines(global::Freshbooks.Library.Model.LineItems value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Lines, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Lines));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Lines, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_contacts;
        private global::Freshbooks.Library.Model.ContactIdentities __fld_contacts;
        private bool __has_number;
        private string __fld_number;
        private bool __has_staffId;
        private global::Freshbooks.Library.Model.StaffId __fld_staffId;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        private bool __has_status;
        private string __fld_status;
        private bool __has_amount;
        private double __fld_amount;
        private bool __has_poNumber;
        private string __fld_poNumber;
        private bool __has_discount;
        private double __fld_discount;
        private bool __has_currencyCode;
        private global::Freshbooks.Library.Model.CurrencyCode __fld_currencyCode;
        private bool __has_language;
        private string __fld_language;
        private bool __has_notes;
        private string __fld_notes;
        private bool __has_terms;
        private string __fld_terms;
        private bool __has_firstName;
        private string __fld_firstName;
        private bool __has_lastName;
        private string __fld_lastName;
        private bool __has_organization;
        private string __fld_organization;
        private bool __has_pStreet1;
        private string __fld_pStreet1;
        private bool __has_pStreet2;
        private string __fld_pStreet2;
        private bool __has_pCity;
        private string __fld_pCity;
        private bool __has_pState;
        private string __fld_pState;
        private bool __has_pCountry;
        private string __fld_pCountry;
        private bool __has_pCode;
        private string __fld_pCode;
        private bool __has_vatName;
        private string __fld_vatName;
        private bool __has_vatNumber;
        private string __fld_vatNumber;
        private bool __has_links;
        private global::Freshbooks.Library.Model.Links __fld_links;
        private bool __has_lines;
        private global::Freshbooks.Library.Model.LineItems __fld_lines;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasContacts
        {
            get { return __has_contacts; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contacts = global::Freshbooks.Library.Model.ContactIdentities.DefaultInstance;
                __has_contacts = false;
            }
        }
        public global::Freshbooks.Library.Model.ContactIdentities Contacts
        {
            get
            {
                return __fld_contacts;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Contacts");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contacts = value;
                __has_contacts = true;
            }
        }
        public bool HasNumber
        {
            get { return __has_number; }
        }
        public string Number
        {
            get
            {
                return __fld_number;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Number");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_number = value;
                __has_number = true;
            }
        }
        public bool HasStaffId
        {
            get { return __has_staffId; }
        }
        public global::Freshbooks.Library.Model.StaffId StaffId
        {
            get
            {
                return __fld_staffId;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_staffId = value;
                __has_staffId = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool HasStatus
        {
            get { return __has_status; }
        }
        public string Status
        {
            get
            {
                return __fld_status;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Status");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_status = value;
                __has_status = true;
            }
        }
        public bool HasAmount
        {
            get { return __has_amount; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Amount
        {
            get
            {
                return __fld_amount;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amount = value;
                __has_amount = true;
            }
        }
        public bool HasPoNumber
        {
            get { return __has_poNumber; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_poNumber = "";
                __has_poNumber = false;
            }
        }
        public string PoNumber
        {
            get
            {
                return __fld_poNumber;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PoNumber");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_poNumber = value;
                __has_poNumber = true;
            }
        }
        public bool HasDiscount
        {
            get { return __has_discount; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_discount = 0D;
                __has_discount = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Discount
        {
            get
            {
                return __fld_discount;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_discount = value;
                __has_discount = true;
            }
        }
        public bool HasCurrencyCode
        {
            get { return __has_currencyCode; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currencyCode = new global::Freshbooks.Library.Model.CurrencyCode("");
                __has_currencyCode = false;
            }
        }
        public global::Freshbooks.Library.Model.CurrencyCode CurrencyCode
        {
            get
            {
                return __fld_currencyCode;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currencyCode = value;
                __has_currencyCode = true;
            }
        }
        public bool HasLanguage
        {
            get { return __has_language; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_language = "";
                __has_language = false;
            }
        }
        public string Language
        {
            get
            {
                return __fld_language;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Language");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_language = value;
                __has_language = true;
            }
        }
        public bool HasNotes
        {
            get { return __has_notes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = "";
                __has_notes = false;
            }
        }
        public string Notes
        {
            get
            {
                return __fld_notes;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Notes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = value;
                __has_notes = true;
            }
        }
        public bool HasTerms
        {
            get { return __has_terms; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_terms = "";
                __has_terms = false;
            }
        }
        public string Terms
        {
            get
            {
                return __fld_terms;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Terms");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_terms = value;
                __has_terms = true;
            }
        }
        public bool HasFirstName
        {
            get { return __has_firstName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = "";
                __has_firstName = false;
            }
        }
        public string FirstName
        {
            get
            {
                return __fld_firstName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("FirstName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_firstName = value;
                __has_firstName = true;
            }
        }
        public bool HasLastName
        {
            get { return __has_lastName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = "";
                __has_lastName = false;
            }
        }
        public string LastName
        {
            get
            {
                return __fld_lastName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("LastName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lastName = value;
                __has_lastName = true;
            }
        }
        public bool HasOrganization
        {
            get { return __has_organization; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_organization = "";
                __has_organization = false;
            }
        }
        public string Organization
        {
            get
            {
                return __fld_organization;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Organization");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_organization = value;
                __has_organization = true;
            }
        }
        public bool HasPStreet1
        {
            get { return __has_pStreet1; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet1 = "";
                __has_pStreet1 = false;
            }
        }
        public string PStreet1
        {
            get
            {
                return __fld_pStreet1;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PStreet1");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet1 = value;
                __has_pStreet1 = true;
            }
        }
        public bool HasPStreet2
        {
            get { return __has_pStreet2; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet2 = "";
                __has_pStreet2 = false;
            }
        }
        public string PStreet2
        {
            get
            {
                return __fld_pStreet2;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PStreet2");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pStreet2 = value;
                __has_pStreet2 = true;
            }
        }
        public bool HasPCity
        {
            get { return __has_pCity; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCity = "";
                __has_pCity = false;
            }
        }
        public string PCity
        {
            get
            {
                return __fld_pCity;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PCity");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCity = value;
                __has_pCity = true;
            }
        }
        public bool HasPState
        {
            get { return __has_pState; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pState = "";
                __has_pState = false;
            }
        }
        public string PState
        {
            get
            {
                return __fld_pState;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PState");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pState = value;
                __has_pState = true;
            }
        }
        public bool HasPCountry
        {
            get { return __has_pCountry; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCountry = "";
                __has_pCountry = false;
            }
        }
        public string PCountry
        {
            get
            {
                return __fld_pCountry;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PCountry");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCountry = value;
                __has_pCountry = true;
            }
        }
        public bool HasPCode
        {
            get { return __has_pCode; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCode = "";
                __has_pCode = false;
            }
        }
        public string PCode
        {
            get
            {
                return __fld_pCode;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("PCode");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_pCode = value;
                __has_pCode = true;
            }
        }
        public bool HasVatName
        {
            get { return __has_vatName; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatName = "";
                __has_vatName = false;
            }
        }
        public string VatName
        {
            get
            {
                return __fld_vatName;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("VatName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatName = value;
                __has_vatName = true;
            }
        }
        public bool HasVatNumber
        {
            get { return __has_vatNumber; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatNumber = "";
                __has_vatNumber = false;
            }
        }
        public string VatNumber
        {
            get
            {
                return __fld_vatNumber;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("VatNumber");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_vatNumber = value;
                __has_vatNumber = true;
            }
        }
        public bool HasLinks
        {
            get { return __has_links; }
        }
        public global::Freshbooks.Library.Model.Links Links
        {
            get
            {
                return __fld_links;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Links");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_links = value;
                __has_links = true;
            }
        }
        public bool HasLines
        {
            get { return __has_lines; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lines = global::Freshbooks.Library.Model.LineItems.DefaultInstance;
                __has_lines = false;
            }
        }
        public global::Freshbooks.Library.Model.LineItems Lines
        {
            get
            {
                return __fld_lines;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Lines");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lines = value;
                __has_lines = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_clientId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ClientId));
                errorCount++;
            }
            if (__has_contacts && !IsValidContacts(__fld_contacts, onError)) errorCount++;
            if (__has_number && !IsValidNumber(__fld_number, onError)) errorCount++;
            if (__has_staffId && !IsValidStaffId(__fld_staffId, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            if (__has_status && !IsValidStatus(__fld_status, onError)) errorCount++;
            if (__has_poNumber && !IsValidPoNumber(__fld_poNumber, onError)) errorCount++;
            if (__has_currencyCode && !IsValidCurrencyCode(__fld_currencyCode, onError)) errorCount++;
            if (__has_language && !IsValidLanguage(__fld_language, onError)) errorCount++;
            if (__has_notes && !IsValidNotes(__fld_notes, onError)) errorCount++;
            if (__has_terms && !IsValidTerms(__fld_terms, onError)) errorCount++;
            if (__has_firstName && !IsValidFirstName(__fld_firstName, onError)) errorCount++;
            if (__has_lastName && !IsValidLastName(__fld_lastName, onError)) errorCount++;
            if (__has_organization && !IsValidOrganization(__fld_organization, onError)) errorCount++;
            if (__has_pStreet1 && !IsValidPStreet1(__fld_pStreet1, onError)) errorCount++;
            if (__has_pStreet2 && !IsValidPStreet2(__fld_pStreet2, onError)) errorCount++;
            if (__has_pCity && !IsValidPCity(__fld_pCity, onError)) errorCount++;
            if (__has_pState && !IsValidPState(__fld_pState, onError)) errorCount++;
            if (__has_pCountry && !IsValidPCountry(__fld_pCountry, onError)) errorCount++;
            if (__has_pCode && !IsValidPCode(__fld_pCode, onError)) errorCount++;
            if (__has_vatName && !IsValidVatName(__fld_vatName, onError)) errorCount++;
            if (__has_vatNumber && !IsValidVatNumber(__fld_vatNumber, onError)) errorCount++;
            if (__has_links && !IsValidLinks(__fld_links, onError)) errorCount++;
            if (__has_lines && !IsValidLines(__fld_lines, onError)) errorCount++;
            return errorCount;
        }
        public IClientBill AsReadOnly()
        {
            if (_readOnly) return this;
            ClientBill copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_contacts.MakeReadOnly();
            __fld_links.MakeReadOnly();
            __fld_lines.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_contacts = true;
            __has_number = true;
            __has_status = true;
            __has_poNumber = true;
            __has_language = true;
            __has_notes = true;
            __has_terms = true;
            __has_firstName = true;
            __has_lastName = true;
            __has_organization = true;
            __has_pStreet1 = true;
            __has_pStreet2 = true;
            __has_pCity = true;
            __has_pState = true;
            __has_pCountry = true;
            __has_pCode = true;
            __has_vatName = true;
            __has_vatNumber = true;
            __has_links = true;
            __has_lines = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_contacts = false;
            __fld_contacts = global::Freshbooks.Library.Model.ContactIdentities.DefaultInstance;
            __has_number = false;
            __fld_number = "";
            __has_staffId = false;
            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(0UL);
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
            __has_status = false;
            __fld_status = "";
            __has_amount = false;
            __fld_amount = 0D;
            __has_poNumber = false;
            __fld_poNumber = "";
            __has_discount = false;
            __fld_discount = 0D;
            __has_currencyCode = false;
            __fld_currencyCode = new global::Freshbooks.Library.Model.CurrencyCode("");
            __has_language = false;
            __fld_language = "";
            __has_notes = false;
            __fld_notes = "";
            __has_terms = false;
            __fld_terms = "";
            __has_firstName = false;
            __fld_firstName = "";
            __has_lastName = false;
            __fld_lastName = "";
            __has_organization = false;
            __fld_organization = "";
            __has_pStreet1 = false;
            __fld_pStreet1 = "";
            __has_pStreet2 = false;
            __fld_pStreet2 = "";
            __has_pCity = false;
            __fld_pCity = "";
            __has_pState = false;
            __fld_pState = "";
            __has_pCountry = false;
            __fld_pCountry = "";
            __has_pCode = false;
            __fld_pCode = "";
            __has_vatName = false;
            __fld_vatName = "";
            __has_vatNumber = false;
            __fld_vatNumber = "";
            __has_links = false;
            __fld_links = global::Freshbooks.Library.Model.Links.DefaultInstance;
            __has_lines = false;
            __fld_lines = global::Freshbooks.Library.Model.LineItems.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ClientBill value = (ClientBill)base.MemberwiseClone();
            value.__fld_contacts = (global::Freshbooks.Library.Model.ContactIdentities)value.__fld_contacts.Clone();
            value.__fld_links = (global::Freshbooks.Library.Model.Links)value.__fld_links.Clone();
            value.__fld_lines = (global::Freshbooks.Library.Model.LineItems)value.__fld_lines.Clone();
            return value;
        }
        public ClientBill Clone()
        {
            return (ClientBill)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IClientBill) MergeFrom((IClientBill)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IClientBill other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasContacts) Contacts = (global::Freshbooks.Library.Model.ContactIdentities)other.Contacts.Clone();
            if (other.HasNumber) Number = other.Number;
            if (other.HasStaffId) StaffId = other.StaffId;
            if (other.HasFolder) Folder = other.Folder;
            if (other.HasStatus) Status = other.Status;
            if (other.HasAmount) Amount = other.Amount;
            if (other.HasPoNumber) PoNumber = other.PoNumber;
            if (other.HasDiscount) Discount = other.Discount;
            if (other.HasCurrencyCode) CurrencyCode = other.CurrencyCode;
            if (other.HasLanguage) Language = other.Language;
            if (other.HasNotes) Notes = other.Notes;
            if (other.HasTerms) Terms = other.Terms;
            if (other.HasFirstName) FirstName = other.FirstName;
            if (other.HasLastName) LastName = other.LastName;
            if (other.HasOrganization) Organization = other.Organization;
            if (other.HasPStreet1) PStreet1 = other.PStreet1;
            if (other.HasPStreet2) PStreet2 = other.PStreet2;
            if (other.HasPCity) PCity = other.PCity;
            if (other.HasPState) PState = other.PState;
            if (other.HasPCountry) PCountry = other.PCountry;
            if (other.HasPCode) PCode = other.PCode;
            if (other.HasVatName) VatName = other.VatName;
            if (other.HasVatNumber) VatNumber = other.VatNumber;
            if (other.HasLinks) Links = (global::Freshbooks.Library.Model.Links)other.Links.Clone();
            if (other.HasLines) Lines = (global::Freshbooks.Library.Model.LineItems)other.Lines.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "amount", "client_id", "contacts", "currency_code", "discount", "first_name", "folder", "language", "last_name", "lines", "links", "notes", "number", "organization", "p_city", "p_code", "p_country", "p_state", "p_street1", "p_street2", "po_number", "staff_id", "status", "terms", "vat_name", "vat_number" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ClientBill", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 2:
                    {
                        global::Freshbooks.Library.Model.ContactIdentities value = __fld_contacts;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.ContactIdentities.DefaultInstance) ? new global::Freshbooks.Library.Model.ContactIdentities() : new global::Freshbooks.Library.Model.ContactIdentities(__fld_contacts);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_contacts = value;
                        __has_contacts = true;
                        break;
                    }
                    case 9:
                    {
                        global::Freshbooks.Library.Model.LineItems value = __fld_lines;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.LineItems.DefaultInstance) ? new global::Freshbooks.Library.Model.LineItems() : new global::Freshbooks.Library.Model.LineItems(__fld_lines);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_lines = value;
                        __has_lines = true;
                        break;
                    }
                    case 10:
                    {
                        global::Freshbooks.Library.Model.Links value = __fld_links;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Links.DefaultInstance) ? new global::Freshbooks.Library.Model.Links() : new global::Freshbooks.Library.Model.Links(__fld_links);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_links = value;
                        __has_links = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_amount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_amount = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        __fld_currencyCode = new global::Freshbooks.Library.Model.CurrencyCode(sbuilder.ToString());
                        __has_currencyCode = true;
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_discount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_discount = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        __fld_firstName = sbuilder.ToString();
                        __has_firstName = true;
                        break;
                    }
                    case 6:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 7:
                    {
                        __fld_language = sbuilder.ToString();
                        __has_language = true;
                        break;
                    }
                    case 8:
                    {
                        __fld_lastName = sbuilder.ToString();
                        __has_lastName = true;
                        break;
                    }
                    case 11:
                    {
                        __fld_notes = sbuilder.ToString();
                        __has_notes = true;
                        break;
                    }
                    case 12:
                    {
                        __fld_number = sbuilder.ToString();
                        __has_number = true;
                        break;
                    }
                    case 13:
                    {
                        __fld_organization = sbuilder.ToString();
                        __has_organization = true;
                        break;
                    }
                    case 14:
                    {
                        __fld_pCity = sbuilder.ToString();
                        __has_pCity = true;
                        break;
                    }
                    case 15:
                    {
                        __fld_pCode = sbuilder.ToString();
                        __has_pCode = true;
                        break;
                    }
                    case 16:
                    {
                        __fld_pCountry = sbuilder.ToString();
                        __has_pCountry = true;
                        break;
                    }
                    case 17:
                    {
                        __fld_pState = sbuilder.ToString();
                        __has_pState = true;
                        break;
                    }
                    case 18:
                    {
                        __fld_pStreet1 = sbuilder.ToString();
                        __has_pStreet1 = true;
                        break;
                    }
                    case 19:
                    {
                        __fld_pStreet2 = sbuilder.ToString();
                        __has_pStreet2 = true;
                        break;
                    }
                    case 20:
                    {
                        __fld_poNumber = sbuilder.ToString();
                        __has_poNumber = true;
                        break;
                    }
                    case 21:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_staffId = new global::Freshbooks.Library.Model.StaffId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_staffId = true;
                        }
                        break;
                    }
                    case 22:
                    {
                        __fld_status = sbuilder.ToString();
                        __has_status = true;
                        break;
                    }
                    case 23:
                    {
                        __fld_terms = sbuilder.ToString();
                        __has_terms = true;
                        break;
                    }
                    case 24:
                    {
                        __fld_vatName = sbuilder.ToString();
                        __has_vatName = true;
                        break;
                    }
                    case 25:
                    {
                        __fld_vatNumber = sbuilder.ToString();
                        __has_vatNumber = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ClientBill", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_contacts)
            {
                __fld_contacts.WriteXml("contacts", writer);
            }
            if (__has_poNumber)
            {
                writer.WriteElementString("po_number", __fld_poNumber);
            }
            if (__has_discount)
            {
                writer.WriteElementString("discount", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_discount, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_currencyCode)
            {
                writer.WriteElementString("currency_code", __fld_currencyCode.Value);
            }
            if (__has_language)
            {
                writer.WriteElementString("language", __fld_language);
            }
            if (__has_notes)
            {
                writer.WriteElementString("notes", __fld_notes);
            }
            if (__has_terms)
            {
                writer.WriteElementString("terms", __fld_terms);
            }
            if (__has_firstName)
            {
                writer.WriteElementString("first_name", __fld_firstName);
            }
            if (__has_lastName)
            {
                writer.WriteElementString("last_name", __fld_lastName);
            }
            if (__has_organization)
            {
                writer.WriteElementString("organization", __fld_organization);
            }
            if (__has_pStreet1)
            {
                writer.WriteElementString("p_street1", __fld_pStreet1);
            }
            if (__has_pStreet2)
            {
                writer.WriteElementString("p_street2", __fld_pStreet2);
            }
            if (__has_pCity)
            {
                writer.WriteElementString("p_city", __fld_pCity);
            }
            if (__has_pState)
            {
                writer.WriteElementString("p_state", __fld_pState);
            }
            if (__has_pCountry)
            {
                writer.WriteElementString("p_country", __fld_pCountry);
            }
            if (__has_pCode)
            {
                writer.WriteElementString("p_code", __fld_pCode);
            }
            if (__has_vatName)
            {
                writer.WriteElementString("vat_name", __fld_vatName);
            }
            if (__has_vatNumber)
            {
                writer.WriteElementString("vat_number", __fld_vatNumber);
            }
            if (__has_lines)
            {
                __fld_lines.WriteXml("lines", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ContactIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IContactIdentity : global::NClassify.Library.IMessage
    {
        bool HasContactId { get; }
        global::Freshbooks.Library.Model.ContactId ContactId { get; }
    }
    [global::System.Xml.Serialization.XmlType("ContactIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ContactIdentity : IContactIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly ContactIdentity _defaultInstance = new ContactIdentity(false);
        public static ContactIdentity DefaultInstance { get { return _defaultInstance; } }
        static ContactIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ContactIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ContactIdentity() : this(true)
        {
        }
        public ContactIdentity(IContactIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ContactId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidContactId(global::Freshbooks.Library.Model.ContactId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ContactId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_contactId;
        private global::Freshbooks.Library.Model.ContactId __fld_contactId;
        #endregion
        #region Instance Members
        public bool HasContactId
        {
            get { return __has_contactId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contactId = new global::Freshbooks.Library.Model.ContactId(0UL);
                __has_contactId = false;
            }
        }
        public global::Freshbooks.Library.Model.ContactId ContactId
        {
            get
            {
                return __fld_contactId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contactId = value;
                __has_contactId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_contactId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ContactId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ContactId));
                errorCount++;
            }
            return errorCount;
        }
        public IContactIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            ContactIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_contactId = false;
            __fld_contactId = new global::Freshbooks.Library.Model.ContactId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ContactIdentity value = (ContactIdentity)base.MemberwiseClone();
            return value;
        }
        public ContactIdentity Clone()
        {
            return (ContactIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IContactIdentity) MergeFrom((IContactIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IContactIdentity other)
        {
            if (other.HasContactId) ContactId = other.ContactId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "contact_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ContactIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_contactId = new global::Freshbooks.Library.Model.ContactId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_contactId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ContactIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_contactId)
            {
                writer.WriteElementString("contact_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_contactId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region ContactIdentities
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IContactIdentities : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ContactIdentity> ContactList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ContactIdentities")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ContactIdentities : IContactIdentities, global::NClassify.Library.IBuilder
    {
        private static readonly ContactIdentities _defaultInstance = new ContactIdentities(false);
        public static ContactIdentities DefaultInstance { get { return _defaultInstance; } }
        static ContactIdentities()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ContactIdentities(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ContactIdentities() : this(true)
        {
        }
        public ContactIdentities(IContactIdentities copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ContactList = 1,
        }
        #endregion
        #region _ContactList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ContactList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ContactIdentity>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ContactList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ContactIdentity> _contents;
            public _ContactList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ContactIdentity>();
            }
            public _ContactList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ContactIdentity> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ContactIdentity>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.ContactIdentity item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.ContactIdentity)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.ContactIdentity> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.ContactIdentity this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.ContactIdentity value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.ContactIdentity> value)
            {
                foreach (global::Freshbooks.Library.Model.ContactIdentity item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.ContactIdentity value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.ContactIdentity item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.ContactIdentity item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.ContactIdentity item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.ContactIdentity[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ContactList Clone()
            {
                return _readOnly ? this : new _ContactList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.ContactIdentity> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidContactList(global::Freshbooks.Library.Model.ContactIdentity value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ContactList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ContactList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ContactList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _ContactList __fld_contact;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.ContactIdentity> ContactList
        {
            get
            {
                return __fld_contact;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_contact = new _ContactList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.ContactIdentity item in __fld_contact)
            {
                if (!IsValidContactList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IContactIdentities AsReadOnly()
        {
            if (_readOnly) return this;
            ContactIdentities copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_contact.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_contact = new _ContactList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ContactIdentities value = (ContactIdentities)base.MemberwiseClone();
            value.__fld_contact = value.__fld_contact.Clone();
            return value;
        }
        public ContactIdentities Clone()
        {
            return (ContactIdentities)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IContactIdentities) MergeFrom((IContactIdentities)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IContactIdentities other)
        {
            foreach (global::Freshbooks.Library.Model.ContactIdentity item in other.ContactList)
                __fld_contact.Add((global::Freshbooks.Library.Model.ContactIdentity)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "contact" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ContactIdentities", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ContactIdentity child = new global::Freshbooks.Library.Model.ContactIdentity();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_contact.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ContactIdentities", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (global::Freshbooks.Library.Model.ContactIdentity item in __fld_contact)
            {
                item.WriteXml("contact", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Links
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ILinks : global::NClassify.Library.IMessage
    {
        bool HasClientView { get; }
        global::Freshbooks.Library.Model.Url ClientView { get; }
        bool HasView { get; }
        global::Freshbooks.Library.Model.Url View { get; }
        bool HasEdit { get; }
        global::Freshbooks.Library.Model.Url Edit { get; }
        bool HasStatement { get; }
        global::Freshbooks.Library.Model.Url Statement { get; }
    }
    [global::System.Xml.Serialization.XmlType("Links")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Links : ILinks, global::NClassify.Library.IBuilder
    {
        private static readonly Links _defaultInstance = new Links(false);
        public static Links DefaultInstance { get { return _defaultInstance; } }
        static Links()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Links(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Links() : this(true)
        {
        }
        public Links(ILinks copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ClientView = 1,
            View = 2,
            Edit = 3,
            Statement = 4,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientView(global::Freshbooks.Library.Model.Url value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientView, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidView(global::Freshbooks.Library.Model.Url value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.View, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidEdit(global::Freshbooks.Library.Model.Url value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Edit, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidStatement(global::Freshbooks.Library.Model.Url value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Statement, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_clientView;
        private global::Freshbooks.Library.Model.Url __fld_clientView;
        private bool __has_view;
        private global::Freshbooks.Library.Model.Url __fld_view;
        private bool __has_edit;
        private global::Freshbooks.Library.Model.Url __fld_edit;
        private bool __has_statement;
        private global::Freshbooks.Library.Model.Url __fld_statement;
        #endregion
        #region Instance Members
        public bool HasClientView
        {
            get { return __has_clientView; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientView = new global::Freshbooks.Library.Model.Url("");
                __has_clientView = false;
            }
        }
        public global::Freshbooks.Library.Model.Url ClientView
        {
            get
            {
                return __fld_clientView;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientView = value;
                __has_clientView = true;
            }
        }
        public bool HasView
        {
            get { return __has_view; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_view = new global::Freshbooks.Library.Model.Url("");
                __has_view = false;
            }
        }
        public global::Freshbooks.Library.Model.Url View
        {
            get
            {
                return __fld_view;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_view = value;
                __has_view = true;
            }
        }
        public bool HasEdit
        {
            get { return __has_edit; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_edit = new global::Freshbooks.Library.Model.Url("");
                __has_edit = false;
            }
        }
        public global::Freshbooks.Library.Model.Url Edit
        {
            get
            {
                return __fld_edit;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_edit = value;
                __has_edit = true;
            }
        }
        public bool HasStatement
        {
            get { return __has_statement; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_statement = new global::Freshbooks.Library.Model.Url("");
                __has_statement = false;
            }
        }
        public global::Freshbooks.Library.Model.Url Statement
        {
            get
            {
                return __fld_statement;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_statement = value;
                __has_statement = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientView && !IsValidClientView(__fld_clientView, onError)) errorCount++;
            if (__has_view && !IsValidView(__fld_view, onError)) errorCount++;
            if (__has_edit && !IsValidEdit(__fld_edit, onError)) errorCount++;
            if (__has_statement && !IsValidStatement(__fld_statement, onError)) errorCount++;
            return errorCount;
        }
        public ILinks AsReadOnly()
        {
            if (_readOnly) return this;
            Links copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_clientView = false;
            __fld_clientView = new global::Freshbooks.Library.Model.Url("");
            __has_view = false;
            __fld_view = new global::Freshbooks.Library.Model.Url("");
            __has_edit = false;
            __fld_edit = new global::Freshbooks.Library.Model.Url("");
            __has_statement = false;
            __fld_statement = new global::Freshbooks.Library.Model.Url("");
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Links value = (Links)base.MemberwiseClone();
            return value;
        }
        public Links Clone()
        {
            return (Links)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ILinks) MergeFrom((ILinks)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ILinks other)
        {
            if (other.HasClientView) ClientView = other.ClientView;
            if (other.HasView) View = other.View;
            if (other.HasEdit) Edit = other.Edit;
            if (other.HasStatement) Statement = other.Statement;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_view", "edit", "statement", "view" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Links", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_clientView = new global::Freshbooks.Library.Model.Url(sbuilder.ToString());
                        __has_clientView = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_edit = new global::Freshbooks.Library.Model.Url(sbuilder.ToString());
                        __has_edit = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_statement = new global::Freshbooks.Library.Model.Url(sbuilder.ToString());
                        __has_statement = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_view = new global::Freshbooks.Library.Model.Url(sbuilder.ToString());
                        __has_view = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Links", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_clientView)
            {
                writer.WriteElementString("client_view", __fld_clientView.Value);
            }
            if (__has_view)
            {
                writer.WriteElementString("view", __fld_view.Value);
            }
            if (__has_edit)
            {
                writer.WriteElementString("edit", __fld_edit.Value);
            }
            if (__has_statement)
            {
                writer.WriteElementString("statement", __fld_statement.Value);
            }
        }
        #endregion
    }
    #endregion
    #region LineItem
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ILineItem : global::NClassify.Library.IMessage
    {
        bool HasLineId { get; }
        global::Freshbooks.Library.Model.LineId LineId { get; }
        bool HasName { get; }
        string Name { get; }
        bool HasDescription { get; }
        string Description { get; }
        bool HasUnitCost { get; }
        double UnitCost { get; }
        bool HasQuantity { get; }
        double Quantity { get; }
        bool HasAmount { get; }
        double Amount { get; }
        bool HasTax1Name { get; }
        string Tax1Name { get; }
        bool HasTax2Name { get; }
        string Tax2Name { get; }
        bool HasTax1Percent { get; }
        double Tax1Percent { get; }
        bool HasTax2Percent { get; }
        double Tax2Percent { get; }
        bool HasType { get; }
        string Type { get; }
    }
    [global::System.Xml.Serialization.XmlType("LineItem")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class LineItem : ILineItem, global::NClassify.Library.IBuilder
    {
        private static readonly LineItem _defaultInstance = new LineItem(false);
        public static LineItem DefaultInstance { get { return _defaultInstance; } }
        static LineItem()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected LineItem(bool initalize)
        {
            if (initalize) Initialize();
        }
        public LineItem() : this(true)
        {
        }
        public LineItem(ILineItem copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            LineId = 1,
            Name = 2,
            Description = 3,
            UnitCost = 4,
            Quantity = 5,
            Amount = 6,
            Tax1Name = 7,
            Tax2Name = 8,
            Tax1Percent = 9,
            Tax2Percent = 10,
            Type = 11,
        }
        #endregion
        #region Static Data
        public static bool IsValidLineId(global::Freshbooks.Library.Model.LineId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.LineId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        public static bool IsValidDescription(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Description, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Description));
                return false;
            }
            return true;
        }
        public static bool IsValidUnitCost(double value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(0D) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.UnitCost, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.UnitCost, 0D));
                return false;
            }
            return true;
        }
        public static bool IsValidQuantity(double value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(0D) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Quantity, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Quantity, 0D));
                return false;
            }
            return true;
        }
        public static bool IsValidTax1Name(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax1Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tax1Name));
                return false;
            }
            return true;
        }
        public static bool IsValidTax2Name(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Tax2Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Tax2Name));
                return false;
            }
            return true;
        }
        public static bool IsValidType(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Type, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Type));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_lineId;
        private global::Freshbooks.Library.Model.LineId __fld_lineId;
        private bool __has_name;
        private string __fld_name;
        private bool __has_description;
        private string __fld_description;
        private bool __has_unitCost;
        private double __fld_unitCost;
        private bool __has_quantity;
        private double __fld_quantity;
        private bool __has_amount;
        private double __fld_amount;
        private bool __has_tax1Name;
        private string __fld_tax1Name;
        private bool __has_tax2Name;
        private string __fld_tax2Name;
        private bool __has_tax1Percent;
        private double __fld_tax1Percent;
        private bool __has_tax2Percent;
        private double __fld_tax2Percent;
        private bool __has_type;
        private string __fld_type;
        #endregion
        #region Instance Members
        public bool HasLineId
        {
            get { return __has_lineId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lineId = new global::Freshbooks.Library.Model.LineId(0UL);
                __has_lineId = false;
            }
        }
        public global::Freshbooks.Library.Model.LineId LineId
        {
            get
            {
                return __fld_lineId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_lineId = value;
                __has_lineId = true;
            }
        }
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasDescription
        {
            get { return __has_description; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = "";
                __has_description = false;
            }
        }
        public string Description
        {
            get
            {
                return __fld_description;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Description");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = value;
                __has_description = true;
            }
        }
        public bool HasUnitCost
        {
            get { return __has_unitCost; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_unitCost = 0D;
                __has_unitCost = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double UnitCost
        {
            get
            {
                return __fld_unitCost;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_unitCost = value;
                __has_unitCost = true;
            }
        }
        public bool HasQuantity
        {
            get { return __has_quantity; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_quantity = 0D;
                __has_quantity = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Quantity
        {
            get
            {
                return __fld_quantity;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_quantity = value;
                __has_quantity = true;
            }
        }
        public bool HasAmount
        {
            get { return __has_amount; }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Amount
        {
            get
            {
                return __fld_amount;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amount = value;
                __has_amount = true;
            }
        }
        public bool HasTax1Name
        {
            get { return __has_tax1Name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Name = "";
                __has_tax1Name = false;
            }
        }
        public string Tax1Name
        {
            get
            {
                return __fld_tax1Name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tax1Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Name = value;
                __has_tax1Name = true;
            }
        }
        public bool HasTax2Name
        {
            get { return __has_tax2Name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Name = "";
                __has_tax2Name = false;
            }
        }
        public string Tax2Name
        {
            get
            {
                return __fld_tax2Name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Tax2Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Name = value;
                __has_tax2Name = true;
            }
        }
        public bool HasTax1Percent
        {
            get { return __has_tax1Percent; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Percent = 0D;
                __has_tax1Percent = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Tax1Percent
        {
            get
            {
                return __fld_tax1Percent;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax1Percent = value;
                __has_tax1Percent = true;
            }
        }
        public bool HasTax2Percent
        {
            get { return __has_tax2Percent; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Percent = 0D;
                __has_tax2Percent = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Tax2Percent
        {
            get
            {
                return __fld_tax2Percent;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_tax2Percent = value;
                __has_tax2Percent = true;
            }
        }
        public bool HasType
        {
            get { return __has_type; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_type = "Item";
                __has_type = false;
            }
        }
        public string Type
        {
            get
            {
                return __fld_type;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Type");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_type = value;
                __has_type = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_lineId && !IsValidLineId(__fld_lineId, onError)) errorCount++;
            if (__has_name && !IsValidName(__fld_name, onError)) errorCount++;
            if (__has_description && !IsValidDescription(__fld_description, onError)) errorCount++;
            if (__has_unitCost && !IsValidUnitCost(__fld_unitCost, onError)) errorCount++;
            if (__has_quantity && !IsValidQuantity(__fld_quantity, onError)) errorCount++;
            if (__has_tax1Name && !IsValidTax1Name(__fld_tax1Name, onError)) errorCount++;
            if (__has_tax2Name && !IsValidTax2Name(__fld_tax2Name, onError)) errorCount++;
            if (__has_type && !IsValidType(__fld_type, onError)) errorCount++;
            return errorCount;
        }
        public ILineItem AsReadOnly()
        {
            if (_readOnly) return this;
            LineItem copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
            __has_description = true;
            __has_tax1Name = true;
            __has_tax2Name = true;
            __has_type = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_lineId = false;
            __fld_lineId = new global::Freshbooks.Library.Model.LineId(0UL);
            __has_name = false;
            __fld_name = "";
            __has_description = false;
            __fld_description = "";
            __has_unitCost = false;
            __fld_unitCost = 0D;
            __has_quantity = false;
            __fld_quantity = 0D;
            __has_amount = false;
            __fld_amount = 0D;
            __has_tax1Name = false;
            __fld_tax1Name = "";
            __has_tax2Name = false;
            __fld_tax2Name = "";
            __has_tax1Percent = false;
            __fld_tax1Percent = 0D;
            __has_tax2Percent = false;
            __fld_tax2Percent = 0D;
            __has_type = false;
            __fld_type = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            LineItem value = (LineItem)base.MemberwiseClone();
            return value;
        }
        public LineItem Clone()
        {
            return (LineItem)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ILineItem) MergeFrom((ILineItem)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ILineItem other)
        {
            if (other.HasLineId) LineId = other.LineId;
            if (other.HasName) Name = other.Name;
            if (other.HasDescription) Description = other.Description;
            if (other.HasUnitCost) UnitCost = other.UnitCost;
            if (other.HasQuantity) Quantity = other.Quantity;
            if (other.HasAmount) Amount = other.Amount;
            if (other.HasTax1Name) Tax1Name = other.Tax1Name;
            if (other.HasTax2Name) Tax2Name = other.Tax2Name;
            if (other.HasTax1Percent) Tax1Percent = other.Tax1Percent;
            if (other.HasTax2Percent) Tax2Percent = other.Tax2Percent;
            if (other.HasType) Type = other.Type;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "amount", "description", "line_id", "name", "quantity", "tax1_name", "tax1_percent", "tax2_name", "tax2_percent", "type", "unit_cost" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("LineItem", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_amount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_amount = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_description = sbuilder.ToString();
                        __has_description = true;
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_lineId = new global::Freshbooks.Library.Model.LineId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_lineId = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_quantity = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_quantity = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        __fld_tax1Name = sbuilder.ToString();
                        __has_tax1Name = true;
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_tax1Percent = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_tax1Percent = true;
                        }
                        break;
                    }
                    case 7:
                    {
                        __fld_tax2Name = sbuilder.ToString();
                        __has_tax2Name = true;
                        break;
                    }
                    case 8:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_tax2Percent = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_tax2Percent = true;
                        }
                        break;
                    }
                    case 9:
                    {
                        __fld_type = sbuilder.ToString();
                        __has_type = true;
                        break;
                    }
                    case 10:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_unitCost = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_unitCost = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("LineItem", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_lineId)
            {
                writer.WriteElementString("line_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_lineId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
            if (__has_description)
            {
                writer.WriteElementString("description", __fld_description);
            }
            if (__has_unitCost)
            {
                writer.WriteElementString("unit_cost", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_unitCost, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_quantity)
            {
                writer.WriteElementString("quantity", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_quantity, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_tax1Name)
            {
                writer.WriteElementString("tax1_name", __fld_tax1Name);
            }
            if (__has_tax2Name)
            {
                writer.WriteElementString("tax2_name", __fld_tax2Name);
            }
            if (__has_tax1Percent)
            {
                writer.WriteElementString("tax1_percent", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_tax1Percent, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_tax2Percent)
            {
                writer.WriteElementString("tax2_percent", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_tax2Percent, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_type)
            {
                writer.WriteElementString("type", __fld_type);
            }
        }
        #endregion
    }
    #endregion
    #region LineItems
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ILineItems : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineItem> LineList { get; }
    }
    [global::System.Xml.Serialization.XmlType("LineItems")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class LineItems : ILineItems, global::NClassify.Library.IBuilder
    {
        private static readonly LineItems _defaultInstance = new LineItems(false);
        public static LineItems DefaultInstance { get { return _defaultInstance; } }
        static LineItems()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected LineItems(bool initalize)
        {
            if (initalize) Initialize();
        }
        public LineItems() : this(true)
        {
        }
        public LineItems(ILineItems copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            LineList = 1,
        }
        #endregion
        #region _LineList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _LineList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineItem>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("LineList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineItem> _contents;
            public _LineList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineItem>();
            }
            public _LineList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineItem> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineItem>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.LineItem item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.LineItem)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.LineItem> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.LineItem this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.LineItem value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.LineItem> value)
            {
                foreach (global::Freshbooks.Library.Model.LineItem item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.LineItem value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.LineItem item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.LineItem item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.LineItem item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.LineItem[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _LineList Clone()
            {
                return _readOnly ? this : new _LineList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.LineItem> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidLineList(global::Freshbooks.Library.Model.LineItem value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.LineList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.LineList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.LineList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _LineList __fld_line;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.LineItem> LineList
        {
            get
            {
                return __fld_line;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_line = new _LineList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.LineItem item in __fld_line)
            {
                if (!IsValidLineList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public ILineItems AsReadOnly()
        {
            if (_readOnly) return this;
            LineItems copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_line.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_line = new _LineList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            LineItems value = (LineItems)base.MemberwiseClone();
            value.__fld_line = value.__fld_line.Clone();
            return value;
        }
        public LineItems Clone()
        {
            return (LineItems)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ILineItems) MergeFrom((ILineItems)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ILineItems other)
        {
            foreach (global::Freshbooks.Library.Model.LineItem item in other.LineList)
                __fld_line.Add((global::Freshbooks.Library.Model.LineItem)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "line" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("LineItems", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.LineItem child = new global::Freshbooks.Library.Model.LineItem();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_line.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("LineItems", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (global::Freshbooks.Library.Model.LineItem item in __fld_line)
            {
                item.WriteXml("line", writer);
            }
        }
        #endregion
    }
    #endregion
}
#endregion
