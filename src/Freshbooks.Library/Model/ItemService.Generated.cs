// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region ItemIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItemIdentity : global::NClassify.Library.IMessage
    {
        bool HasItemId { get; }
        global::Freshbooks.Library.Model.ItemId ItemId { get; }
    }
    [global::System.Xml.Serialization.XmlType("ItemIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ItemIdentity : IItemIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly ItemIdentity _defaultInstance = new ItemIdentity(false);
        public static ItemIdentity DefaultInstance { get { return _defaultInstance; } }
        static ItemIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ItemIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ItemIdentity() : this(true)
        {
        }
        public ItemIdentity(IItemIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ItemId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidItemId(global::Freshbooks.Library.Model.ItemId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ItemId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_itemId;
        private global::Freshbooks.Library.Model.ItemId __fld_itemId;
        #endregion
        #region Instance Members
        public bool HasItemId
        {
            get { return __has_itemId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_itemId = new global::Freshbooks.Library.Model.ItemId(0UL);
                __has_itemId = false;
            }
        }
        public global::Freshbooks.Library.Model.ItemId ItemId
        {
            get
            {
                return __fld_itemId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_itemId = value;
                __has_itemId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_itemId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ItemId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ItemId));
                errorCount++;
            }
            return errorCount;
        }
        public IItemIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            ItemIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_itemId = false;
            __fld_itemId = new global::Freshbooks.Library.Model.ItemId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ItemIdentity value = (ItemIdentity)base.MemberwiseClone();
            return value;
        }
        public ItemIdentity Clone()
        {
            return (ItemIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItemIdentity) MergeFrom((IItemIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IItemIdentity other)
        {
            if (other.HasItemId) ItemId = other.ItemId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "item_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ItemIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_itemId = new global::Freshbooks.Library.Model.ItemId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_itemId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ItemIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_itemId)
            {
                writer.WriteElementString("item_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_itemId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region Item
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItem : global::NClassify.Library.IMessage
    {
        bool HasItemId { get; }
        global::Freshbooks.Library.Model.ItemId ItemId { get; }
        bool HasName { get; }
        string Name { get; }
        bool HasDescription { get; }
        string Description { get; }
        bool HasUnitCost { get; }
        double UnitCost { get; }
        bool HasQuantity { get; }
        double Quantity { get; }
        bool HasInventory { get; }
        double Inventory { get; }
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
    }
    [global::System.Xml.Serialization.XmlType("Item")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Item : IItem, global::NClassify.Library.IBuilder
    {
        private static readonly Item _defaultInstance = new Item(false);
        public static Item DefaultInstance { get { return _defaultInstance; } }
        static Item()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Item(bool initalize)
        {
            if (initalize) Initialize();
        }
        public Item() : this(true)
        {
        }
        public Item(IItem copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ItemId = 1,
            Name = 10,
            Description = 11,
            UnitCost = 21,
            Quantity = 22,
            Inventory = 23,
            Folder = 24,
        }
        #endregion
        #region Static Data
        public static bool IsValidItemId(global::Freshbooks.Library.Model.ItemId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ItemId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Name));
                return false;
            }
            return true;
        }
        public static bool IsValidDescription(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Description, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Description));
                return false;
            }
            return true;
        }
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_itemId;
        private global::Freshbooks.Library.Model.ItemId __fld_itemId;
        private bool __has_name;
        private string __fld_name;
        private bool __has_description;
        private string __fld_description;
        private bool __has_unitCost;
        private double __fld_unitCost;
        private bool __has_quantity;
        private double __fld_quantity;
        private bool __has_inventory;
        private double __fld_inventory;
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        #endregion
        #region Instance Members
        public bool HasItemId
        {
            get { return __has_itemId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_itemId = new global::Freshbooks.Library.Model.ItemId(0UL);
                __has_itemId = false;
            }
        }
        public global::Freshbooks.Library.Model.ItemId ItemId
        {
            get
            {
                return __fld_itemId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_itemId = value;
                __has_itemId = true;
            }
        }
        public bool HasName
        {
            get { return __has_name; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = "";
                __has_name = false;
            }
        }
        public string Name
        {
            get
            {
                return __fld_name;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Name");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_name = value;
                __has_name = true;
            }
        }
        public bool HasDescription
        {
            get { return __has_description; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = "";
                __has_description = false;
            }
        }
        public string Description
        {
            get
            {
                return __fld_description;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Description");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_description = value;
                __has_description = true;
            }
        }
        public bool HasUnitCost
        {
            get { return __has_unitCost; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_unitCost = 0D;
                __has_unitCost = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double UnitCost
        {
            get
            {
                return __fld_unitCost;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_unitCost = value;
                __has_unitCost = true;
            }
        }
        public bool HasQuantity
        {
            get { return __has_quantity; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_quantity = 0D;
                __has_quantity = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Quantity
        {
            get
            {
                return __fld_quantity;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_quantity = value;
                __has_quantity = true;
            }
        }
        public bool HasInventory
        {
            get { return __has_inventory; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_inventory = 0D;
                __has_inventory = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Inventory
        {
            get
            {
                return __fld_inventory;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_inventory = value;
                __has_inventory = true;
            }
        }
        public bool HasFolder
        {
            get { return __has_folder; }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_itemId && !IsValidItemId(__fld_itemId, onError)) errorCount++;
            if (!__has_name)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Name, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Name));
                errorCount++;
            }
            if (__has_description && !IsValidDescription(__fld_description, onError)) errorCount++;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            return errorCount;
        }
        public IItem AsReadOnly()
        {
            if (_readOnly) return this;
            Item copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_name = true;
            __has_description = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_itemId = false;
            __fld_itemId = new global::Freshbooks.Library.Model.ItemId(0UL);
            __has_name = false;
            __fld_name = "";
            __has_description = false;
            __fld_description = "";
            __has_unitCost = false;
            __fld_unitCost = 0D;
            __has_quantity = false;
            __fld_quantity = 0D;
            __has_inventory = false;
            __fld_inventory = 0D;
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            Item value = (Item)base.MemberwiseClone();
            return value;
        }
        public Item Clone()
        {
            return (Item)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItem) MergeFrom((IItem)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IItem other)
        {
            if (other.HasItemId) ItemId = other.ItemId;
            if (other.HasName) Name = other.Name;
            if (other.HasDescription) Description = other.Description;
            if (other.HasUnitCost) UnitCost = other.UnitCost;
            if (other.HasQuantity) Quantity = other.Quantity;
            if (other.HasInventory) Inventory = other.Inventory;
            if (other.HasFolder) Folder = other.Folder;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "description", "folder", "inventory", "item_id", "name", "quantity", "unit_cost" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("Item", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_description = sbuilder.ToString();
                        __has_description = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_inventory = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_inventory = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_itemId = new global::Freshbooks.Library.Model.ItemId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_itemId = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        __fld_name = sbuilder.ToString();
                        __has_name = true;
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_quantity = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_quantity = true;
                        }
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_unitCost = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_unitCost = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("Item", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_itemId)
            {
                writer.WriteElementString("item_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_itemId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_name)
            {
                writer.WriteElementString("name", __fld_name);
            }
            if (__has_description)
            {
                writer.WriteElementString("description", __fld_description);
            }
            if (__has_unitCost)
            {
                writer.WriteElementString("unit_cost", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_unitCost, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_quantity)
            {
                writer.WriteElementString("quantity", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_quantity, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_inventory)
            {
                writer.WriteElementString("inventory", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_inventory, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region ItemRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItemRequest : global::NClassify.Library.IMessage
    {
        bool HasItem { get; }
        global::Freshbooks.Library.Model.Item Item { get; }
    }
    [global::System.Xml.Serialization.XmlType("ItemRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ItemRequest : IItemRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ItemRequest _defaultInstance = new ItemRequest(false);
        public static ItemRequest DefaultInstance { get { return _defaultInstance; } }
        static ItemRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ItemRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ItemRequest() : this(true)
        {
        }
        public ItemRequest(IItemRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Item = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidItem(global::Freshbooks.Library.Model.Item value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Item, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Item));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Item, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_item;
        private global::Freshbooks.Library.Model.Item __fld_item;
        #endregion
        #region Instance Members
        public bool HasItem
        {
            get { return __has_item; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_item = global::Freshbooks.Library.Model.Item.DefaultInstance;
                __has_item = false;
            }
        }
        public global::Freshbooks.Library.Model.Item Item
        {
            get
            {
                return __fld_item;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Item");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_item = value;
                __has_item = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_item)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Item, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Item));
                errorCount++;
            }
            return errorCount;
        }
        public IItemRequest AsReadOnly()
        {
            if (_readOnly) return this;
            ItemRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_item.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_item = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_item = false;
            __fld_item = global::Freshbooks.Library.Model.Item.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ItemRequest value = (ItemRequest)base.MemberwiseClone();
            value.__fld_item = (global::Freshbooks.Library.Model.Item)value.__fld_item.Clone();
            return value;
        }
        public ItemRequest Clone()
        {
            return (ItemRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItemRequest) MergeFrom((IItemRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IItemRequest other)
        {
            if (other.HasItem) Item = (global::Freshbooks.Library.Model.Item)other.Item.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "item" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ItemRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Item value = __fld_item;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Item.DefaultInstance) ? new global::Freshbooks.Library.Model.Item() : new global::Freshbooks.Library.Model.Item(__fld_item);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_item = value;
                        __has_item = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ItemRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_item)
            {
                __fld_item.WriteXml("item", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ItemResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItemResponse : global::NClassify.Library.IMessage
    {
        bool HasItem { get; }
        global::Freshbooks.Library.Model.Item Item { get; }
    }
    [global::System.Xml.Serialization.XmlType("ItemResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ItemResponse : IItemResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ItemResponse _defaultInstance = new ItemResponse(false);
        public static ItemResponse DefaultInstance { get { return _defaultInstance; } }
        static ItemResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ItemResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ItemResponse() : this(true)
        {
        }
        public ItemResponse(IItemResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Item = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidItem(global::Freshbooks.Library.Model.Item value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Item, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Item));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Item, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_item;
        private global::Freshbooks.Library.Model.Item __fld_item;
        #endregion
        #region Instance Members
        public bool HasItem
        {
            get { return __has_item; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_item = global::Freshbooks.Library.Model.Item.DefaultInstance;
                __has_item = false;
            }
        }
        public global::Freshbooks.Library.Model.Item Item
        {
            get
            {
                return __fld_item;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Item");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_item = value;
                __has_item = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_item)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Item, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Item));
                errorCount++;
            }
            return errorCount;
        }
        public IItemResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ItemResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_item.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_item = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_item = false;
            __fld_item = global::Freshbooks.Library.Model.Item.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ItemResponse value = (ItemResponse)base.MemberwiseClone();
            value.__fld_item = (global::Freshbooks.Library.Model.Item)value.__fld_item.Clone();
            return value;
        }
        public ItemResponse Clone()
        {
            return (ItemResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItemResponse) MergeFrom((IItemResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IItemResponse other)
        {
            if (other.HasItem) Item = (global::Freshbooks.Library.Model.Item)other.Item.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "item" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ItemResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Item value = __fld_item;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Item.DefaultInstance) ? new global::Freshbooks.Library.Model.Item() : new global::Freshbooks.Library.Model.Item(__fld_item);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_item = value;
                        __has_item = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ItemResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_item)
            {
                __fld_item.WriteXml("item", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Items
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItems : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Item> ItemList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Items")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Items : global::Freshbooks.Library.Model.PaginatedResponse, IItems, global::NClassify.Library.IBuilder
    {
        private static readonly Items _defaultInstance = new Items(false);
        public static new Items DefaultInstance { get { return _defaultInstance; } }
        static Items()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Items(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Items() : this(true)
        {
        }
        public Items(IItems copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ItemList = 10,
        }
        #endregion
        #region _ItemList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ItemList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Item>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ItemList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Item> _contents;
            public _ItemList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Item>();
            }
            public _ItemList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Item> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Item>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Item item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Item)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Item> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Item this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Item value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Item> value)
            {
                foreach (global::Freshbooks.Library.Model.Item item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Item value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Item item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Item item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Item item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Item[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ItemList Clone()
            {
                return _readOnly ? this : new _ItemList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Item> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidItemList(global::Freshbooks.Library.Model.Item value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ItemList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ItemList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ItemList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _ItemList __fld_item;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Item> ItemList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Item>(__fld_item);
                return __fld_item;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_item = new _ItemList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Item item in __fld_item)
            {
                if (!IsValidItemList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_item.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_item = new _ItemList();
        }
        protected override object MemberwiseClone()
        {
            Items value = (Items)base.MemberwiseClone();
            value.__fld_item = value.__fld_item.Clone();
            return value;
        }
        public new Items Clone()
        {
            return (Items)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItems) MergeFrom((IItems)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IItems other)
        {
            foreach (global::Freshbooks.Library.Model.Item item in other.ItemList)
                __fld_item.Add((global::Freshbooks.Library.Model.Item)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "item" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Item child = new global::Freshbooks.Library.Model.Item();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_item.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region ItemsResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItemsResponse : global::NClassify.Library.IMessage
    {
        bool HasItems { get; }
        global::Freshbooks.Library.Model.Items Items { get; }
    }
    [global::System.Xml.Serialization.XmlType("ItemsResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ItemsResponse : IItemsResponse, global::NClassify.Library.IBuilder
    {
        private static readonly ItemsResponse _defaultInstance = new ItemsResponse(false);
        public static ItemsResponse DefaultInstance { get { return _defaultInstance; } }
        static ItemsResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ItemsResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ItemsResponse() : this(true)
        {
        }
        public ItemsResponse(IItemsResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Items = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidItems(global::Freshbooks.Library.Model.Items value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Items, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Items));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Items, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_items;
        private global::Freshbooks.Library.Model.Items __fld_items;
        #endregion
        #region Instance Members
        public bool HasItems
        {
            get { return __has_items; }
        }
        public global::Freshbooks.Library.Model.Items Items
        {
            get
            {
                return __fld_items;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Items");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_items = value;
                __has_items = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_items)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Items, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Items));
                errorCount++;
            }
            return errorCount;
        }
        public IItemsResponse AsReadOnly()
        {
            if (_readOnly) return this;
            ItemsResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_items.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_items = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_items = false;
            __fld_items = global::Freshbooks.Library.Model.Items.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ItemsResponse value = (ItemsResponse)base.MemberwiseClone();
            value.__fld_items = (global::Freshbooks.Library.Model.Items)value.__fld_items.Clone();
            return value;
        }
        public ItemsResponse Clone()
        {
            return (ItemsResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItemsResponse) MergeFrom((IItemsResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IItemsResponse other)
        {
            if (other.HasItems) Items = (global::Freshbooks.Library.Model.Items)other.Items.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "items" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ItemsResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Items value = __fld_items;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Items.DefaultInstance) ? new global::Freshbooks.Library.Model.Items() : new global::Freshbooks.Library.Model.Items(__fld_items);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_items = value;
                        __has_items = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ItemsResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region ItemsRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItemsRequest : global::NClassify.Library.IMessage
    {
        bool HasFolder { get; }
        global::Freshbooks.Library.Model.FolderType Folder { get; }
    }
    [global::System.Xml.Serialization.XmlType("ItemsRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ItemsRequest : global::Freshbooks.Library.Model.PaginatedRequest, IItemsRequest, global::NClassify.Library.IBuilder
    {
        private static readonly ItemsRequest _defaultInstance = new ItemsRequest(false);
        public static new ItemsRequest DefaultInstance { get { return _defaultInstance; } }
        static ItemsRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ItemsRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public ItemsRequest() : this(true)
        {
        }
        public ItemsRequest(IItemsRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            Folder = 10,
        }
        #endregion
        #region Static Data
        public static bool IsValidFolder(global::Freshbooks.Library.Model.FolderType value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Folder, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_folder;
        private global::Freshbooks.Library.Model.FolderType __fld_folder;
        #endregion
        #region Instance Members
        public bool HasFolder
        {
            get { return __has_folder; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
                __has_folder = false;
            }
        }
        public global::Freshbooks.Library.Model.FolderType Folder
        {
            get
            {
                return __fld_folder;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_folder = value;
                __has_folder = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_folder && !IsValidFolder(__fld_folder, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_folder = false;
            __fld_folder = new global::Freshbooks.Library.Model.FolderType("");
        }
        protected override object MemberwiseClone()
        {
            ItemsRequest value = (ItemsRequest)base.MemberwiseClone();
            return value;
        }
        public new ItemsRequest Clone()
        {
            return (ItemsRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IItemsRequest) MergeFrom((IItemsRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IItemsRequest other)
        {
            if (other.HasFolder) Folder = other.Folder;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "folder" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_folder = new global::Freshbooks.Library.Model.FolderType(sbuilder.ToString());
                        __has_folder = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_folder)
            {
                writer.WriteElementString("folder", __fld_folder.Value);
            }
        }
        #endregion
    }
    #endregion
    #region ItemService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IItemService
    {
        global::Freshbooks.Library.Model.ItemIdentity Create(global::Freshbooks.Library.Model.ItemRequest itemRequest);
        void Update(global::Freshbooks.Library.Model.ItemRequest itemRequest);
        global::Freshbooks.Library.Model.ItemResponse Get(global::Freshbooks.Library.Model.ItemIdentity itemIdentity);
        void Delete(global::Freshbooks.Library.Model.ItemIdentity itemIdentity);
        global::Freshbooks.Library.Model.ItemsResponse List(global::Freshbooks.Library.Model.ItemsRequest itemsRequest);
    }
    [global::System.Xml.Serialization.XmlType("ItemService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ItemService : IItemService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public ItemService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public ItemService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.ItemIdentity Create(global::Freshbooks.Library.Model.ItemRequest itemRequest)
        {
            global::Freshbooks.Library.Model.ItemIdentity response = new global::Freshbooks.Library.Model.ItemIdentity();
            Invoke("create", itemRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.ItemRequest itemRequest)
        {
            Invoke("update", itemRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ItemResponse Get(global::Freshbooks.Library.Model.ItemIdentity itemIdentity)
        {
            global::Freshbooks.Library.Model.ItemResponse response = new global::Freshbooks.Library.Model.ItemResponse();
            Invoke("get", itemIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.ItemIdentity itemIdentity)
        {
            Invoke("delete", itemIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.ItemsResponse List(global::Freshbooks.Library.Model.ItemsRequest itemsRequest)
        {
            global::Freshbooks.Library.Model.ItemsResponse response = new global::Freshbooks.Library.Model.ItemsResponse();
            Invoke("list", itemsRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IItemService _dispatch;
            public Dispatch(IItemService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IItemService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.ItemRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.ItemIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.ItemIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.ItemsRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.ItemRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IItemService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IItemService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IItemService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.ItemRequest request = new global::Freshbooks.Library.Model.ItemRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ItemIdentity response = new global::Freshbooks.Library.Model.ItemIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.ItemIdentity request = new global::Freshbooks.Library.Model.ItemIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.ItemIdentity request = new global::Freshbooks.Library.Model.ItemIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.ItemResponse response = new global::Freshbooks.Library.Model.ItemResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.ItemsRequest request = new global::Freshbooks.Library.Model.ItemsRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.ItemsResponse response = new global::Freshbooks.Library.Model.ItemsResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.ItemRequest request = new global::Freshbooks.Library.Model.ItemRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IItemService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
