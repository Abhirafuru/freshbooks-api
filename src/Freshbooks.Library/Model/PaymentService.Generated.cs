// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace Freshbooks.Library.Model
{
    #region PaymentIdentity
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentIdentity : global::NClassify.Library.IMessage
    {
        bool HasPaymentId { get; }
        global::Freshbooks.Library.Model.PaymentId PaymentId { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentIdentity")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentIdentity : IPaymentIdentity, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentIdentity _defaultInstance = new PaymentIdentity(false);
        public static PaymentIdentity DefaultInstance { get { return _defaultInstance; } }
        static PaymentIdentity()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentIdentity(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentIdentity() : this(true)
        {
        }
        public PaymentIdentity(IPaymentIdentity copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            PaymentId = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidPaymentId(global::Freshbooks.Library.Model.PaymentId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.PaymentId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_paymentId;
        private global::Freshbooks.Library.Model.PaymentId __fld_paymentId;
        #endregion
        #region Instance Members
        public bool HasPaymentId
        {
            get { return __has_paymentId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_paymentId = new global::Freshbooks.Library.Model.PaymentId(0UL);
                __has_paymentId = false;
            }
        }
        public global::Freshbooks.Library.Model.PaymentId PaymentId
        {
            get
            {
                return __fld_paymentId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_paymentId = value;
                __has_paymentId = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_paymentId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PaymentId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.PaymentId));
                errorCount++;
            }
            return errorCount;
        }
        public IPaymentIdentity AsReadOnly()
        {
            if (_readOnly) return this;
            PaymentIdentity copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_paymentId = false;
            __fld_paymentId = new global::Freshbooks.Library.Model.PaymentId(0UL);
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaymentIdentity value = (PaymentIdentity)base.MemberwiseClone();
            return value;
        }
        public PaymentIdentity Clone()
        {
            return (PaymentIdentity)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentIdentity) MergeFrom((IPaymentIdentity)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaymentIdentity other)
        {
            if (other.HasPaymentId) PaymentId = other.PaymentId;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "payment_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaymentIdentity", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_paymentId = new global::Freshbooks.Library.Model.PaymentId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_paymentId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaymentIdentity", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_paymentId)
            {
                writer.WriteElementString("payment_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_paymentId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region GatewayTransaction
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IGatewayTransaction : global::NClassify.Library.IMessage
    {
        bool HasReferenceId { get; }
        string ReferenceId { get; }
        bool HasGatewayName { get; }
        string GatewayName { get; }
    }
    [global::System.Xml.Serialization.XmlType("GatewayTransaction")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class GatewayTransaction : IGatewayTransaction, global::NClassify.Library.IBuilder
    {
        private static readonly GatewayTransaction _defaultInstance = new GatewayTransaction(false);
        public static GatewayTransaction DefaultInstance { get { return _defaultInstance; } }
        static GatewayTransaction()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected GatewayTransaction(bool initalize)
        {
            if (initalize) Initialize();
        }
        public GatewayTransaction() : this(true)
        {
        }
        public GatewayTransaction(IGatewayTransaction copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            ReferenceId = 1,
            GatewayName = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidReferenceId(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ReferenceId, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ReferenceId));
                return false;
            }
            return true;
        }
        public static bool IsValidGatewayName(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayName, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.GatewayName));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_referenceId;
        private string __fld_referenceId;
        private bool __has_gatewayName;
        private string __fld_gatewayName;
        #endregion
        #region Instance Members
        public bool HasReferenceId
        {
            get { return __has_referenceId; }
        }
        public string ReferenceId
        {
            get
            {
                return __fld_referenceId;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("ReferenceId");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_referenceId = value;
                __has_referenceId = true;
            }
        }
        public bool HasGatewayName
        {
            get { return __has_gatewayName; }
        }
        public string GatewayName
        {
            get
            {
                return __fld_gatewayName;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("GatewayName");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_gatewayName = value;
                __has_gatewayName = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_referenceId)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ReferenceId, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.ReferenceId));
                errorCount++;
            }
            if (!__has_gatewayName)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayName, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.GatewayName));
                errorCount++;
            }
            return errorCount;
        }
        public IGatewayTransaction AsReadOnly()
        {
            if (_readOnly) return this;
            GatewayTransaction copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_referenceId = true;
            __has_gatewayName = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_referenceId = false;
            __fld_referenceId = "";
            __has_gatewayName = false;
            __fld_gatewayName = "";
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            GatewayTransaction value = (GatewayTransaction)base.MemberwiseClone();
            return value;
        }
        public GatewayTransaction Clone()
        {
            return (GatewayTransaction)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IGatewayTransaction) MergeFrom((IGatewayTransaction)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IGatewayTransaction other)
        {
            if (other.HasReferenceId) ReferenceId = other.ReferenceId;
            if (other.HasGatewayName) GatewayName = other.GatewayName;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "gateway_name", "reference_id" };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("GatewayTransaction", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_gatewayName = sbuilder.ToString();
                        __has_gatewayName = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_referenceId = sbuilder.ToString();
                        __has_referenceId = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("GatewayTransaction", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region Payment
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPayment : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
    }
    [global::System.Xml.Serialization.XmlType("Payment")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Payment : global::Freshbooks.Library.Model.PaymentUpdate, IPayment, global::NClassify.Library.IBuilder
    {
        private static readonly Payment _defaultInstance = new Payment(false);
        public static new Payment DefaultInstance { get { return _defaultInstance; } }
        static Payment()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Payment(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Payment() : this(true)
        {
        }
        public Payment(IPayment copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientId = 2,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
        }
        protected override object MemberwiseClone()
        {
            Payment value = (Payment)base.MemberwiseClone();
            return value;
        }
        public new Payment Clone()
        {
            return (Payment)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPayment) MergeFrom((IPayment)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IPayment other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region PaymentUpdate
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentUpdate : global::NClassify.Library.IMessage
    {
        bool HasPaymentId { get; }
        global::Freshbooks.Library.Model.PaymentId PaymentId { get; }
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
        bool HasDate { get; }
        global::System.DateTime Date { get; }
        bool HasAmount { get; }
        double Amount { get; }
        bool HasCurrencyCode { get; }
        global::Freshbooks.Library.Model.CurrencyCode CurrencyCode { get; }
        bool HasType { get; }
        string Type { get; }
        bool HasNotes { get; }
        string Notes { get; }
        bool HasUpdated { get; }
        global::System.DateTime Updated { get; }
        bool HasGatewayTransaction { get; }
        global::Freshbooks.Library.Model.GatewayTransaction GatewayTransaction { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentUpdate")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentUpdate : IPaymentUpdate, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentUpdate _defaultInstance = new PaymentUpdate(false);
        public static PaymentUpdate DefaultInstance { get { return _defaultInstance; } }
        static PaymentUpdate()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentUpdate(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentUpdate() : this(true)
        {
        }
        public PaymentUpdate(IPaymentUpdate copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            PaymentId = 1,
            InvoiceId = 3,
            Date = 10,
            Amount = 11,
            CurrencyCode = 12,
            Type = 13,
            Notes = 14,
            Updated = 21,
            GatewayTransaction = 22,
        }
        #endregion
        #region Static Data
        public static bool IsValidPaymentId(global::Freshbooks.Library.Model.PaymentId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.PaymentId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidCurrencyCode(global::Freshbooks.Library.Model.CurrencyCode value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.CurrencyCode, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidType(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Type, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Type));
                return false;
            }
            return true;
        }
        public static bool IsValidNotes(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Notes, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Notes));
                return false;
            }
            return true;
        }
        public static bool IsValidGatewayTransaction(global::Freshbooks.Library.Model.GatewayTransaction value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayTransaction, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.GatewayTransaction));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.GatewayTransaction, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_paymentId;
        private global::Freshbooks.Library.Model.PaymentId __fld_paymentId;
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        private bool __has_date;
        private global::System.DateTime __fld_date;
        private bool __has_amount;
        private double __fld_amount;
        private bool __has_currencyCode;
        private global::Freshbooks.Library.Model.CurrencyCode __fld_currencyCode;
        private bool __has_type;
        private string __fld_type;
        private bool __has_notes;
        private string __fld_notes;
        private bool __has_updated;
        private global::System.DateTime __fld_updated;
        private bool __has_gatewayTransaction;
        private global::Freshbooks.Library.Model.GatewayTransaction __fld_gatewayTransaction;
        #endregion
        #region Instance Members
        public bool HasPaymentId
        {
            get { return __has_paymentId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_paymentId = new global::Freshbooks.Library.Model.PaymentId(0UL);
                __has_paymentId = false;
            }
        }
        public global::Freshbooks.Library.Model.PaymentId PaymentId
        {
            get
            {
                return __fld_paymentId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_paymentId = value;
                __has_paymentId = true;
            }
        }
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public bool HasDate
        {
            get { return __has_date; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = global::System.DateTime.MinValue;
                __has_date = false;
            }
        }
        public global::System.DateTime Date
        {
            get
            {
                return __fld_date;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_date = value;
                __has_date = true;
            }
        }
        public bool HasAmount
        {
            get { return __has_amount; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amount = 0D;
                __has_amount = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(0D)]
        public double Amount
        {
            get
            {
                return __fld_amount;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_amount = value;
                __has_amount = true;
            }
        }
        public bool HasCurrencyCode
        {
            get { return __has_currencyCode; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currencyCode = new global::Freshbooks.Library.Model.CurrencyCode("");
                __has_currencyCode = false;
            }
        }
        public global::Freshbooks.Library.Model.CurrencyCode CurrencyCode
        {
            get
            {
                return __fld_currencyCode;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_currencyCode = value;
                __has_currencyCode = true;
            }
        }
        public bool HasType
        {
            get { return __has_type; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_type = "";
                __has_type = false;
            }
        }
        public string Type
        {
            get
            {
                return __fld_type;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Type");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_type = value;
                __has_type = true;
            }
        }
        public bool HasNotes
        {
            get { return __has_notes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = "";
                __has_notes = false;
            }
        }
        public string Notes
        {
            get
            {
                return __fld_notes;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Notes");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_notes = value;
                __has_notes = true;
            }
        }
        public bool HasUpdated
        {
            get { return __has_updated; }
        }
        public global::System.DateTime Updated
        {
            get
            {
                return __fld_updated;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updated = value;
                __has_updated = true;
            }
        }
        public bool HasGatewayTransaction
        {
            get { return __has_gatewayTransaction; }
        }
        public global::Freshbooks.Library.Model.GatewayTransaction GatewayTransaction
        {
            get
            {
                return __fld_gatewayTransaction;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("GatewayTransaction");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_gatewayTransaction = value;
                __has_gatewayTransaction = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_paymentId && !IsValidPaymentId(__fld_paymentId, onError)) errorCount++;
            if (__has_invoiceId && !IsValidInvoiceId(__fld_invoiceId, onError)) errorCount++;
            if (__has_currencyCode && !IsValidCurrencyCode(__fld_currencyCode, onError)) errorCount++;
            if (__has_type && !IsValidType(__fld_type, onError)) errorCount++;
            if (__has_notes && !IsValidNotes(__fld_notes, onError)) errorCount++;
            if (__has_gatewayTransaction && !IsValidGatewayTransaction(__fld_gatewayTransaction, onError)) errorCount++;
            return errorCount;
        }
        public IPaymentUpdate AsReadOnly()
        {
            if (_readOnly) return this;
            PaymentUpdate copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_gatewayTransaction.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_type = true;
            __has_notes = true;
            __has_gatewayTransaction = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_paymentId = false;
            __fld_paymentId = new global::Freshbooks.Library.Model.PaymentId(0UL);
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
            __has_date = false;
            __fld_date = global::System.DateTime.MinValue;
            __has_amount = false;
            __fld_amount = 0D;
            __has_currencyCode = false;
            __fld_currencyCode = new global::Freshbooks.Library.Model.CurrencyCode("");
            __has_type = false;
            __fld_type = "";
            __has_notes = false;
            __fld_notes = "";
            __has_updated = false;
            __fld_updated = global::System.DateTime.MinValue;
            __has_gatewayTransaction = false;
            __fld_gatewayTransaction = global::Freshbooks.Library.Model.GatewayTransaction.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaymentUpdate value = (PaymentUpdate)base.MemberwiseClone();
            value.__fld_gatewayTransaction = (global::Freshbooks.Library.Model.GatewayTransaction)value.__fld_gatewayTransaction.Clone();
            return value;
        }
        public PaymentUpdate Clone()
        {
            return (PaymentUpdate)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentUpdate) MergeFrom((IPaymentUpdate)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaymentUpdate other)
        {
            if (other.HasPaymentId) PaymentId = other.PaymentId;
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
            if (other.HasDate) Date = other.Date;
            if (other.HasAmount) Amount = other.Amount;
            if (other.HasCurrencyCode) CurrencyCode = other.CurrencyCode;
            if (other.HasType) Type = other.Type;
            if (other.HasNotes) Notes = other.Notes;
            if (other.HasUpdated) Updated = other.Updated;
            if (other.HasGatewayTransaction) GatewayTransaction = (global::Freshbooks.Library.Model.GatewayTransaction)other.GatewayTransaction.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "amount", "currency_code", "date", "gateway_transaction", "invoice_id", "notes", "payment_id", "type", "updated" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, false, false, true, false, false, false, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaymentUpdate", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 3:
                    {
                        global::Freshbooks.Library.Model.GatewayTransaction value = __fld_gatewayTransaction;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.GatewayTransaction.DefaultInstance) ? new global::Freshbooks.Library.Model.GatewayTransaction() : new global::Freshbooks.Library.Model.GatewayTransaction(__fld_gatewayTransaction);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_gatewayTransaction = value;
                        __has_gatewayTransaction = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_amount = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_amount = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        __fld_currencyCode = new global::Freshbooks.Library.Model.CurrencyCode(sbuilder.ToString());
                        __has_currencyCode = true;
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_date = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_date = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        __fld_notes = sbuilder.ToString();
                        __has_notes = true;
                        break;
                    }
                    case 6:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_paymentId = new global::Freshbooks.Library.Model.PaymentId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_paymentId = true;
                        }
                        break;
                    }
                    case 7:
                    {
                        __fld_type = sbuilder.ToString();
                        __has_type = true;
                        break;
                    }
                    case 8:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updated = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updated = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaymentUpdate", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_paymentId)
            {
                writer.WriteElementString("payment_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_paymentId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_date)
            {
                writer.WriteElementString("date", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_date, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_amount)
            {
                writer.WriteElementString("amount", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_amount, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_currencyCode)
            {
                writer.WriteElementString("currency_code", __fld_currencyCode.Value);
            }
            if (__has_type)
            {
                writer.WriteElementString("type", __fld_type);
            }
            if (__has_notes)
            {
                writer.WriteElementString("notes", __fld_notes);
            }
        }
        #endregion
    }
    #endregion
    #region PaymentRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentRequest : global::NClassify.Library.IMessage
    {
        bool HasPayment { get; }
        global::Freshbooks.Library.Model.Payment Payment { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentRequest : IPaymentRequest, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentRequest _defaultInstance = new PaymentRequest(false);
        public static PaymentRequest DefaultInstance { get { return _defaultInstance; } }
        static PaymentRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentRequest() : this(true)
        {
        }
        public PaymentRequest(IPaymentRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Payment = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidPayment(global::Freshbooks.Library.Model.Payment value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Payment));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_payment;
        private global::Freshbooks.Library.Model.Payment __fld_payment;
        #endregion
        #region Instance Members
        public bool HasPayment
        {
            get { return __has_payment; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = global::Freshbooks.Library.Model.Payment.DefaultInstance;
                __has_payment = false;
            }
        }
        public global::Freshbooks.Library.Model.Payment Payment
        {
            get
            {
                return __fld_payment;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Payment");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = value;
                __has_payment = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_payment)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Payment));
                errorCount++;
            }
            return errorCount;
        }
        public IPaymentRequest AsReadOnly()
        {
            if (_readOnly) return this;
            PaymentRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_payment.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_payment = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_payment = false;
            __fld_payment = global::Freshbooks.Library.Model.Payment.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaymentRequest value = (PaymentRequest)base.MemberwiseClone();
            value.__fld_payment = (global::Freshbooks.Library.Model.Payment)value.__fld_payment.Clone();
            return value;
        }
        public PaymentRequest Clone()
        {
            return (PaymentRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentRequest) MergeFrom((IPaymentRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaymentRequest other)
        {
            if (other.HasPayment) Payment = (global::Freshbooks.Library.Model.Payment)other.Payment.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "payment" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaymentRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Payment value = __fld_payment;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Payment.DefaultInstance) ? new global::Freshbooks.Library.Model.Payment() : new global::Freshbooks.Library.Model.Payment(__fld_payment);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_payment = value;
                        __has_payment = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaymentRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_payment)
            {
                __fld_payment.WriteXml("payment", writer);
            }
        }
        #endregion
    }
    #endregion
    #region PaymentUpdateRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentUpdateRequest : global::NClassify.Library.IMessage
    {
        bool HasPayment { get; }
        global::Freshbooks.Library.Model.PaymentUpdate Payment { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentUpdateRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentUpdateRequest : IPaymentUpdateRequest, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentUpdateRequest _defaultInstance = new PaymentUpdateRequest(false);
        public static PaymentUpdateRequest DefaultInstance { get { return _defaultInstance; } }
        static PaymentUpdateRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentUpdateRequest(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentUpdateRequest() : this(true)
        {
        }
        public PaymentUpdateRequest(IPaymentUpdateRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Payment = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidPayment(global::Freshbooks.Library.Model.PaymentUpdate value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Payment));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_payment;
        private global::Freshbooks.Library.Model.PaymentUpdate __fld_payment;
        #endregion
        #region Instance Members
        public bool HasPayment
        {
            get { return __has_payment; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = global::Freshbooks.Library.Model.PaymentUpdate.DefaultInstance;
                __has_payment = false;
            }
        }
        public global::Freshbooks.Library.Model.PaymentUpdate Payment
        {
            get
            {
                return __fld_payment;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Payment");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = value;
                __has_payment = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_payment)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Payment));
                errorCount++;
            }
            return errorCount;
        }
        public IPaymentUpdateRequest AsReadOnly()
        {
            if (_readOnly) return this;
            PaymentUpdateRequest copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_payment.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_payment = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_payment = false;
            __fld_payment = global::Freshbooks.Library.Model.PaymentUpdate.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaymentUpdateRequest value = (PaymentUpdateRequest)base.MemberwiseClone();
            value.__fld_payment = (global::Freshbooks.Library.Model.PaymentUpdate)value.__fld_payment.Clone();
            return value;
        }
        public PaymentUpdateRequest Clone()
        {
            return (PaymentUpdateRequest)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentUpdateRequest) MergeFrom((IPaymentUpdateRequest)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaymentUpdateRequest other)
        {
            if (other.HasPayment) Payment = (global::Freshbooks.Library.Model.PaymentUpdate)other.Payment.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "payment" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaymentUpdateRequest", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.PaymentUpdate value = __fld_payment;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.PaymentUpdate.DefaultInstance) ? new global::Freshbooks.Library.Model.PaymentUpdate() : new global::Freshbooks.Library.Model.PaymentUpdate(__fld_payment);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_payment = value;
                        __has_payment = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaymentUpdateRequest", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_payment)
            {
                __fld_payment.WriteXml("payment", writer);
            }
        }
        #endregion
    }
    #endregion
    #region PaymentResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentResponse : global::NClassify.Library.IMessage
    {
        bool HasPayment { get; }
        global::Freshbooks.Library.Model.Payment Payment { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentResponse : IPaymentResponse, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentResponse _defaultInstance = new PaymentResponse(false);
        public static PaymentResponse DefaultInstance { get { return _defaultInstance; } }
        static PaymentResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentResponse() : this(true)
        {
        }
        public PaymentResponse(IPaymentResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Payment = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidPayment(global::Freshbooks.Library.Model.Payment value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Payment));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_payment;
        private global::Freshbooks.Library.Model.Payment __fld_payment;
        #endregion
        #region Instance Members
        public bool HasPayment
        {
            get { return __has_payment; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = global::Freshbooks.Library.Model.Payment.DefaultInstance;
                __has_payment = false;
            }
        }
        public global::Freshbooks.Library.Model.Payment Payment
        {
            get
            {
                return __fld_payment;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("Payment");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = value;
                __has_payment = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_payment)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payment, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Payment));
                errorCount++;
            }
            return errorCount;
        }
        public IPaymentResponse AsReadOnly()
        {
            if (_readOnly) return this;
            PaymentResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_payment.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_payment = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_payment = false;
            __fld_payment = global::Freshbooks.Library.Model.Payment.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaymentResponse value = (PaymentResponse)base.MemberwiseClone();
            value.__fld_payment = (global::Freshbooks.Library.Model.Payment)value.__fld_payment.Clone();
            return value;
        }
        public PaymentResponse Clone()
        {
            return (PaymentResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentResponse) MergeFrom((IPaymentResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaymentResponse other)
        {
            if (other.HasPayment) Payment = (global::Freshbooks.Library.Model.Payment)other.Payment.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "payment" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaymentResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Payment value = __fld_payment;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Payment.DefaultInstance) ? new global::Freshbooks.Library.Model.Payment() : new global::Freshbooks.Library.Model.Payment(__fld_payment);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_payment = value;
                        __has_payment = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaymentResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_payment)
            {
                __fld_payment.WriteXml("payment", writer);
            }
        }
        #endregion
    }
    #endregion
    #region Payments
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPayments : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Payment> PaymentList { get; }
    }
    [global::System.Xml.Serialization.XmlType("Payments")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class Payments : global::Freshbooks.Library.Model.PaginatedResponse, IPayments, global::NClassify.Library.IBuilder
    {
        private static readonly Payments _defaultInstance = new Payments(false);
        public static new Payments DefaultInstance { get { return _defaultInstance; } }
        static Payments()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected Payments(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public Payments() : this(true)
        {
        }
        public Payments(IPayments copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            PaymentList = 10,
        }
        #endregion
        #region _PaymentList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _PaymentList : global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Payment>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("PaymentList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Payment> _contents;
            public _PaymentList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Payment>();
            }
            public _PaymentList(global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Payment> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Payment>(AssertNotNull(contents).Count);
                foreach (global::Freshbooks.Library.Model.Payment item in contents)
                {
                    if (clone)
                        _contents.Add((global::Freshbooks.Library.Model.Payment)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::Freshbooks.Library.Model.Payment> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::Freshbooks.Library.Model.Payment this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::Freshbooks.Library.Model.Payment value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::Freshbooks.Library.Model.Payment> value)
            {
                foreach (global::Freshbooks.Library.Model.Payment item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::Freshbooks.Library.Model.Payment value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::Freshbooks.Library.Model.Payment item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::Freshbooks.Library.Model.Payment item) { return _contents.Contains(item); }
            public int IndexOf(global::Freshbooks.Library.Model.Payment item) { return _contents.IndexOf(item); }
            public void CopyTo(global::Freshbooks.Library.Model.Payment[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _PaymentList Clone()
            {
                return _readOnly ? this : new _PaymentList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::Freshbooks.Library.Model.Payment> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidPaymentList(global::Freshbooks.Library.Model.Payment value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.PaymentList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.PaymentList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.PaymentList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private _PaymentList __fld_payment;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<global::Freshbooks.Library.Model.Payment> PaymentList
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Freshbooks.Library.Model.Payment>(__fld_payment);
                return __fld_payment;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payment = new _PaymentList(value, false);
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (global::Freshbooks.Library.Model.Payment item in __fld_payment)
            {
                if (!IsValidPaymentList(item, onError)) errorCount++;
            }
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            __fld_payment.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __fld_payment = new _PaymentList();
        }
        protected override object MemberwiseClone()
        {
            Payments value = (Payments)base.MemberwiseClone();
            value.__fld_payment = value.__fld_payment.Clone();
            return value;
        }
        public new Payments Clone()
        {
            return (Payments)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPayments) MergeFrom((IPayments)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IPayments other)
        {
            foreach (global::Freshbooks.Library.Model.Payment item in other.PaymentList)
                __fld_payment.Add((global::Freshbooks.Library.Model.Payment)item.Clone());
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "payment" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Payment child = new global::Freshbooks.Library.Model.Payment();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_payment.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region PaymentsResponse
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentsResponse : global::NClassify.Library.IMessage
    {
        bool HasPayments { get; }
        global::Freshbooks.Library.Model.Payments Payments { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentsResponse")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentsResponse : IPaymentsResponse, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentsResponse _defaultInstance = new PaymentsResponse(false);
        public static PaymentsResponse DefaultInstance { get { return _defaultInstance; } }
        static PaymentsResponse()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentsResponse(bool initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentsResponse() : this(true)
        {
        }
        public PaymentsResponse(IPaymentsResponse copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Payments = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidPayments(global::Freshbooks.Library.Model.Payments value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payments, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Payments));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Payments, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_payments;
        private global::Freshbooks.Library.Model.Payments __fld_payments;
        #endregion
        #region Instance Members
        public bool HasPayments
        {
            get { return __has_payments; }
        }
        public global::Freshbooks.Library.Model.Payments Payments
        {
            get
            {
                return __fld_payments;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Payments");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_payments = value;
                __has_payments = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_payments)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Payments, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Payments));
                errorCount++;
            }
            return errorCount;
        }
        public IPaymentsResponse AsReadOnly()
        {
            if (_readOnly) return this;
            PaymentsResponse copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_payments.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_payments = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_payments = false;
            __fld_payments = global::Freshbooks.Library.Model.Payments.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            PaymentsResponse value = (PaymentsResponse)base.MemberwiseClone();
            value.__fld_payments = (global::Freshbooks.Library.Model.Payments)value.__fld_payments.Clone();
            return value;
        }
        public PaymentsResponse Clone()
        {
            return (PaymentsResponse)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentsResponse) MergeFrom((IPaymentsResponse)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IPaymentsResponse other)
        {
            if (other.HasPayments) Payments = (global::Freshbooks.Library.Model.Payments)other.Payments.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "payments" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("PaymentsResponse", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.Payments value = __fld_payments;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::Freshbooks.Library.Model.Payments.DefaultInstance) ? new global::Freshbooks.Library.Model.Payments() : new global::Freshbooks.Library.Model.Payments(__fld_payments);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_payments = value;
                        __has_payments = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("PaymentsResponse", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
        }
        #endregion
    }
    #endregion
    #region PaymentsRequest
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentsRequest : global::NClassify.Library.IMessage
    {
        bool HasClientId { get; }
        global::Freshbooks.Library.Model.ClientId ClientId { get; }
        bool HasInvoiceId { get; }
        global::Freshbooks.Library.Model.InvoiceId InvoiceId { get; }
        bool HasDateFrom { get; }
        global::System.DateTime DateFrom { get; }
        bool HasDateTo { get; }
        global::System.DateTime DateTo { get; }
        bool HasUpdatedFrom { get; }
        global::System.DateTime UpdatedFrom { get; }
        bool HasUpdatedTo { get; }
        global::System.DateTime UpdatedTo { get; }
    }
    [global::System.Xml.Serialization.XmlType("PaymentsRequest")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentsRequest : global::Freshbooks.Library.Model.PaginatedRequest, IPaymentsRequest, global::NClassify.Library.IBuilder
    {
        private static readonly PaymentsRequest _defaultInstance = new PaymentsRequest(false);
        public static new PaymentsRequest DefaultInstance { get { return _defaultInstance; } }
        static PaymentsRequest()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected PaymentsRequest(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public PaymentsRequest() : this(true)
        {
        }
        public PaymentsRequest(IPaymentsRequest copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
            ClientId = 10,
            InvoiceId = 11,
            DateFrom = 12,
            DateTo = 13,
            UpdatedFrom = 14,
            UpdatedTo = 15,
        }
        #endregion
        #region Static Data
        public static bool IsValidClientId(global::Freshbooks.Library.Model.ClientId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ClientId, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidInvoiceId(global::Freshbooks.Library.Model.InvoiceId value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.InvoiceId, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_clientId;
        private global::Freshbooks.Library.Model.ClientId __fld_clientId;
        private bool __has_invoiceId;
        private global::Freshbooks.Library.Model.InvoiceId __fld_invoiceId;
        private bool __has_dateFrom;
        private global::System.DateTime __fld_dateFrom;
        private bool __has_dateTo;
        private global::System.DateTime __fld_dateTo;
        private bool __has_updatedFrom;
        private global::System.DateTime __fld_updatedFrom;
        private bool __has_updatedTo;
        private global::System.DateTime __fld_updatedTo;
        #endregion
        #region Instance Members
        public bool HasClientId
        {
            get { return __has_clientId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
                __has_clientId = false;
            }
        }
        public global::Freshbooks.Library.Model.ClientId ClientId
        {
            get
            {
                return __fld_clientId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clientId = value;
                __has_clientId = true;
            }
        }
        public bool HasInvoiceId
        {
            get { return __has_invoiceId; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
                __has_invoiceId = false;
            }
        }
        public global::Freshbooks.Library.Model.InvoiceId InvoiceId
        {
            get
            {
                return __fld_invoiceId;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_invoiceId = value;
                __has_invoiceId = true;
            }
        }
        public bool HasDateFrom
        {
            get { return __has_dateFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = global::System.DateTime.MinValue;
                __has_dateFrom = false;
            }
        }
        public global::System.DateTime DateFrom
        {
            get
            {
                return __fld_dateFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateFrom = value;
                __has_dateFrom = true;
            }
        }
        public bool HasDateTo
        {
            get { return __has_dateTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = global::System.DateTime.MinValue;
                __has_dateTo = false;
            }
        }
        public global::System.DateTime DateTo
        {
            get
            {
                return __fld_dateTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTo = value;
                __has_dateTo = true;
            }
        }
        public bool HasUpdatedFrom
        {
            get { return __has_updatedFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = global::System.DateTime.MinValue;
                __has_updatedFrom = false;
            }
        }
        public global::System.DateTime UpdatedFrom
        {
            get
            {
                return __fld_updatedFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedFrom = value;
                __has_updatedFrom = true;
            }
        }
        public bool HasUpdatedTo
        {
            get { return __has_updatedTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = global::System.DateTime.MinValue;
                __has_updatedTo = false;
            }
        }
        public global::System.DateTime UpdatedTo
        {
            get
            {
                return __fld_updatedTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_updatedTo = value;
                __has_updatedTo = true;
            }
        }
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_clientId && !IsValidClientId(__fld_clientId, onError)) errorCount++;
            if (__has_invoiceId && !IsValidInvoiceId(__fld_invoiceId, onError)) errorCount++;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
            __has_clientId = false;
            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(0UL);
            __has_invoiceId = false;
            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(0UL);
            __has_dateFrom = false;
            __fld_dateFrom = global::System.DateTime.MinValue;
            __has_dateTo = false;
            __fld_dateTo = global::System.DateTime.MinValue;
            __has_updatedFrom = false;
            __fld_updatedFrom = global::System.DateTime.MinValue;
            __has_updatedTo = false;
            __fld_updatedTo = global::System.DateTime.MinValue;
        }
        protected override object MemberwiseClone()
        {
            PaymentsRequest value = (PaymentsRequest)base.MemberwiseClone();
            return value;
        }
        public new PaymentsRequest Clone()
        {
            return (PaymentsRequest)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IPaymentsRequest) MergeFrom((IPaymentsRequest)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(IPaymentsRequest other)
        {
            if (other.HasClientId) ClientId = other.ClientId;
            if (other.HasInvoiceId) InvoiceId = other.InvoiceId;
            if (other.HasDateFrom) DateFrom = other.DateFrom;
            if (other.HasDateTo) DateTo = other.DateTo;
            if (other.HasUpdatedFrom) UpdatedFrom = other.UpdatedFrom;
            if (other.HasUpdatedTo) UpdatedTo = other.UpdatedTo;
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "client_id", "date_from", "date_to", "invoice_id", "updated_from", "updated_to" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_clientId = new global::Freshbooks.Library.Model.ClientId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_clientId = true;
                        }
                        break;
                    }
                    case 1:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateFrom = true;
                        }
                        break;
                    }
                    case 2:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_dateTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_dateTo = true;
                        }
                        break;
                    }
                    case 3:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_invoiceId = new global::Freshbooks.Library.Model.InvoiceId(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                            __has_invoiceId = true;
                        }
                        break;
                    }
                    case 4:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedFrom = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedFrom = true;
                        }
                        break;
                    }
                    case 5:
                    {
                        if (sbuilder.Length > 0)
                        {
                            __fld_updatedTo = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                            __has_updatedTo = true;
                        }
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
            if (__has_clientId)
            {
                writer.WriteElementString("client_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clientId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_invoiceId)
            {
                writer.WriteElementString("invoice_id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_invoiceId.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateFrom)
            {
                writer.WriteElementString("date_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTo)
            {
                writer.WriteElementString("date_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedFrom)
            {
                writer.WriteElementString("updated_from", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedFrom, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_updatedTo)
            {
                writer.WriteElementString("updated_to", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_updatedTo, "yyyy-MM-dd HH:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region PaymentService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IPaymentService
    {
        global::Freshbooks.Library.Model.PaymentIdentity Create(global::Freshbooks.Library.Model.PaymentRequest paymentRequest);
        void Update(global::Freshbooks.Library.Model.PaymentUpdateRequest paymentUpdateRequest);
        global::Freshbooks.Library.Model.PaymentResponse Get(global::Freshbooks.Library.Model.PaymentIdentity paymentIdentity);
        void Delete(global::Freshbooks.Library.Model.PaymentIdentity paymentIdentity);
        global::Freshbooks.Library.Model.PaymentsResponse List(global::Freshbooks.Library.Model.PaymentsRequest paymentsRequest);
    }
    [global::System.Xml.Serialization.XmlType("PaymentService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class PaymentService : IPaymentService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public PaymentService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public PaymentService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public global::Freshbooks.Library.Model.PaymentIdentity Create(global::Freshbooks.Library.Model.PaymentRequest paymentRequest)
        {
            global::Freshbooks.Library.Model.PaymentIdentity response = new global::Freshbooks.Library.Model.PaymentIdentity();
            Invoke("create", paymentRequest, response);
            return response;
        }
        public void Update(global::Freshbooks.Library.Model.PaymentUpdateRequest paymentUpdateRequest)
        {
            Invoke("update", paymentUpdateRequest, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.PaymentResponse Get(global::Freshbooks.Library.Model.PaymentIdentity paymentIdentity)
        {
            global::Freshbooks.Library.Model.PaymentResponse response = new global::Freshbooks.Library.Model.PaymentResponse();
            Invoke("get", paymentIdentity, response);
            return response;
        }
        public void Delete(global::Freshbooks.Library.Model.PaymentIdentity paymentIdentity)
        {
            Invoke("delete", paymentIdentity, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::Freshbooks.Library.Model.PaymentsResponse List(global::Freshbooks.Library.Model.PaymentsRequest paymentsRequest)
        {
            global::Freshbooks.Library.Model.PaymentsResponse response = new global::Freshbooks.Library.Model.PaymentsResponse();
            Invoke("list", paymentsRequest, response);
            return response;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IPaymentService _dispatch;
            public Dispatch(IPaymentService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IPaymentService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        response.MergeFrom(_dispatch.Create((global::Freshbooks.Library.Model.PaymentRequest)(object)request));
                        break;
                    }
                    case 1:
                    {
                        _dispatch.Delete((global::Freshbooks.Library.Model.PaymentIdentity)(object)request);
                        break;
                    }
                    case 2:
                    {
                        response.MergeFrom(_dispatch.Get((global::Freshbooks.Library.Model.PaymentIdentity)(object)request));
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.List((global::Freshbooks.Library.Model.PaymentsRequest)(object)request));
                        break;
                    }
                    case 4:
                    {
                        _dispatch.Update((global::Freshbooks.Library.Model.PaymentUpdateRequest)(object)request);
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IPaymentService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IPaymentService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IPaymentService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "create", "delete", "get", "list", "update" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::Freshbooks.Library.Model.PaymentRequest request = new global::Freshbooks.Library.Model.PaymentRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.PaymentIdentity response = new global::Freshbooks.Library.Model.PaymentIdentity();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 1:
                    {
                        global::Freshbooks.Library.Model.PaymentIdentity request = new global::Freshbooks.Library.Model.PaymentIdentity();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 2:
                    {
                        global::Freshbooks.Library.Model.PaymentIdentity request = new global::Freshbooks.Library.Model.PaymentIdentity();
                        readInput(request);
                        global::Freshbooks.Library.Model.PaymentResponse response = new global::Freshbooks.Library.Model.PaymentResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 3:
                    {
                        global::Freshbooks.Library.Model.PaymentsRequest request = new global::Freshbooks.Library.Model.PaymentsRequest();
                        readInput(request);
                        global::Freshbooks.Library.Model.PaymentsResponse response = new global::Freshbooks.Library.Model.PaymentsResponse();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    case 4:
                    {
                        global::Freshbooks.Library.Model.PaymentUpdateRequest request = new global::Freshbooks.Library.Model.PaymentUpdateRequest();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IPaymentService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
