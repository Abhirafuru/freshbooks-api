//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Freshbooks.Library.Properties
{
    using System;
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This partial class was auto-generated by the StronglyTypedResourceBuilder
    // partial class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal partial class Resources
    {
        private static global::System.Resources.ResourceManager resourceMan;
        private static global::System.Globalization.CultureInfo resourceCulture;
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Freshbooks.Library.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
  

        
        /// <summary>
        /// Returns the raw exception strings.
        /// </summary>
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("CSharpTest.Net.Generators", "1.11.225.410")]
        public static partial class ExceptionStrings
        {
            /// <summary>
            /// Formats a message for an exception
            /// </summary>
            internal static string SafeFormat(string message, params object[] args)
            {
                try
                {
                    return string.Format(resourceCulture, message, args);
                }
                catch
                {
                    return message ?? string.Empty;
                }
            }
            /// <summary>
            /// </summary>
            internal static string HelpLinkFormat(int hResult, string typeName)
            {
                return SafeFormat("", hResult, typeName);
            }
            /// <summary>
            /// The freshbooks server returned an error ({0}): {1}
            /// </summary>
            public static string FreshbooksServerException { get { return ResourceManager.GetString("FreshbooksServerException", resourceCulture); } }
            /// <summary>
            /// The freshbooks authentication error ({0}): {1}
            /// </summary>
            public static string ServerAuthenticationException { get { return ResourceManager.GetString("ServerAuthenticationException", resourceCulture); } }
            /// <summary>
            /// The freshbooks server returned an error.
            /// </summary>
            public static string UnknownServerException { get { return ResourceManager.GetString("UnknownServerException", resourceCulture); } }
        }
    
     }

    /// <summary>
    /// Exception class: FreshbooksServerException
    /// The freshbooks server returned an error ({0}): {1}
    /// </summary>
    [System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerStepThroughAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("CSharpTest.Net.Generators", "1.11.225.410")]
    public sealed partial class FreshbooksServerException : System.ApplicationException
    {
        /// <summary>
        /// Serialization constructor
        /// </summary>
        internal FreshbooksServerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }
        /// <summary>
        /// Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static System.Exception Create(int hResult, string message)
        {
            return new FreshbooksServerException((System.Exception)null, hResult, message);
        }
        /// <summary>
        /// Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        private FreshbooksServerException(System.Exception innerException, int hResult, string message) : base(message, innerException)
        {
            base.HResult = hResult;
            base.HelpLink = Freshbooks.Library.Properties.Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }
        
        /// <summary>
        /// The errorCode parameter passed to the constructor
        /// </summary>
        public int ErrorCode { get { if (Data["ErrorCode"] is int) return (int)Data["ErrorCode"]; else return default(int); } }
        
        /// <summary>
        /// The errorMessage parameter passed to the constructor
        /// </summary>
        public string ErrorMessage { get { if (Data["ErrorMessage"] is string) return (string)Data["ErrorMessage"]; else return default(string); } }
        
        /// <summary>
        /// The freshbooks server returned an error ({0}): {1}
        /// </summary>
        public FreshbooksServerException(int errorCode, string errorMessage)
        	: this((System.Exception)null, -1, Freshbooks.Library.Properties.Resources.ExceptionStrings.SafeFormat(Freshbooks.Library.Properties.Resources.ExceptionStrings.FreshbooksServerException, errorCode, errorMessage))
        {
            base.Data["ErrorCode"] = errorCode;
            base.Data["ErrorMessage"] = errorMessage;
        }
        /// <summary>
        /// The freshbooks server returned an error ({0}): {1}
        /// </summary>
        public FreshbooksServerException(int errorCode, string errorMessage, System.Exception innerException)
        	: this(innerException, -1, Freshbooks.Library.Properties.Resources.ExceptionStrings.SafeFormat(Freshbooks.Library.Properties.Resources.ExceptionStrings.FreshbooksServerException, errorCode, errorMessage))
        {
            base.Data["ErrorCode"] = errorCode;
            base.Data["ErrorMessage"] = errorMessage;
        }
        /// <summary>
        /// if(condition == false) throws The freshbooks server returned an error ({0}): {1}
        /// </summary>
        public static void Assert(bool condition, int errorCode, string errorMessage)
        {
            if (!condition) throw new FreshbooksServerException(errorCode, errorMessage);
        }
    }
    /// <summary>
    /// Exception class: ServerAuthenticationException
    /// The freshbooks authentication error ({0}): {1}
    /// </summary>
    [System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerStepThroughAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("CSharpTest.Net.Generators", "1.11.225.410")]
    public sealed partial class ServerAuthenticationException : System.ApplicationException
    {
        /// <summary>
        /// Serialization constructor
        /// </summary>
        internal ServerAuthenticationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }
        /// <summary>
        /// Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static System.Exception Create(int hResult, string message)
        {
            return new ServerAuthenticationException((System.Exception)null, hResult, message);
        }
        /// <summary>
        /// Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        private ServerAuthenticationException(System.Exception innerException, int hResult, string message) : base(message, innerException)
        {
            base.HResult = hResult;
            base.HelpLink = Freshbooks.Library.Properties.Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }
        
        /// <summary>
        /// The errorCode parameter passed to the constructor
        /// </summary>
        public int ErrorCode { get { if (Data["ErrorCode"] is int) return (int)Data["ErrorCode"]; else return default(int); } }
        
        /// <summary>
        /// The errorMessage parameter passed to the constructor
        /// </summary>
        public string ErrorMessage { get { if (Data["ErrorMessage"] is string) return (string)Data["ErrorMessage"]; else return default(string); } }
        
        /// <summary>
        /// The freshbooks authentication error ({0}): {1}
        /// </summary>
        public ServerAuthenticationException(int errorCode, string errorMessage)
        	: this((System.Exception)null, -1, Freshbooks.Library.Properties.Resources.ExceptionStrings.SafeFormat(Freshbooks.Library.Properties.Resources.ExceptionStrings.ServerAuthenticationException, errorCode, errorMessage))
        {
            base.Data["ErrorCode"] = errorCode;
            base.Data["ErrorMessage"] = errorMessage;
        }
        /// <summary>
        /// The freshbooks authentication error ({0}): {1}
        /// </summary>
        public ServerAuthenticationException(int errorCode, string errorMessage, System.Exception innerException)
        	: this(innerException, -1, Freshbooks.Library.Properties.Resources.ExceptionStrings.SafeFormat(Freshbooks.Library.Properties.Resources.ExceptionStrings.ServerAuthenticationException, errorCode, errorMessage))
        {
            base.Data["ErrorCode"] = errorCode;
            base.Data["ErrorMessage"] = errorMessage;
        }
        /// <summary>
        /// if(condition == false) throws The freshbooks authentication error ({0}): {1}
        /// </summary>
        public static void Assert(bool condition, int errorCode, string errorMessage)
        {
            if (!condition) throw new ServerAuthenticationException(errorCode, errorMessage);
        }
    }
    /// <summary>
    /// Exception class: UnknownServerException
    /// The freshbooks server returned an error.
    /// </summary>
    [System.SerializableAttribute()]
    [global::System.Diagnostics.DebuggerStepThroughAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("CSharpTest.Net.Generators", "1.11.225.410")]
    public sealed partial class UnknownServerException : System.ApplicationException
    {
        /// <summary>
        /// Serialization constructor
        /// </summary>
        internal UnknownServerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }
        /// <summary>
        /// Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static System.Exception Create(int hResult, string message)
        {
            return new UnknownServerException((System.Exception)null, hResult, message);
        }
        /// <summary>
        /// Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        private UnknownServerException(System.Exception innerException, int hResult, string message) : base(message, innerException)
        {
            base.HResult = hResult;
            base.HelpLink = Freshbooks.Library.Properties.Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }
        /// <summary>
        /// The freshbooks server returned an error.
        /// </summary>
        public UnknownServerException()
        	: this((System.Exception)null, -1, Freshbooks.Library.Properties.Resources.ExceptionStrings.UnknownServerException)
        {
        }
        /// <summary>
        /// The freshbooks server returned an error.
        /// </summary>
        public UnknownServerException(System.Exception innerException)
        	: this(innerException, -1, Freshbooks.Library.Properties.Resources.ExceptionStrings.UnknownServerException)
        {
        }
        /// <summary>
        /// if(condition == false) throws The freshbooks server returned an error.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new UnknownServerException();
        }
    }


}

